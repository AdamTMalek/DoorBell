
Receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ec  00800100  00000f5a  00000fee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000150  008001ec  008001ec  000010da  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010da  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001138  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00001178  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000152c  00000000  00000000  000012c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ad  00000000  00000000  000027f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000db3  00000000  00000000  000030a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000034c  00000000  00000000  00003e54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c7  00000000  00000000  000041a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000aab  00000000  00000000  00004667  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00005112  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 e2 02 	jmp	0x5c4	; 0x5c4 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 11 02 	jmp	0x422	; 0x422 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 1b 04 	jmp	0x836	; 0x836 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e5       	ldi	r30, 0x5A	; 90
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 3e       	cpi	r26, 0xEC	; 236
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	ac ee       	ldi	r26, 0xEC	; 236
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 33       	cpi	r26, 0x3C	; 60
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 a1 01 	call	0x342	; 0x342 <main>
  9e:	0c 94 ab 07 	jmp	0xf56	; 0xf56 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ESP_AT>:
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
	ESP_Response.ERROR = 0;
	ESP_Response.INPUT = 0;
  a6:	8d e1       	ldi	r24, 0x1D	; 29
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	0e 94 0c 04 	call	0x818	; 0x818 <UART_SendString>
  ae:	08 95       	ret

000000b0 <WaitForResponse>:
}
void WaitForResponse(void)
{
	while(ESP_Response.OK == 0 &&
  b0:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
  b4:	80 fd       	sbrc	r24, 0
  b6:	08 c0       	rjmp	.+16     	; 0xc8 <WaitForResponse+0x18>
		  ESP_Response.ERROR == 0 &&
  b8:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
	ESP_Response.ERROR = 0;
	ESP_Response.INPUT = 0;
}
void WaitForResponse(void)
{
	while(ESP_Response.OK == 0 &&
  bc:	81 fd       	sbrc	r24, 1
  be:	04 c0       	rjmp	.+8      	; 0xc8 <WaitForResponse+0x18>
		  ESP_Response.ERROR == 0 &&
		  ESP_Response.INPUT == 0);
  c0:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
	ESP_Response.INPUT = 0;
}
void WaitForResponse(void)
{
	while(ESP_Response.OK == 0 &&
		  ESP_Response.ERROR == 0 &&
  c4:	82 ff       	sbrs	r24, 2
  c6:	f4 cf       	rjmp	.-24     	; 0xb0 <WaitForResponse>
  c8:	08 95       	ret

000000ca <ESP_Initialize>:
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
  ca:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ESP_Response>
	ESP_Response.ERROR = 0;
  d4:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
  d8:	8d 7f       	andi	r24, 0xFD	; 253
  da:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ESP_Response>
	ESP_Response.INPUT = 0;
  de:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
  e2:	8b 7f       	andi	r24, 0xFB	; 251
  e4:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ESP_Response>
/************************************************************************/
uint8_t ESP_Initialize(void)
{
	/*--- Checking communication between microcontroller and ESP ---*/
	ResetResponse();
	bufferIndex = 0;
  e8:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <bufferIndex>
	ESP_AT();
  ec:	0e 94 53 00 	call	0xa6	; 0xa6 <ESP_AT>
	WaitForResponse();
  f0:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
  f4:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
  f8:	8e 7f       	andi	r24, 0xFE	; 254
  fa:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ESP_Response>
	ESP_Response.ERROR = 0;
  fe:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
 102:	8d 7f       	andi	r24, 0xFD	; 253
 104:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ESP_Response>
	ESP_Response.INPUT = 0;
 108:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
 10c:	8b 7f       	andi	r24, 0xFB	; 251
 10e:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ESP_Response>

	/*--- ECHO ---*/
#if ESP_ECHO == 0
	UART_SendString("ATE0\r\n");
#else
	UART_SendString("ATE1\r\n");
 112:	8b e2       	ldi	r24, 0x2B	; 43
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	0e 94 0c 04 	call	0x818	; 0x818 <UART_SendString>
#endif
	WaitForResponse();
 11a:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
 11e:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
 122:	8e 7f       	andi	r24, 0xFE	; 254
 124:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ESP_Response>
	ESP_Response.ERROR = 0;
 128:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
 12c:	8d 7f       	andi	r24, 0xFD	; 253
 12e:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ESP_Response>
	ESP_Response.INPUT = 0;
 132:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
 136:	8b 7f       	andi	r24, 0xFB	; 251
 138:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ESP_Response>
#endif
	WaitForResponse();
	ResetResponse();

#if ESP_DHCP == 1
	UART_SendString("AT+CWDHCP=2,1\r\n");
 13c:	82 e3       	ldi	r24, 0x32	; 50
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	0e 94 0c 04 	call	0x818	; 0x818 <UART_SendString>
#else
	UART_SendString("AT+CWDHCP=2,0\r\n");
#endif
	WaitForResponse();
 144:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
 148:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
 14c:	8e 7f       	andi	r24, 0xFE	; 254
 14e:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ESP_Response>
	ESP_Response.ERROR = 0;
 152:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
 156:	8d 7f       	andi	r24, 0xFD	; 253
 158:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ESP_Response>
	ESP_Response.INPUT = 0;
 15c:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
 160:	8b 7f       	andi	r24, 0xFB	; 251
 162:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ESP_Response>
	WaitForResponse();
	ResetResponse();

	/*--- MODE ---*/
#if ESP_WIFIMODE == 1
	UART_SendString("AT+CWMODE=1\r\n"); //STATION MODE
 166:	82 e4       	ldi	r24, 0x42	; 66
 168:	91 e0       	ldi	r25, 0x01	; 1
 16a:	0e 94 0c 04 	call	0x818	; 0x818 <UART_SendString>
#elif ESP_WIFIMODE == 2
	UART_SendString("AT+CWMODE=2\r\n"); //ACCESS POINT MODE
#elif ESP_WIFIMODE == 3
	UART_SendString("AT+CWMODE=3\r\n"); //STATON + ACCESS POINT MODE
#endif
	WaitForResponse();
 16e:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
 172:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
 176:	8e 7f       	andi	r24, 0xFE	; 254
 178:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ESP_Response>
	ESP_Response.ERROR = 0;
 17c:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
 180:	8d 7f       	andi	r24, 0xFD	; 253
 182:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ESP_Response>
	ESP_Response.INPUT = 0;
 186:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
 18a:	8b 7f       	andi	r24, 0xFB	; 251
 18c:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ESP_Response>
	WaitForResponse();
	ResetResponse();

	/*--- CONNECTING TO WIFI ---*/
#if ESP_WIFIMODE == 1 || ESP_WIFIMODE  == 3
	ESP_Response.ERROR = 0;
 190:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
 194:	8d 7f       	andi	r24, 0xFD	; 253
 196:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ESP_Response>
	
	UART_SendString("AT+CWJAP=\"");
 19a:	80 e5       	ldi	r24, 0x50	; 80
 19c:	91 e0       	ldi	r25, 0x01	; 1
 19e:	0e 94 0c 04 	call	0x818	; 0x818 <UART_SendString>
	UART_SendString(ESP_APNAME);
 1a2:	8b e5       	ldi	r24, 0x5B	; 91
 1a4:	91 e0       	ldi	r25, 0x01	; 1
 1a6:	0e 94 0c 04 	call	0x818	; 0x818 <UART_SendString>
	UART_SendString("\",\"");
 1aa:	84 e9       	ldi	r24, 0x94	; 148
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	0e 94 0c 04 	call	0x818	; 0x818 <UART_SendString>
	UART_SendString(ESP_APPASSWORD);
 1b2:	87 e6       	ldi	r24, 0x67	; 103
 1b4:	91 e0       	ldi	r25, 0x01	; 1
 1b6:	0e 94 0c 04 	call	0x818	; 0x818 <UART_SendString>
	UART_SendString("\"\r\n");
 1ba:	82 e7       	ldi	r24, 0x72	; 114
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	0e 94 0c 04 	call	0x818	; 0x818 <UART_SendString>
	WaitForResponse();
 1c2:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	if(ESP_Response.ERROR == 1)
 1c6:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
 1ca:	81 ff       	sbrs	r24, 1
 1cc:	07 c0       	rjmp	.+14     	; 0x1dc <ESP_Initialize+0x112>
	{
		ESP_Response.ERROR = 0;
 1ce:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
 1d2:	8d 7f       	andi	r24, 0xFD	; 253
 1d4:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ESP_Response>
		return 2;
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	08 95       	ret
	}
	else
	{
		ESP_Response.OK = 0;
 1dc:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
 1e0:	8e 7f       	andi	r24, 0xFE	; 254
 1e2:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ESP_Response>
	ResetResponse();
	#endif

#endif /* ESP_WIFIMODE == 2 || ESP_WIFIMODE == 3 */
#if ESP_CONNECTIONTYPE == 1 //UDP
	UART_SendString("AT+CIPMUX=0\r\n");
 1e6:	86 e7       	ldi	r24, 0x76	; 118
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	0e 94 0c 04 	call	0x818	; 0x818 <UART_SendString>
	WaitForResponse();
 1ee:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
 1f2:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
 1f6:	8e 7f       	andi	r24, 0xFE	; 254
 1f8:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ESP_Response>
	ESP_Response.ERROR = 0;
 1fc:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
 200:	8d 7f       	andi	r24, 0xFD	; 253
 202:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ESP_Response>
	ESP_Response.INPUT = 0;
 206:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
 20a:	8b 7f       	andi	r24, 0xFB	; 251
 20c:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ESP_Response>
#endif /* ESP_WIFIMODE == 2 || ESP_WIFIMODE == 3 */
#if ESP_CONNECTIONTYPE == 1 //UDP
	UART_SendString("AT+CIPMUX=0\r\n");
	WaitForResponse();
	ResetResponse();
	UART_SendString("AT+CIPSTART=\"UDP\",\"");
 210:	84 e8       	ldi	r24, 0x84	; 132
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	0e 94 0c 04 	call	0x818	; 0x818 <UART_SendString>
	UART_SendString(ESP_IP);
 218:	88 e9       	ldi	r24, 0x98	; 152
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	0e 94 0c 04 	call	0x818	; 0x818 <UART_SendString>
	UART_SendString("\",");
 220:	86 ea       	ldi	r24, 0xA6	; 166
 222:	91 e0       	ldi	r25, 0x01	; 1
 224:	0e 94 0c 04 	call	0x818	; 0x818 <UART_SendString>
	UART_SendString(ESP_PORT);
 228:	89 ea       	ldi	r24, 0xA9	; 169
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	0e 94 0c 04 	call	0x818	; 0x818 <UART_SendString>
	UART_SendString("\r\n");
 230:	83 e7       	ldi	r24, 0x73	; 115
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	0e 94 0c 04 	call	0x818	; 0x818 <UART_SendString>
	WaitForResponse();
 238:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
 23c:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
 240:	8e 7f       	andi	r24, 0xFE	; 254
 242:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ESP_Response>
	ESP_Response.ERROR = 0;
 246:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
 24a:	8d 7f       	andi	r24, 0xFD	; 253
 24c:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ESP_Response>
	ESP_Response.INPUT = 0;
 250:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
 254:	8b 7f       	andi	r24, 0xFB	; 251
 256:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ESP_Response>
#else
	UART_SendString("AT+CIPDINFO=1\r\n");
	WaitForResponse();
	ResetResponse();
#endif
	return 0;
 25a:	80 e0       	ldi	r24, 0x00	; 0
}
 25c:	08 95       	ret

0000025e <ESP_Send>:
}
/************************************************************************/
/*                               SENDING                                */
/************************************************************************/
uint8_t ESP_Send(char* data, char* connectionID)
{
 25e:	ef 92       	push	r14
 260:	ff 92       	push	r15
 262:	0f 93       	push	r16
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	00 d0       	rcall	.+0      	; 0x26c <ESP_Send+0xe>
 26c:	00 d0       	rcall	.+0      	; 0x26e <ESP_Send+0x10>
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
 272:	8c 01       	movw	r16, r24
#if ESP_CONNECTIONTYPE == 2
	if(ESP_Connections == 0) //If there are no connections...
		return 1; //Return 1 - error
#endif
	//Length of data
	uint16_t size = strlen(data);
 274:	fc 01       	movw	r30, r24
 276:	01 90       	ld	r0, Z+
 278:	00 20       	and	r0, r0
 27a:	e9 f7       	brne	.-6      	; 0x276 <ESP_Send+0x18>
 27c:	31 97       	sbiw	r30, 0x01	; 1
 27e:	e8 1b       	sub	r30, r24
 280:	f9 0b       	sbc	r31, r25
	char length[4];
	sprintf(length, "%d", size);
 282:	ff 93       	push	r31
 284:	ef 93       	push	r30
 286:	8e ea       	ldi	r24, 0xAE	; 174
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	9f 93       	push	r25
 28c:	8f 93       	push	r24
 28e:	ce 01       	movw	r24, r28
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	7c 01       	movw	r14, r24
 294:	9f 93       	push	r25
 296:	8f 93       	push	r24
 298:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <sprintf>

	UART_SendString("AT+CIPSEND=");
 29c:	81 eb       	ldi	r24, 0xB1	; 177
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	0e 94 0c 04 	call	0x818	; 0x818 <UART_SendString>
#if ESP_CONNECTIONTYPE == 2
	UART_SendString(connectionID);
	UART_SendString(",");
#endif
	UART_SendString(length);
 2a4:	c7 01       	movw	r24, r14
 2a6:	0e 94 0c 04 	call	0x818	; 0x818 <UART_SendString>
	UART_SendString("\r\n");
 2aa:	83 e7       	ldi	r24, 0x73	; 115
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	0e 94 0c 04 	call	0x818	; 0x818 <UART_SendString>
	while(!ESP_Response.INPUT && !ESP_Response.ERROR);
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	0f 90       	pop	r0
 2ba:	0f 90       	pop	r0
 2bc:	0f 90       	pop	r0
 2be:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <ESP_Response>
 2c2:	92 fd       	sbrc	r25, 2
 2c4:	04 c0       	rjmp	.+8      	; 0x2ce <ESP_Send+0x70>
 2c6:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <ESP_Response>
 2ca:	91 ff       	sbrs	r25, 1
 2cc:	f8 cf       	rjmp	.-16     	; 0x2be <ESP_Send+0x60>
	if(ESP_Response.INPUT == 1)
 2ce:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
 2d2:	82 ff       	sbrs	r24, 2
 2d4:	04 c0       	rjmp	.+8      	; 0x2de <ESP_Send+0x80>
	{
		UART_SendString(data);
 2d6:	c8 01       	movw	r24, r16
 2d8:	0e 94 0c 04 	call	0x818	; 0x818 <UART_SendString>
 2dc:	0b c0       	rjmp	.+22     	; 0x2f4 <ESP_Send+0x96>
	}
	else if(ESP_Response.ERROR) 
 2de:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
 2e2:	81 ff       	sbrs	r24, 1
 2e4:	07 c0       	rjmp	.+14     	; 0x2f4 <ESP_Send+0x96>
	{
		ESP_Response.ERROR = 0;
 2e6:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
 2ea:	8d 7f       	andi	r24, 0xFD	; 253
 2ec:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ESP_Response>
		return 1;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	10 c0       	rjmp	.+32     	; 0x314 <ESP_Send+0xb6>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
 2f4:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
 2f8:	8e 7f       	andi	r24, 0xFE	; 254
 2fa:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ESP_Response>
	ESP_Response.ERROR = 0;
 2fe:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
 302:	8d 7f       	andi	r24, 0xFD	; 253
 304:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ESP_Response>
	ESP_Response.INPUT = 0;
 308:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
 30c:	8b 7f       	andi	r24, 0xFB	; 251
 30e:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ESP_Response>
#if ESP_CONNECTIONTYPE == 2
	UART_SendString("AT+CIPCLOSE=0\r\n");
	WaitForResponse();
#endif
	ResetResponse();
	return 0;
 312:	80 e0       	ldi	r24, 0x00	; 0
}
 314:	0f 90       	pop	r0
 316:	0f 90       	pop	r0
 318:	0f 90       	pop	r0
 31a:	0f 90       	pop	r0
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	1f 91       	pop	r17
 322:	0f 91       	pop	r16
 324:	ff 90       	pop	r15
 326:	ef 90       	pop	r14
 328:	08 95       	ret

0000032a <RingBell>:
#endif
	}
}
void RingBell(void)
{
	PORTB |= (1<<BELL);
 32a:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 32c:	2f ef       	ldi	r18, 0xFF	; 255
 32e:	8f ef       	ldi	r24, 0xFF	; 255
 330:	9c e2       	ldi	r25, 0x2C	; 44
 332:	21 50       	subi	r18, 0x01	; 1
 334:	80 40       	sbci	r24, 0x00	; 0
 336:	90 40       	sbci	r25, 0x00	; 0
 338:	e1 f7       	brne	.-8      	; 0x332 <RingBell+0x8>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <RingBell+0x12>
 33c:	00 00       	nop
	_delay_ms(1000);
	PORTB &= ~(1<<BELL);
 33e:	29 98       	cbi	0x05, 1	; 5
 340:	08 95       	ret

00000342 <main>:
 342:	2f ef       	ldi	r18, 0xFF	; 255
 344:	8f ef       	ldi	r24, 0xFF	; 255
 346:	9c e2       	ldi	r25, 0x2C	; 44
 348:	21 50       	subi	r18, 0x01	; 1
 34a:	80 40       	sbci	r24, 0x00	; 0
 34c:	90 40       	sbci	r25, 0x00	; 0
 34e:	e1 f7       	brne	.-8      	; 0x348 <main+0x6>
 350:	00 c0       	rjmp	.+0      	; 0x352 <main+0x10>
 352:	00 00       	nop
void RingBell(void);
int main(void)
{
	_delay_ms(1000); //Waiting until ESP is ready

	DDRB |= (1<<BELL);
 354:	21 9a       	sbi	0x04, 1	; 4

	// --- TIMER --- //
	TCCR1B = (1<<CS12) | (1<<CS10); // clk/1024 prescaler
 356:	85 e0       	ldi	r24, 0x05	; 5
 358:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 = (1<<TOIE1); //Overflow interrupt enable
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

	// --- RF12 --- //
	RF_Initialize();
 362:	0e 94 22 02 	call	0x444	; 0x444 <RF_Initialize>
	RF_SetRange(RANGE_433MHZ);
 366:	80 e1       	ldi	r24, 0x10	; 16
 368:	0e 94 7d 02 	call	0x4fa	; 0x4fa <RF_SetRange>
	RF_SetFrequency(RFFREQ433(432.74));
 36c:	88 ee       	ldi	r24, 0xE8	; 232
 36e:	93 e0       	ldi	r25, 0x03	; 3
 370:	0e 94 9a 02 	call	0x534	; 0x534 <RF_SetFrequency>
	RF_SetBaudRate(9600);
 374:	80 e8       	ldi	r24, 0x80	; 128
 376:	95 e2       	ldi	r25, 0x25	; 37
 378:	0e 94 aa 02 	call	0x554	; 0x554 <RF_SetBaudRate>
	RF_SetBandwith(RxBW200, LNA_6, RSSI_79);
 37c:	44 e0       	ldi	r20, 0x04	; 4
 37e:	61 e0       	ldi	r22, 0x01	; 1
 380:	84 e0       	ldi	r24, 0x04	; 4
 382:	0e 94 83 02 	call	0x506	; 0x506 <RF_SetBandwith>
	RF_SetPower(PWRdB_0, TxBW120);
 386:	67 e0       	ldi	r22, 0x07	; 7
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0e 94 d5 02 	call	0x5aa	; 0x5aa <RF_SetPower>
	RF_DisableWakeUpTimer();
 38e:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <RF_DisableWakeUpTimer>
	RF_Transmit(0x0000);
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	0e 94 4b 02 	call	0x496	; 0x496 <RF_Transmit>
	RF_Transmit(0xCC77);
 39a:	87 e7       	ldi	r24, 0x77	; 119
 39c:	9c ec       	ldi	r25, 0xCC	; 204
 39e:	0e 94 4b 02 	call	0x496	; 0x496 <RF_Transmit>
	uint8_t ret = 0;

	sei();
 3a2:	78 94       	sei

	// --- UART --- //
	UART_Initlialise(UBRR);
 3a4:	87 e0       	ldi	r24, 0x07	; 7
 3a6:	90 e0       	ldi	r25, 0x00	; 0
 3a8:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <UART_Initlialise>
	ESP_Initialize();
 3ac:	0e 94 65 00 	call	0xca	; 0xca <ESP_Initialize>

	// --- SLEEP AND POWER MANAGEMENT --- //
	PRR = (1<<PRTWI) | (1<<PRTIM2) | (1<<PRADC);
 3b0:	81 ec       	ldi	r24, 0xC1	; 193
 3b2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>

	ESP_Send(conntestMsg,0);
 3b6:	60 e0       	ldi	r22, 0x00	; 0
 3b8:	70 e0       	ldi	r23, 0x00	; 0
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	0e 94 2f 01 	call	0x25e	; 0x25e <ESP_Send>
	while (1)
	{
		if(connCounter >= 13) //Approximately a minute
 3c2:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <connCounter>
 3c6:	8d 30       	cpi	r24, 0x0D	; 13
 3c8:	40 f0       	brcs	.+16     	; 0x3da <main+0x98>
		{
			ESP_Send(conntestMsg,0);
 3ca:	60 e0       	ldi	r22, 0x00	; 0
 3cc:	70 e0       	ldi	r23, 0x00	; 0
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	91 e0       	ldi	r25, 0x01	; 1
 3d2:	0e 94 2f 01 	call	0x25e	; 0x25e <ESP_Send>
			connCounter = 0;
 3d6:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <connCounter>
		}

	// --- RF12 RECEIVING DATA --- //
#if RF_UseIRQ == 1
	if(!(RF_status.status & 0x07))
 3da:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <RF_status>
 3de:	87 70       	andi	r24, 0x07	; 7
 3e0:	11 f4       	brne	.+4      	; 0x3e6 <main+0xa4>
	{
		RF_RxStart();
 3e2:	0e 94 68 03 	call	0x6d0	; 0x6d0 <RF_RxStart>
	}
	if(RF_status.New)
 3e6:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <RF_status>
 3ea:	82 ff       	sbrs	r24, 2
 3ec:	ea cf       	rjmp	.-44     	; 0x3c2 <main+0x80>
	{
		ret = RF_RxFinish(data);
 3ee:	80 ef       	ldi	r24, 0xF0	; 240
 3f0:	91 e0       	ldi	r25, 0x01	; 1
 3f2:	0e 94 8f 03 	call	0x71e	; 0x71e <RF_RxFinish>

		if(data > 0 && ret < 254)
 3f6:	8e 3f       	cpi	r24, 0xFE	; 254
 3f8:	58 f4       	brcc	.+22     	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
		{
			RingBell();
 3fa:	0e 94 95 01 	call	0x32a	; 0x32a <RingBell>
			ESP_Send(data,0);
 3fe:	60 e0       	ldi	r22, 0x00	; 0
 400:	70 e0       	ldi	r23, 0x00	; 0
 402:	80 ef       	ldi	r24, 0xF0	; 240
 404:	91 e0       	ldi	r25, 0x01	; 1
 406:	0e 94 2f 01 	call	0x25e	; 0x25e <ESP_Send>
			data[16] = 0;
 40a:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <data+0x10>
 40e:	d9 cf       	rjmp	.-78     	; 0x3c2 <main+0x80>
		}
		else if(!ret)
 410:	81 11       	cpse	r24, r1
 412:	d7 cf       	rjmp	.-82     	; 0x3c2 <main+0x80>
		{
			ESP_Send(crcErrorMsg, 0);
 414:	60 e0       	ldi	r22, 0x00	; 0
 416:	70 e0       	ldi	r23, 0x00	; 0
 418:	89 e0       	ldi	r24, 0x09	; 9
 41a:	91 e0       	ldi	r25, 0x01	; 1
 41c:	0e 94 2f 01 	call	0x25e	; 0x25e <ESP_Send>
 420:	d0 cf       	rjmp	.-96     	; 0x3c2 <main+0x80>

00000422 <__vector_13>:
	_delay_ms(1000);
	PORTB &= ~(1<<BELL);
}
// --- "ALIVE" LED INTERRUPT --- //
ISR(TIMER1_OVF_vect) //4.5s on 14MHz clock
{
 422:	1f 92       	push	r1
 424:	0f 92       	push	r0
 426:	0f b6       	in	r0, 0x3f	; 63
 428:	0f 92       	push	r0
 42a:	11 24       	eor	r1, r1
 42c:	8f 93       	push	r24
	connCounter++;	
 42e:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <connCounter>
 432:	8f 5f       	subi	r24, 0xFF	; 255
 434:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <connCounter>
 438:	8f 91       	pop	r24
 43a:	0f 90       	pop	r0
 43c:	0f be       	out	0x3f, r0	; 63
 43e:	0f 90       	pop	r0
 440:	1f 90       	pop	r1
 442:	18 95       	reti

00000444 <RF_Initialize>:
//-------------------------INITIALIZATION-------------------------------//
void RF_Initialize(void)
{
	//	INTIALZATION OF PINS
	
	RF_DDR |= (1<<SDI) | (1<<SCK) | (1<<CS);
 444:	84 b1       	in	r24, 0x04	; 4
 446:	8c 62       	ori	r24, 0x2C	; 44
 448:	84 b9       	out	0x04, r24	; 4
	RF_DDR &= ~(1<<SDO);
 44a:	24 98       	cbi	0x04, 4	; 4
	
	RF_PORT |= (1<<CS);
 44c:	2a 9a       	sbi	0x05, 2	; 5
	//SPCR = (1<<SPE) | (1<<MSTR); //SCK - Fosc/128

#if RF_UseIRQ == 1
	RF_PORT |= (1<<SDO);
 44e:	2c 9a       	sbi	0x05, 4	; 5
 450:	2f ef       	ldi	r18, 0xFF	; 255
 452:	8f e7       	ldi	r24, 0x7F	; 127
 454:	94 e0       	ldi	r25, 0x04	; 4
 456:	21 50       	subi	r18, 0x01	; 1
 458:	80 40       	sbci	r24, 0x00	; 0
 45a:	90 40       	sbci	r25, 0x00	; 0
 45c:	e1 f7       	brne	.-8      	; 0x456 <RF_Initialize+0x12>
 45e:	00 c0       	rjmp	.+0      	; 0x460 <RF_Initialize+0x1c>
 460:	00 00       	nop
#endif

	_delay_ms(100); //WAITING FOR MODULE TO RESET

#if RF_UseIRQ == 1
	RF_status.Rx = 0;
 462:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <RF_status>
 466:	8e 7f       	andi	r24, 0xFE	; 254
 468:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <RF_status>
	RF_status.Tx = 0;
 46c:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <RF_status>
 470:	8d 7f       	andi	r24, 0xFD	; 253
 472:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <RF_status>
	RF_status.New = 0;
 476:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <RF_status>
 47a:	8b 7f       	andi	r24, 0xFB	; 251
 47c:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <RF_status>

	RF_IRQDDR &= ~(1<<IRQ);
 480:	52 98       	cbi	0x0a, 2	; 10
	//LOW STATE ON INT0 WILL GENERATE AN INTERRUPT
	EICRA &= ~(1<<ISC01);
 482:	e9 e6       	ldi	r30, 0x69	; 105
 484:	f0 e0       	ldi	r31, 0x00	; 0
 486:	80 81       	ld	r24, Z
 488:	8d 7f       	andi	r24, 0xFD	; 253
 48a:	80 83       	st	Z, r24
	EICRA &= ~(1<<ISC00);
 48c:	80 81       	ld	r24, Z
 48e:	8e 7f       	andi	r24, 0xFE	; 254
 490:	80 83       	st	Z, r24

	EIMSK |= (1<<INT0);
 492:	e8 9a       	sbi	0x1d, 0	; 29
 494:	08 95       	ret

00000496 <RF_Transmit>:
#endif
}

//----------------------------TRANSMITION-------------------------------//
uint16_t RF_Transmit(uint16_t data)
{
 496:	ac 01       	movw	r20, r24
	uint16_t ret_val = 0;
	uint8_t i;

	RF_PORT &= ~(1<<CS);
 498:	2a 98       	cbi	0x05, 2	; 5
 49a:	90 e1       	ldi	r25, 0x10	; 16
}

//----------------------------TRANSMITION-------------------------------//
uint16_t RF_Transmit(uint16_t data)
{
	uint16_t ret_val = 0;
 49c:	20 e0       	ldi	r18, 0x00	; 0
 49e:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;

	RF_PORT &= ~(1<<CS);
	for (i=0; i<16; i++)
	{
		if (data & 0x8000) RF_PORT |= (1<<SDI);
 4a0:	55 23       	and	r21, r21
 4a2:	14 f4       	brge	.+4      	; 0x4a8 <RF_Transmit+0x12>
 4a4:	2b 9a       	sbi	0x05, 3	; 5
 4a6:	01 c0       	rjmp	.+2      	; 0x4aa <RF_Transmit+0x14>
		else RF_PORT &= ~(1<<SDI);
 4a8:	2b 98       	cbi	0x05, 3	; 5

		ret_val <<= 1;
 4aa:	22 0f       	add	r18, r18
 4ac:	33 1f       	adc	r19, r19
		if (RF_PIN&(1<<SDO)) ret_val |= 1;
 4ae:	1c 99       	sbic	0x03, 4	; 3
 4b0:	21 60       	ori	r18, 0x01	; 1
		RF_PORT |= (1<<SCK);
 4b2:	2d 9a       	sbi	0x05, 5	; 5
		data <<= 1;
 4b4:	44 0f       	add	r20, r20
 4b6:	55 1f       	adc	r21, r21
		asm("nop");
 4b8:	00 00       	nop
		asm("nop");
 4ba:	00 00       	nop
		RF_PORT &= ~(1<<SCK);
 4bc:	2d 98       	cbi	0x05, 5	; 5
 4be:	91 50       	subi	r25, 0x01	; 1
{
	uint16_t ret_val = 0;
	uint8_t i;

	RF_PORT &= ~(1<<CS);
	for (i=0; i<16; i++)
 4c0:	79 f7       	brne	.-34     	; 0x4a0 <RF_Transmit+0xa>
		data <<= 1;
		asm("nop");
		asm("nop");
		RF_PORT &= ~(1<<SCK);
	}
	RF_PORT |= (1<<CS);
 4c2:	2a 9a       	sbi	0x05, 2	; 5

	RF_PORT |= (1<<CS);

	return response;
	*/
}
 4c4:	c9 01       	movw	r24, r18
 4c6:	08 95       	ret

000004c8 <UpdateChecksum>:
//--------------------CALCULATING CHECKSUM (CRC16)--------------------------//
uint16_t UpdateChecksum(uint16_t checksum, uint8_t data)
{
	uint16_t tmp = (data<<8);
 4c8:	70 e0       	ldi	r23, 0x00	; 0
 4ca:	76 2f       	mov	r23, r22
 4cc:	66 27       	eor	r22, r22
 4ce:	28 e0       	ldi	r18, 0x08	; 8
 4d0:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i < 8; i++)
	{
		if((checksum ^ tmp) & 0x8000)
 4d2:	ab 01       	movw	r20, r22
 4d4:	48 27       	eor	r20, r24
 4d6:	59 27       	eor	r21, r25
 4d8:	55 23       	and	r21, r21
 4da:	3c f4       	brge	.+14     	; 0x4ea <UpdateChecksum+0x22>
			checksum = (checksum<<1) ^ 0x1021;
 4dc:	88 0f       	add	r24, r24
 4de:	99 1f       	adc	r25, r25
 4e0:	41 e2       	ldi	r20, 0x21	; 33
 4e2:	84 27       	eor	r24, r20
 4e4:	40 e1       	ldi	r20, 0x10	; 16
 4e6:	94 27       	eor	r25, r20
 4e8:	02 c0       	rjmp	.+4      	; 0x4ee <UpdateChecksum+0x26>
		else
			checksum = (checksum<<1);
 4ea:	88 0f       	add	r24, r24
 4ec:	99 1f       	adc	r25, r25
		tmp = tmp << 1;
 4ee:	66 0f       	add	r22, r22
 4f0:	77 1f       	adc	r23, r23
 4f2:	21 50       	subi	r18, 0x01	; 1
 4f4:	31 09       	sbc	r19, r1
}
//--------------------CALCULATING CHECKSUM (CRC16)--------------------------//
uint16_t UpdateChecksum(uint16_t checksum, uint8_t data)
{
	uint16_t tmp = (data<<8);
	for(int i = 0; i < 8; i++)
 4f6:	69 f7       	brne	.-38     	; 0x4d2 <UpdateChecksum+0xa>
		else
			checksum = (checksum<<1);
		tmp = tmp << 1;
	}
	return checksum;
}
 4f8:	08 95       	ret

000004fa <RF_SetRange>:
//--------------------RANGE BAUDRATE AND FREQUENCY----------------------//
void RF_SetRange(enum RANGE range)
{
	RF_Transmit(0x80C7 | range); //ENABLE FIFO, SET RANGE
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	87 6c       	ori	r24, 0xC7	; 199
 4fe:	90 68       	ori	r25, 0x80	; 128
 500:	0e 94 4b 02 	call	0x496	; 0x496 <RF_Transmit>
 504:	08 95       	ret

00000506 <RF_SetBandwith>:
}
void RF_SetBandwith(uint8_t bandwidth, uint8_t gain, uint8_t drssi)
{
	RF_Transmit(0x9000 | ((bandwidth & 7) << 5) | ((gain & 3) << 3) | (drssi & 7));
 506:	47 70       	andi	r20, 0x07	; 7
 508:	50 e0       	ldi	r21, 0x00	; 0
 50a:	50 69       	ori	r21, 0x90	; 144
 50c:	63 70       	andi	r22, 0x03	; 3
 50e:	70 e0       	ldi	r23, 0x00	; 0
 510:	66 0f       	add	r22, r22
 512:	77 1f       	adc	r23, r23
 514:	66 0f       	add	r22, r22
 516:	77 1f       	adc	r23, r23
 518:	66 0f       	add	r22, r22
 51a:	77 1f       	adc	r23, r23
 51c:	46 2b       	or	r20, r22
 51e:	57 2b       	or	r21, r23
 520:	20 e2       	ldi	r18, 0x20	; 32
 522:	82 9f       	mul	r24, r18
 524:	c0 01       	movw	r24, r0
 526:	11 24       	eor	r1, r1
 528:	99 27       	eor	r25, r25
 52a:	84 2b       	or	r24, r20
 52c:	95 2b       	or	r25, r21
 52e:	0e 94 4b 02 	call	0x496	; 0x496 <RF_Transmit>
 532:	08 95       	ret

00000534 <RF_SetFrequency>:
}
void RF_SetFrequency(uint16_t frequency)
{
	if(frequency < 96)
 534:	80 36       	cpi	r24, 0x60	; 96
 536:	91 05       	cpc	r25, r1
 538:	38 f0       	brcs	.+14     	; 0x548 <RF_SetFrequency+0x14>
 53a:	80 34       	cpi	r24, 0x40	; 64
 53c:	2f e0       	ldi	r18, 0x0F	; 15
 53e:	92 07       	cpc	r25, r18
 540:	28 f0       	brcs	.+10     	; 0x54c <RF_SetFrequency+0x18>
 542:	8f e3       	ldi	r24, 0x3F	; 63
 544:	9f e0       	ldi	r25, 0x0F	; 15
 546:	02 c0       	rjmp	.+4      	; 0x54c <RF_SetFrequency+0x18>
		frequency = 96;
 548:	80 e6       	ldi	r24, 0x60	; 96
 54a:	90 e0       	ldi	r25, 0x00	; 0
	else if (frequency > 3903)
		frequency = 3903;
	RF_Transmit(0xA000 | frequency);
 54c:	90 6a       	ori	r25, 0xA0	; 160
 54e:	0e 94 4b 02 	call	0x496	; 0x496 <RF_Transmit>
 552:	08 95       	ret

00000554 <RF_SetBaudRate>:
}
void RF_SetBaudRate(uint16_t baud)
{
	if(baud<663)
 554:	87 39       	cpi	r24, 0x97	; 151
 556:	22 e0       	ldi	r18, 0x02	; 2
 558:	92 07       	cpc	r25, r18
 55a:	08 f1       	brcs	.+66     	; 0x59e <RF_SetBaudRate+0x4a>
 55c:	9c 01       	movw	r18, r24
		return;
	if(baud<5400)
 55e:	28 31       	cpi	r18, 0x18	; 24
 560:	85 e1       	ldi	r24, 0x15	; 21
 562:	38 07       	cpc	r19, r24
 564:	78 f4       	brcc	.+30     	; 0x584 <RF_SetBaudRate+0x30>
		RF_Transmit(0xC680 | ((43104/baud)-1));
 566:	40 e0       	ldi	r20, 0x00	; 0
 568:	50 e0       	ldi	r21, 0x00	; 0
 56a:	60 e6       	ldi	r22, 0x60	; 96
 56c:	78 ea       	ldi	r23, 0xA8	; 168
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	0e 94 b4 04 	call	0x968	; 0x968 <__divmodsi4>
 576:	c9 01       	movw	r24, r18
 578:	01 97       	sbiw	r24, 0x01	; 1
 57a:	80 68       	ori	r24, 0x80	; 128
 57c:	96 6c       	ori	r25, 0xC6	; 198
 57e:	0e 94 4b 02 	call	0x496	; 0x496 <RF_Transmit>
 582:	08 95       	ret
	else
		RF_Transmit(0xC600 | ((344828UL/baud)-1));		
 584:	40 e0       	ldi	r20, 0x00	; 0
 586:	50 e0       	ldi	r21, 0x00	; 0
 588:	6c ef       	ldi	r22, 0xFC	; 252
 58a:	72 e4       	ldi	r23, 0x42	; 66
 58c:	85 e0       	ldi	r24, 0x05	; 5
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	0e 94 92 04 	call	0x924	; 0x924 <__udivmodsi4>
 594:	c9 01       	movw	r24, r18
 596:	01 97       	sbiw	r24, 0x01	; 1
 598:	96 6c       	ori	r25, 0xC6	; 198
 59a:	0e 94 4b 02 	call	0x496	; 0x496 <RF_Transmit>
 59e:	08 95       	ret

000005a0 <RF_DisableWakeUpTimer>:
}
//----------------------WAKE UP TIMER DISABLING-------------------------//
void RF_DisableWakeUpTimer(void)
{
	RF_Transmit(0xE000);
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	90 ee       	ldi	r25, 0xE0	; 224
 5a4:	0e 94 4b 02 	call	0x496	; 0x496 <RF_Transmit>
 5a8:	08 95       	ret

000005aa <RF_SetPower>:
}
//---------------------------POWER SETTING------------------------------//
void RF_SetPower(uint8_t power, uint8_t mod)
{
	RF_Transmit(0x9800 | (power & 7) | ((mod & 15)<<4));
 5aa:	87 70       	andi	r24, 0x07	; 7
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	98 69       	ori	r25, 0x98	; 152
 5b0:	20 e1       	ldi	r18, 0x10	; 16
 5b2:	62 9f       	mul	r22, r18
 5b4:	b0 01       	movw	r22, r0
 5b6:	11 24       	eor	r1, r1
 5b8:	77 27       	eor	r23, r23
 5ba:	86 2b       	or	r24, r22
 5bc:	97 2b       	or	r25, r23
 5be:	0e 94 4b 02 	call	0x496	; 0x496 <RF_Transmit>
 5c2:	08 95       	ret

000005c4 <__vector_1>:
uint8_t RF_Data[(RF_DataLength + 10)]; // +10 FOR THE REST OF THE FRAME

//----------------------------------------------------------------------//
//-------------------------------ISR------------------------------------//
ISR(INT0_vect)
{	
 5c4:	1f 92       	push	r1
 5c6:	0f 92       	push	r0
 5c8:	0f b6       	in	r0, 0x3f	; 63
 5ca:	0f 92       	push	r0
 5cc:	11 24       	eor	r1, r1
 5ce:	2f 93       	push	r18
 5d0:	3f 93       	push	r19
 5d2:	4f 93       	push	r20
 5d4:	5f 93       	push	r21
 5d6:	6f 93       	push	r22
 5d8:	7f 93       	push	r23
 5da:	8f 93       	push	r24
 5dc:	9f 93       	push	r25
 5de:	af 93       	push	r26
 5e0:	bf 93       	push	r27
 5e2:	cf 93       	push	r28
 5e4:	ef 93       	push	r30
 5e6:	ff 93       	push	r31
	if(RF_status.Rx)
 5e8:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <RF_status>
 5ec:	80 ff       	sbrs	r24, 0
 5ee:	3d c0       	rjmp	.+122    	; 0x66a <__vector_1+0xa6>
	{
		if(RF_Index < RF_DataLength)
 5f0:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <__data_end>
 5f4:	84 36       	cpi	r24, 0x64	; 100
 5f6:	d8 f4       	brcc	.+54     	; 0x62e <__vector_1+0x6a>
		{
			RF_Data[RF_Index++] = RF_Transmit(0xB000) & 0x00FF;
 5f8:	c0 91 ec 01 	lds	r28, 0x01EC	; 0x8001ec <__data_end>
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	8c 0f       	add	r24, r28
 600:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <__data_end>
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	90 eb       	ldi	r25, 0xB0	; 176
 608:	0e 94 4b 02 	call	0x496	; 0x496 <RF_Transmit>
 60c:	ec 2f       	mov	r30, r28
 60e:	f0 e0       	ldi	r31, 0x00	; 0
 610:	e6 59       	subi	r30, 0x96	; 150
 612:	fd 4f       	sbci	r31, 0xFD	; 253
 614:	80 83       	st	Z, r24
			RF_Transmit(0x8208);
			RF_status.Rx = 0;
			RF_status.New = 1; //FRAME NOT RIGHT
			return;
		}
		if(RF_Index >= (RF_Data[0] + 3))
 616:	20 91 ec 01 	lds	r18, 0x01EC	; 0x8001ec <__data_end>
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <RF_Data>
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	03 96       	adiw	r24, 0x03	; 3
 624:	28 17       	cp	r18, r24
 626:	39 07       	cpc	r19, r25
 628:	0c f4       	brge	.+2      	; 0x62c <__vector_1+0x68>
 62a:	40 c0       	rjmp	.+128    	; 0x6ac <__vector_1+0xe8>
 62c:	0f c0       	rjmp	.+30     	; 0x64c <__vector_1+0x88>
		{
			RF_Data[RF_Index++] = RF_Transmit(0xB000) & 0x00FF;
		}
		else
		{
			RF_Transmit(0x8208);
 62e:	88 e0       	ldi	r24, 0x08	; 8
 630:	92 e8       	ldi	r25, 0x82	; 130
 632:	0e 94 4b 02 	call	0x496	; 0x496 <RF_Transmit>
			RF_status.Rx = 0;
 636:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <RF_status>
 63a:	8e 7f       	andi	r24, 0xFE	; 254
 63c:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <RF_status>
			RF_status.New = 1; //FRAME NOT RIGHT
 640:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <RF_status>
 644:	84 60       	ori	r24, 0x04	; 4
 646:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <RF_status>
			return;
 64a:	30 c0       	rjmp	.+96     	; 0x6ac <__vector_1+0xe8>
		}
		if(RF_Index >= (RF_Data[0] + 3))
		{
			RF_Transmit(0x8208);
 64c:	88 e0       	ldi	r24, 0x08	; 8
 64e:	92 e8       	ldi	r25, 0x82	; 130
 650:	0e 94 4b 02 	call	0x496	; 0x496 <RF_Transmit>
			RF_status.Rx = 0;
 654:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <RF_status>
 658:	8e 7f       	andi	r24, 0xFE	; 254
 65a:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <RF_status>
			RF_status.New = 1; //FRAME IS RIGHT
 65e:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <RF_status>
 662:	84 60       	ori	r24, 0x04	; 4
 664:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <RF_status>
 668:	21 c0       	rjmp	.+66     	; 0x6ac <__vector_1+0xe8>
		}
	}
	else if(RF_status.Tx)
 66a:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <RF_status>
 66e:	81 ff       	sbrs	r24, 1
 670:	1d c0       	rjmp	.+58     	; 0x6ac <__vector_1+0xe8>
	{
		RF_Transmit(0xB800 | RF_Data[RF_Index]);
 672:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <__data_end>
 676:	f0 e0       	ldi	r31, 0x00	; 0
 678:	e6 59       	subi	r30, 0x96	; 150
 67a:	fd 4f       	sbci	r31, 0xFD	; 253
 67c:	80 81       	ld	r24, Z
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	98 6b       	ori	r25, 0xB8	; 184
 682:	0e 94 4b 02 	call	0x496	; 0x496 <RF_Transmit>
		if(!RF_Index)
 686:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <__data_end>
 68a:	81 11       	cpse	r24, r1
 68c:	0a c0       	rjmp	.+20     	; 0x6a2 <__vector_1+0xde>
		{
			RF_status.Tx = 0;
 68e:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <RF_status>
 692:	8d 7f       	andi	r24, 0xFD	; 253
 694:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <RF_status>
			RF_Transmit(0x8208); //TX OFF
 698:	88 e0       	ldi	r24, 0x08	; 8
 69a:	92 e8       	ldi	r25, 0x82	; 130
 69c:	0e 94 4b 02 	call	0x496	; 0x496 <RF_Transmit>
 6a0:	05 c0       	rjmp	.+10     	; 0x6ac <__vector_1+0xe8>
		}
		else
		{	
			RF_Index--;
 6a2:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <__data_end>
 6a6:	81 50       	subi	r24, 0x01	; 1
 6a8:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <__data_end>
		}
	}
}
 6ac:	ff 91       	pop	r31
 6ae:	ef 91       	pop	r30
 6b0:	cf 91       	pop	r28
 6b2:	bf 91       	pop	r27
 6b4:	af 91       	pop	r26
 6b6:	9f 91       	pop	r25
 6b8:	8f 91       	pop	r24
 6ba:	7f 91       	pop	r23
 6bc:	6f 91       	pop	r22
 6be:	5f 91       	pop	r21
 6c0:	4f 91       	pop	r20
 6c2:	3f 91       	pop	r19
 6c4:	2f 91       	pop	r18
 6c6:	0f 90       	pop	r0
 6c8:	0f be       	out	0x3f, r0	; 63
 6ca:	0f 90       	pop	r0
 6cc:	1f 90       	pop	r1
 6ce:	18 95       	reti

000006d0 <RF_RxStart>:
//-----------------------------DATA RECEIVE-----------------------------//
uint8_t RF_RxStart(void)
{
	if(RF_status.New)
 6d0:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <RF_status>
 6d4:	82 fd       	sbrc	r24, 2
 6d6:	1d c0       	rjmp	.+58     	; 0x712 <RF_RxStart+0x42>
		return 1;		//BUFFER NOT EMPTY YET
	if(RF_status.Tx)
 6d8:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <RF_status>
 6dc:	81 fd       	sbrc	r24, 1
 6de:	1b c0       	rjmp	.+54     	; 0x716 <RF_RxStart+0x46>
		return 2;		//TRANSMITION IN PROGRESS
	if(RF_status.Rx)
 6e0:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <RF_status>
 6e4:	80 fd       	sbrc	r24, 0
 6e6:	19 c0       	rjmp	.+50     	; 0x71a <RF_RxStart+0x4a>
		return 3;		//RECEIVING IN PROGRESS

	RF_Transmit(0x82C8); //RX ON
 6e8:	88 ec       	ldi	r24, 0xC8	; 200
 6ea:	92 e8       	ldi	r25, 0x82	; 130
 6ec:	0e 94 4b 02 	call	0x496	; 0x496 <RF_Transmit>

	//FIFO RESET
	RF_Transmit(0xCA81);
 6f0:	81 e8       	ldi	r24, 0x81	; 129
 6f2:	9a ec       	ldi	r25, 0xCA	; 202
 6f4:	0e 94 4b 02 	call	0x496	; 0x496 <RF_Transmit>
	RF_Transmit(0xCA83);
 6f8:	83 e8       	ldi	r24, 0x83	; 131
 6fa:	9a ec       	ldi	r25, 0xCA	; 202
 6fc:	0e 94 4b 02 	call	0x496	; 0x496 <RF_Transmit>

	RF_Index = 0;
 700:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <__data_end>
	RF_status.Rx = 1;
 704:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <RF_status>
 708:	81 60       	ori	r24, 0x01	; 1
 70a:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <RF_status>

	return 0;			//EVERYTING OK
 70e:	80 e0       	ldi	r24, 0x00	; 0
 710:	08 95       	ret
}
//-----------------------------DATA RECEIVE-----------------------------//
uint8_t RF_RxStart(void)
{
	if(RF_status.New)
		return 1;		//BUFFER NOT EMPTY YET
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	08 95       	ret
	if(RF_status.Tx)
		return 2;		//TRANSMITION IN PROGRESS
 716:	82 e0       	ldi	r24, 0x02	; 2
 718:	08 95       	ret
	if(RF_status.Rx)
		return 3;		//RECEIVING IN PROGRESS
 71a:	83 e0       	ldi	r24, 0x03	; 3

	RF_Index = 0;
	RF_status.Rx = 1;

	return 0;			//EVERYTING OK
}
 71c:	08 95       	ret

0000071e <RF_RxFinish>:
 *	OR (ERRORS)
 *	255 - receiving in progress
 *	254 - previous frame was not read
*/
uint8_t RF_RxFinish(char* data)
{
 71e:	cf 92       	push	r12
 720:	df 92       	push	r13
 722:	ef 92       	push	r14
 724:	ff 92       	push	r15
 726:	0f 93       	push	r16
 728:	1f 93       	push	r17
 72a:	cf 93       	push	r28
 72c:	df 93       	push	r29
 72e:	ec 01       	movw	r28, r24
	uint16_t crc;
	uint16_t crc_checksum = 0;
	uint8_t size = RF_Data[0];
 730:	10 91 6a 02 	lds	r17, 0x026A	; 0x80026a <RF_Data>

	if(RF_status.Rx)
 734:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <RF_status>
 738:	90 fd       	sbrc	r25, 0
 73a:	4d c0       	rjmp	.+154    	; 0x7d6 <RF_RxFinish+0xb8>
		return 255;
	if(!RF_status.New)
 73c:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <RF_status>
 740:	82 ff       	sbrs	r24, 2
 742:	4b c0       	rjmp	.+150    	; 0x7da <RF_RxFinish+0xbc>
		return 254;

	if(size > RF_DataLength)
 744:	15 36       	cpi	r17, 0x65	; 101
 746:	58 f4       	brcc	.+22     	; 0x75e <RF_RxFinish+0x40>
		data[0] = 0;
		RF_status.New = 0;
		return 0; //FRAME SIZE NOT RIGHT
	}
	uint8_t i;
	for(i = 0; i < (size + 1); i++)
 748:	e1 2e       	mov	r14, r17
 74a:	f1 2c       	mov	r15, r1
 74c:	c7 01       	movw	r24, r14
 74e:	01 96       	adiw	r24, 0x01	; 1
 750:	6c 01       	movw	r12, r24
 752:	20 e0       	ldi	r18, 0x00	; 0
 754:	30 e0       	ldi	r19, 0x00	; 0
 756:	00 e0       	ldi	r16, 0x00	; 0
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	08 c0       	rjmp	.+16     	; 0x76e <RF_RxFinish+0x50>
	if(!RF_status.New)
		return 254;

	if(size > RF_DataLength)
	{
		data[0] = 0;
 75e:	18 82       	st	Y, r1
		RF_status.New = 0;
 760:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <RF_status>
 764:	8b 7f       	andi	r24, 0xFB	; 251
 766:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <RF_status>
		return 0; //FRAME SIZE NOT RIGHT
 76a:	80 e0       	ldi	r24, 0x00	; 0
 76c:	39 c0       	rjmp	.+114    	; 0x7e0 <RF_RxFinish+0xc2>
	}
	uint8_t i;
	for(i = 0; i < (size + 1); i++)
	{
		crc_checksum = UpdateChecksum(crc_checksum, RF_Data[i]);
 76e:	f9 01       	movw	r30, r18
 770:	e6 59       	subi	r30, 0x96	; 150
 772:	fd 4f       	sbci	r31, 0xFD	; 253
 774:	60 81       	ld	r22, Z
 776:	0e 94 64 02 	call	0x4c8	; 0x4c8 <UpdateChecksum>
		data[0] = 0;
		RF_status.New = 0;
		return 0; //FRAME SIZE NOT RIGHT
	}
	uint8_t i;
	for(i = 0; i < (size + 1); i++)
 77a:	0f 5f       	subi	r16, 0xFF	; 255
 77c:	20 2f       	mov	r18, r16
 77e:	30 e0       	ldi	r19, 0x00	; 0
 780:	2c 15       	cp	r18, r12
 782:	3d 05       	cpc	r19, r13
 784:	a4 f3       	brlt	.-24     	; 0x76e <RF_RxFinish+0x50>
	{
		crc_checksum = UpdateChecksum(crc_checksum, RF_Data[i]);
	}

	crc = RF_Data[i++];
 786:	f9 01       	movw	r30, r18
 788:	e6 59       	subi	r30, 0x96	; 150
 78a:	fd 4f       	sbci	r31, 0xFD	; 253
 78c:	20 81       	ld	r18, Z
 78e:	0f 5f       	subi	r16, 0xFF	; 255
	crc |= RF_Data[i] << 8;
 790:	e0 2f       	mov	r30, r16
 792:	f0 e0       	ldi	r31, 0x00	; 0
 794:	e6 59       	subi	r30, 0x96	; 150
 796:	fd 4f       	sbci	r31, 0xFD	; 253
 798:	40 81       	ld	r20, Z
 79a:	30 e0       	ldi	r19, 0x00	; 0
 79c:	34 2b       	or	r19, r20
	RF_status.New = 0;
 79e:	40 91 69 02 	lds	r20, 0x0269	; 0x800269 <RF_status>
 7a2:	4b 7f       	andi	r20, 0xFB	; 251
 7a4:	40 93 69 02 	sts	0x0269, r20	; 0x800269 <RF_status>
	
	if(crc != crc_checksum)
 7a8:	28 17       	cp	r18, r24
 7aa:	39 07       	cpc	r19, r25
 7ac:	c1 f4       	brne	.+48     	; 0x7de <RF_RxFinish+0xc0>
		return 0; //DATA NOT RIGHT - DIFFERENT CHECKSUMS
	else
	{
		for(int i = 0; i < size; i++)
 7ae:	1e 14       	cp	r1, r14
 7b0:	1f 04       	cpc	r1, r15
 7b2:	64 f4       	brge	.+24     	; 0x7cc <RF_RxFinish+0xae>
 7b4:	eb e6       	ldi	r30, 0x6B	; 107
 7b6:	f2 e0       	ldi	r31, 0x02	; 2
 7b8:	de 01       	movw	r26, r28
 7ba:	21 2f       	mov	r18, r17
 7bc:	30 e0       	ldi	r19, 0x00	; 0
 7be:	25 59       	subi	r18, 0x95	; 149
 7c0:	3d 4f       	sbci	r19, 0xFD	; 253
		{
			data[i] = RF_Data[i+1];
 7c2:	91 91       	ld	r25, Z+
 7c4:	9d 93       	st	X+, r25
	
	if(crc != crc_checksum)
		return 0; //DATA NOT RIGHT - DIFFERENT CHECKSUMS
	else
	{
		for(int i = 0; i < size; i++)
 7c6:	e2 17       	cp	r30, r18
 7c8:	f3 07       	cpc	r31, r19
 7ca:	d9 f7       	brne	.-10     	; 0x7c2 <RF_RxFinish+0xa4>
		{
			data[i] = RF_Data[i+1];
		}
		data[size] = 0; //ENDING FRAME WITH 0
 7cc:	c1 0f       	add	r28, r17
 7ce:	d1 1d       	adc	r29, r1
 7d0:	18 82       	st	Y, r1
		return size; //SIZE OF RECEIVED FRAME IN BYTES
 7d2:	81 2f       	mov	r24, r17
 7d4:	05 c0       	rjmp	.+10     	; 0x7e0 <RF_RxFinish+0xc2>
	uint16_t crc;
	uint16_t crc_checksum = 0;
	uint8_t size = RF_Data[0];

	if(RF_status.Rx)
		return 255;
 7d6:	8f ef       	ldi	r24, 0xFF	; 255
 7d8:	03 c0       	rjmp	.+6      	; 0x7e0 <RF_RxFinish+0xc2>
	if(!RF_status.New)
		return 254;
 7da:	8e ef       	ldi	r24, 0xFE	; 254
 7dc:	01 c0       	rjmp	.+2      	; 0x7e0 <RF_RxFinish+0xc2>
	crc = RF_Data[i++];
	crc |= RF_Data[i] << 8;
	RF_status.New = 0;
	
	if(crc != crc_checksum)
		return 0; //DATA NOT RIGHT - DIFFERENT CHECKSUMS
 7de:	80 e0       	ldi	r24, 0x00	; 0
			data[i] = RF_Data[i+1];
		}
		data[size] = 0; //ENDING FRAME WITH 0
		return size; //SIZE OF RECEIVED FRAME IN BYTES
	}
}
 7e0:	df 91       	pop	r29
 7e2:	cf 91       	pop	r28
 7e4:	1f 91       	pop	r17
 7e6:	0f 91       	pop	r16
 7e8:	ff 90       	pop	r15
 7ea:	ef 90       	pop	r14
 7ec:	df 90       	pop	r13
 7ee:	cf 90       	pop	r12
 7f0:	08 95       	ret

000007f2 <UART_Initlialise>:
char UART_ReceiveChar(void)
{
	while(!(UCSR0A & (1<<RXC0))); //EMPTY LOOP - WAITING UNTILL DATA IS RECEIVED

	return UDR0;
}
 7f2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 7f6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 7fa:	88 e9       	ldi	r24, 0x98	; 152
 7fc:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 800:	86 e0       	ldi	r24, 0x06	; 6
 802:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 806:	08 95       	ret

00000808 <UART_SendChar>:
 808:	e0 ec       	ldi	r30, 0xC0	; 192
 80a:	f0 e0       	ldi	r31, 0x00	; 0
 80c:	90 81       	ld	r25, Z
 80e:	95 ff       	sbrs	r25, 5
 810:	fd cf       	rjmp	.-6      	; 0x80c <UART_SendChar+0x4>
 812:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 816:	08 95       	ret

00000818 <UART_SendString>:
 818:	cf 93       	push	r28
 81a:	df 93       	push	r29
 81c:	ec 01       	movw	r28, r24
 81e:	88 81       	ld	r24, Y
 820:	88 23       	and	r24, r24
 822:	31 f0       	breq	.+12     	; 0x830 <UART_SendString+0x18>
 824:	21 96       	adiw	r28, 0x01	; 1
 826:	0e 94 04 04 	call	0x808	; 0x808 <UART_SendChar>
 82a:	89 91       	ld	r24, Y+
 82c:	81 11       	cpse	r24, r1
 82e:	fb cf       	rjmp	.-10     	; 0x826 <UART_SendString+0xe>
 830:	df 91       	pop	r29
 832:	cf 91       	pop	r28
 834:	08 95       	ret

00000836 <__vector_18>:
ISR(USART_RX_vect)
{
 836:	1f 92       	push	r1
 838:	0f 92       	push	r0
 83a:	0f b6       	in	r0, 0x3f	; 63
 83c:	0f 92       	push	r0
 83e:	11 24       	eor	r1, r1
 840:	8f 93       	push	r24
 842:	ef 93       	push	r30
 844:	ff 93       	push	r31
	uint8_t receivedByte = UDR0;
 846:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	buffer[bufferIndex] = receivedByte;
 84a:	e0 91 ed 01 	lds	r30, 0x01ED	; 0x8001ed <bufferIndex>
 84e:	f0 e0       	ldi	r31, 0x00	; 0
 850:	e8 52       	subi	r30, 0x28	; 40
 852:	fd 4f       	sbci	r31, 0xFD	; 253
 854:	80 83       	st	Z, r24
	if(receivedByte == '\n')
 856:	8a 30       	cpi	r24, 0x0A	; 10
 858:	09 f0       	breq	.+2      	; 0x85c <__vector_18+0x26>
 85a:	49 c0       	rjmp	.+146    	; 0x8ee <__vector_18+0xb8>
	{
		if(buffer[0] == 'O' && buffer[1] == 'K')
 85c:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <buffer>
 860:	8f 34       	cpi	r24, 0x4F	; 79
 862:	51 f4       	brne	.+20     	; 0x878 <__vector_18+0x42>
 864:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <buffer+0x1>
 868:	8b 34       	cpi	r24, 0x4B	; 75
 86a:	31 f4       	brne	.+12     	; 0x878 <__vector_18+0x42>
		{
			ESP_Response.OK = 1;
 86c:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
 870:	81 60       	ori	r24, 0x01	; 1
 872:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ESP_Response>
 876:	38 c0       	rjmp	.+112    	; 0x8e8 <__vector_18+0xb2>
		}
		else if(buffer[0] == 'E' && buffer[1] == 'R' && buffer[4] == 'R')
 878:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <buffer>
 87c:	85 34       	cpi	r24, 0x45	; 69
 87e:	71 f4       	brne	.+28     	; 0x89c <__vector_18+0x66>
 880:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <buffer+0x1>
 884:	82 35       	cpi	r24, 0x52	; 82
 886:	51 f4       	brne	.+20     	; 0x89c <__vector_18+0x66>
 888:	80 91 dc 02 	lds	r24, 0x02DC	; 0x8002dc <buffer+0x4>
 88c:	82 35       	cpi	r24, 0x52	; 82
 88e:	31 f4       	brne	.+12     	; 0x89c <__vector_18+0x66>
		{
			ESP_Response.ERROR = 1;
 890:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
 894:	82 60       	ori	r24, 0x02	; 2
 896:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ESP_Response>
 89a:	26 c0       	rjmp	.+76     	; 0x8e8 <__vector_18+0xb2>
		}
		else if(buffer[1] == ',' && buffer[3] == 'O')
 89c:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <buffer+0x1>
 8a0:	8c 32       	cpi	r24, 0x2C	; 44
 8a2:	51 f4       	brne	.+20     	; 0x8b8 <__vector_18+0x82>
 8a4:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <buffer+0x3>
 8a8:	8f 34       	cpi	r24, 0x4F	; 79
 8aa:	31 f4       	brne	.+12     	; 0x8b8 <__vector_18+0x82>
		{
			ESP_Connections++;
 8ac:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ESP_Connections>
 8b0:	8f 5f       	subi	r24, 0xFF	; 255
 8b2:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <ESP_Connections>
 8b6:	18 c0       	rjmp	.+48     	; 0x8e8 <__vector_18+0xb2>
		}
		else if(buffer[1] == ',' && buffer[3] == 'L')
 8b8:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <buffer+0x1>
 8bc:	8c 32       	cpi	r24, 0x2C	; 44
 8be:	51 f4       	brne	.+20     	; 0x8d4 <__vector_18+0x9e>
 8c0:	80 91 db 02 	lds	r24, 0x02DB	; 0x8002db <buffer+0x3>
 8c4:	8c 34       	cpi	r24, 0x4C	; 76
 8c6:	31 f4       	brne	.+12     	; 0x8d4 <__vector_18+0x9e>
		{
			ESP_Connections--;
 8c8:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <ESP_Connections>
 8cc:	81 50       	subi	r24, 0x01	; 1
 8ce:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <ESP_Connections>
 8d2:	0a c0       	rjmp	.+20     	; 0x8e8 <__vector_18+0xb2>
		}
		else if(buffer[0] == 'S' && buffer[5] == 'O')
 8d4:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <buffer>
 8d8:	83 35       	cpi	r24, 0x53	; 83
 8da:	31 f4       	brne	.+12     	; 0x8e8 <__vector_18+0xb2>
 8dc:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <buffer+0x5>
 8e0:	8f 34       	cpi	r24, 0x4F	; 79
 8e2:	11 f4       	brne	.+4      	; 0x8e8 <__vector_18+0xb2>
			ESP_Response.OK;
 8e4:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
		bufferIndex = 0;
 8e8:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <bufferIndex>
 8ec:	13 c0       	rjmp	.+38     	; 0x914 <__stack+0x15>
	}
	else if(receivedByte == ' ')
 8ee:	80 32       	cpi	r24, 0x20	; 32
 8f0:	61 f4       	brne	.+24     	; 0x90a <__stack+0xb>
	{
		if(buffer[0] == '>')
 8f2:	80 91 d8 02 	lds	r24, 0x02D8	; 0x8002d8 <buffer>
 8f6:	8e 33       	cpi	r24, 0x3E	; 62
 8f8:	69 f4       	brne	.+26     	; 0x914 <__stack+0x15>
		{
			ESP_Response.INPUT = 1;
 8fa:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <ESP_Response>
 8fe:	84 60       	ori	r24, 0x04	; 4
 900:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <ESP_Response>
			bufferIndex = 0;
 904:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <bufferIndex>
 908:	05 c0       	rjmp	.+10     	; 0x914 <__stack+0x15>
		}	
	}
	else
	{
		bufferIndex++;
 90a:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <bufferIndex>
 90e:	8f 5f       	subi	r24, 0xFF	; 255
 910:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <bufferIndex>
	}
 914:	ff 91       	pop	r31
 916:	ef 91       	pop	r30
 918:	8f 91       	pop	r24
 91a:	0f 90       	pop	r0
 91c:	0f be       	out	0x3f, r0	; 63
 91e:	0f 90       	pop	r0
 920:	1f 90       	pop	r1
 922:	18 95       	reti

00000924 <__udivmodsi4>:
 924:	a1 e2       	ldi	r26, 0x21	; 33
 926:	1a 2e       	mov	r1, r26
 928:	aa 1b       	sub	r26, r26
 92a:	bb 1b       	sub	r27, r27
 92c:	fd 01       	movw	r30, r26
 92e:	0d c0       	rjmp	.+26     	; 0x94a <__udivmodsi4_ep>

00000930 <__udivmodsi4_loop>:
 930:	aa 1f       	adc	r26, r26
 932:	bb 1f       	adc	r27, r27
 934:	ee 1f       	adc	r30, r30
 936:	ff 1f       	adc	r31, r31
 938:	a2 17       	cp	r26, r18
 93a:	b3 07       	cpc	r27, r19
 93c:	e4 07       	cpc	r30, r20
 93e:	f5 07       	cpc	r31, r21
 940:	20 f0       	brcs	.+8      	; 0x94a <__udivmodsi4_ep>
 942:	a2 1b       	sub	r26, r18
 944:	b3 0b       	sbc	r27, r19
 946:	e4 0b       	sbc	r30, r20
 948:	f5 0b       	sbc	r31, r21

0000094a <__udivmodsi4_ep>:
 94a:	66 1f       	adc	r22, r22
 94c:	77 1f       	adc	r23, r23
 94e:	88 1f       	adc	r24, r24
 950:	99 1f       	adc	r25, r25
 952:	1a 94       	dec	r1
 954:	69 f7       	brne	.-38     	; 0x930 <__udivmodsi4_loop>
 956:	60 95       	com	r22
 958:	70 95       	com	r23
 95a:	80 95       	com	r24
 95c:	90 95       	com	r25
 95e:	9b 01       	movw	r18, r22
 960:	ac 01       	movw	r20, r24
 962:	bd 01       	movw	r22, r26
 964:	cf 01       	movw	r24, r30
 966:	08 95       	ret

00000968 <__divmodsi4>:
 968:	05 2e       	mov	r0, r21
 96a:	97 fb       	bst	r25, 7
 96c:	1e f4       	brtc	.+6      	; 0x974 <__divmodsi4+0xc>
 96e:	00 94       	com	r0
 970:	0e 94 cb 04 	call	0x996	; 0x996 <__negsi2>
 974:	57 fd       	sbrc	r21, 7
 976:	07 d0       	rcall	.+14     	; 0x986 <__divmodsi4_neg2>
 978:	0e 94 92 04 	call	0x924	; 0x924 <__udivmodsi4>
 97c:	07 fc       	sbrc	r0, 7
 97e:	03 d0       	rcall	.+6      	; 0x986 <__divmodsi4_neg2>
 980:	4e f4       	brtc	.+18     	; 0x994 <__divmodsi4_exit>
 982:	0c 94 cb 04 	jmp	0x996	; 0x996 <__negsi2>

00000986 <__divmodsi4_neg2>:
 986:	50 95       	com	r21
 988:	40 95       	com	r20
 98a:	30 95       	com	r19
 98c:	21 95       	neg	r18
 98e:	3f 4f       	sbci	r19, 0xFF	; 255
 990:	4f 4f       	sbci	r20, 0xFF	; 255
 992:	5f 4f       	sbci	r21, 0xFF	; 255

00000994 <__divmodsi4_exit>:
 994:	08 95       	ret

00000996 <__negsi2>:
 996:	90 95       	com	r25
 998:	80 95       	com	r24
 99a:	70 95       	com	r23
 99c:	61 95       	neg	r22
 99e:	7f 4f       	sbci	r23, 0xFF	; 255
 9a0:	8f 4f       	sbci	r24, 0xFF	; 255
 9a2:	9f 4f       	sbci	r25, 0xFF	; 255
 9a4:	08 95       	ret

000009a6 <sprintf>:
 9a6:	ae e0       	ldi	r26, 0x0E	; 14
 9a8:	b0 e0       	ldi	r27, 0x00	; 0
 9aa:	e9 ed       	ldi	r30, 0xD9	; 217
 9ac:	f4 e0       	ldi	r31, 0x04	; 4
 9ae:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__prologue_saves__+0x1c>
 9b2:	0d 89       	ldd	r16, Y+21	; 0x15
 9b4:	1e 89       	ldd	r17, Y+22	; 0x16
 9b6:	86 e0       	ldi	r24, 0x06	; 6
 9b8:	8c 83       	std	Y+4, r24	; 0x04
 9ba:	1a 83       	std	Y+2, r17	; 0x02
 9bc:	09 83       	std	Y+1, r16	; 0x01
 9be:	8f ef       	ldi	r24, 0xFF	; 255
 9c0:	9f e7       	ldi	r25, 0x7F	; 127
 9c2:	9e 83       	std	Y+6, r25	; 0x06
 9c4:	8d 83       	std	Y+5, r24	; 0x05
 9c6:	ae 01       	movw	r20, r28
 9c8:	47 5e       	subi	r20, 0xE7	; 231
 9ca:	5f 4f       	sbci	r21, 0xFF	; 255
 9cc:	6f 89       	ldd	r22, Y+23	; 0x17
 9ce:	78 8d       	ldd	r23, Y+24	; 0x18
 9d0:	ce 01       	movw	r24, r28
 9d2:	01 96       	adiw	r24, 0x01	; 1
 9d4:	0e 94 f6 04 	call	0x9ec	; 0x9ec <vfprintf>
 9d8:	2f 81       	ldd	r18, Y+7	; 0x07
 9da:	38 85       	ldd	r19, Y+8	; 0x08
 9dc:	f8 01       	movw	r30, r16
 9de:	e2 0f       	add	r30, r18
 9e0:	f3 1f       	adc	r31, r19
 9e2:	10 82       	st	Z, r1
 9e4:	2e 96       	adiw	r28, 0x0e	; 14
 9e6:	e4 e0       	ldi	r30, 0x04	; 4
 9e8:	0c 94 9e 07 	jmp	0xf3c	; 0xf3c <__epilogue_restores__+0x1c>

000009ec <vfprintf>:
 9ec:	ac e0       	ldi	r26, 0x0C	; 12
 9ee:	b0 e0       	ldi	r27, 0x00	; 0
 9f0:	ec ef       	ldi	r30, 0xFC	; 252
 9f2:	f4 e0       	ldi	r31, 0x04	; 4
 9f4:	0c 94 74 07 	jmp	0xee8	; 0xee8 <__prologue_saves__>
 9f8:	7c 01       	movw	r14, r24
 9fa:	6b 01       	movw	r12, r22
 9fc:	8a 01       	movw	r16, r20
 9fe:	fc 01       	movw	r30, r24
 a00:	17 82       	std	Z+7, r1	; 0x07
 a02:	16 82       	std	Z+6, r1	; 0x06
 a04:	83 81       	ldd	r24, Z+3	; 0x03
 a06:	81 ff       	sbrs	r24, 1
 a08:	bd c1       	rjmp	.+890    	; 0xd84 <vfprintf+0x398>
 a0a:	ce 01       	movw	r24, r28
 a0c:	01 96       	adiw	r24, 0x01	; 1
 a0e:	4c 01       	movw	r8, r24
 a10:	f7 01       	movw	r30, r14
 a12:	93 81       	ldd	r25, Z+3	; 0x03
 a14:	f6 01       	movw	r30, r12
 a16:	93 fd       	sbrc	r25, 3
 a18:	85 91       	lpm	r24, Z+
 a1a:	93 ff       	sbrs	r25, 3
 a1c:	81 91       	ld	r24, Z+
 a1e:	6f 01       	movw	r12, r30
 a20:	88 23       	and	r24, r24
 a22:	09 f4       	brne	.+2      	; 0xa26 <vfprintf+0x3a>
 a24:	ab c1       	rjmp	.+854    	; 0xd7c <vfprintf+0x390>
 a26:	85 32       	cpi	r24, 0x25	; 37
 a28:	39 f4       	brne	.+14     	; 0xa38 <vfprintf+0x4c>
 a2a:	93 fd       	sbrc	r25, 3
 a2c:	85 91       	lpm	r24, Z+
 a2e:	93 ff       	sbrs	r25, 3
 a30:	81 91       	ld	r24, Z+
 a32:	6f 01       	movw	r12, r30
 a34:	85 32       	cpi	r24, 0x25	; 37
 a36:	29 f4       	brne	.+10     	; 0xa42 <vfprintf+0x56>
 a38:	b7 01       	movw	r22, r14
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	0e 94 de 06 	call	0xdbc	; 0xdbc <fputc>
 a40:	e7 cf       	rjmp	.-50     	; 0xa10 <vfprintf+0x24>
 a42:	51 2c       	mov	r5, r1
 a44:	31 2c       	mov	r3, r1
 a46:	20 e0       	ldi	r18, 0x00	; 0
 a48:	20 32       	cpi	r18, 0x20	; 32
 a4a:	a0 f4       	brcc	.+40     	; 0xa74 <vfprintf+0x88>
 a4c:	8b 32       	cpi	r24, 0x2B	; 43
 a4e:	69 f0       	breq	.+26     	; 0xa6a <vfprintf+0x7e>
 a50:	30 f4       	brcc	.+12     	; 0xa5e <vfprintf+0x72>
 a52:	80 32       	cpi	r24, 0x20	; 32
 a54:	59 f0       	breq	.+22     	; 0xa6c <vfprintf+0x80>
 a56:	83 32       	cpi	r24, 0x23	; 35
 a58:	69 f4       	brne	.+26     	; 0xa74 <vfprintf+0x88>
 a5a:	20 61       	ori	r18, 0x10	; 16
 a5c:	2c c0       	rjmp	.+88     	; 0xab6 <vfprintf+0xca>
 a5e:	8d 32       	cpi	r24, 0x2D	; 45
 a60:	39 f0       	breq	.+14     	; 0xa70 <vfprintf+0x84>
 a62:	80 33       	cpi	r24, 0x30	; 48
 a64:	39 f4       	brne	.+14     	; 0xa74 <vfprintf+0x88>
 a66:	21 60       	ori	r18, 0x01	; 1
 a68:	26 c0       	rjmp	.+76     	; 0xab6 <vfprintf+0xca>
 a6a:	22 60       	ori	r18, 0x02	; 2
 a6c:	24 60       	ori	r18, 0x04	; 4
 a6e:	23 c0       	rjmp	.+70     	; 0xab6 <vfprintf+0xca>
 a70:	28 60       	ori	r18, 0x08	; 8
 a72:	21 c0       	rjmp	.+66     	; 0xab6 <vfprintf+0xca>
 a74:	27 fd       	sbrc	r18, 7
 a76:	27 c0       	rjmp	.+78     	; 0xac6 <vfprintf+0xda>
 a78:	30 ed       	ldi	r19, 0xD0	; 208
 a7a:	38 0f       	add	r19, r24
 a7c:	3a 30       	cpi	r19, 0x0A	; 10
 a7e:	78 f4       	brcc	.+30     	; 0xa9e <vfprintf+0xb2>
 a80:	26 ff       	sbrs	r18, 6
 a82:	06 c0       	rjmp	.+12     	; 0xa90 <vfprintf+0xa4>
 a84:	fa e0       	ldi	r31, 0x0A	; 10
 a86:	5f 9e       	mul	r5, r31
 a88:	30 0d       	add	r19, r0
 a8a:	11 24       	eor	r1, r1
 a8c:	53 2e       	mov	r5, r19
 a8e:	13 c0       	rjmp	.+38     	; 0xab6 <vfprintf+0xca>
 a90:	8a e0       	ldi	r24, 0x0A	; 10
 a92:	38 9e       	mul	r3, r24
 a94:	30 0d       	add	r19, r0
 a96:	11 24       	eor	r1, r1
 a98:	33 2e       	mov	r3, r19
 a9a:	20 62       	ori	r18, 0x20	; 32
 a9c:	0c c0       	rjmp	.+24     	; 0xab6 <vfprintf+0xca>
 a9e:	8e 32       	cpi	r24, 0x2E	; 46
 aa0:	21 f4       	brne	.+8      	; 0xaaa <vfprintf+0xbe>
 aa2:	26 fd       	sbrc	r18, 6
 aa4:	6b c1       	rjmp	.+726    	; 0xd7c <vfprintf+0x390>
 aa6:	20 64       	ori	r18, 0x40	; 64
 aa8:	06 c0       	rjmp	.+12     	; 0xab6 <vfprintf+0xca>
 aaa:	8c 36       	cpi	r24, 0x6C	; 108
 aac:	11 f4       	brne	.+4      	; 0xab2 <vfprintf+0xc6>
 aae:	20 68       	ori	r18, 0x80	; 128
 ab0:	02 c0       	rjmp	.+4      	; 0xab6 <vfprintf+0xca>
 ab2:	88 36       	cpi	r24, 0x68	; 104
 ab4:	41 f4       	brne	.+16     	; 0xac6 <vfprintf+0xda>
 ab6:	f6 01       	movw	r30, r12
 ab8:	93 fd       	sbrc	r25, 3
 aba:	85 91       	lpm	r24, Z+
 abc:	93 ff       	sbrs	r25, 3
 abe:	81 91       	ld	r24, Z+
 ac0:	6f 01       	movw	r12, r30
 ac2:	81 11       	cpse	r24, r1
 ac4:	c1 cf       	rjmp	.-126    	; 0xa48 <vfprintf+0x5c>
 ac6:	98 2f       	mov	r25, r24
 ac8:	9f 7d       	andi	r25, 0xDF	; 223
 aca:	95 54       	subi	r25, 0x45	; 69
 acc:	93 30       	cpi	r25, 0x03	; 3
 ace:	28 f4       	brcc	.+10     	; 0xada <vfprintf+0xee>
 ad0:	0c 5f       	subi	r16, 0xFC	; 252
 ad2:	1f 4f       	sbci	r17, 0xFF	; 255
 ad4:	ff e3       	ldi	r31, 0x3F	; 63
 ad6:	f9 83       	std	Y+1, r31	; 0x01
 ad8:	0d c0       	rjmp	.+26     	; 0xaf4 <vfprintf+0x108>
 ada:	83 36       	cpi	r24, 0x63	; 99
 adc:	31 f0       	breq	.+12     	; 0xaea <vfprintf+0xfe>
 ade:	83 37       	cpi	r24, 0x73	; 115
 ae0:	71 f0       	breq	.+28     	; 0xafe <vfprintf+0x112>
 ae2:	83 35       	cpi	r24, 0x53	; 83
 ae4:	09 f0       	breq	.+2      	; 0xae8 <vfprintf+0xfc>
 ae6:	5b c0       	rjmp	.+182    	; 0xb9e <vfprintf+0x1b2>
 ae8:	22 c0       	rjmp	.+68     	; 0xb2e <vfprintf+0x142>
 aea:	f8 01       	movw	r30, r16
 aec:	80 81       	ld	r24, Z
 aee:	89 83       	std	Y+1, r24	; 0x01
 af0:	0e 5f       	subi	r16, 0xFE	; 254
 af2:	1f 4f       	sbci	r17, 0xFF	; 255
 af4:	44 24       	eor	r4, r4
 af6:	43 94       	inc	r4
 af8:	51 2c       	mov	r5, r1
 afa:	54 01       	movw	r10, r8
 afc:	15 c0       	rjmp	.+42     	; 0xb28 <vfprintf+0x13c>
 afe:	38 01       	movw	r6, r16
 b00:	f2 e0       	ldi	r31, 0x02	; 2
 b02:	6f 0e       	add	r6, r31
 b04:	71 1c       	adc	r7, r1
 b06:	f8 01       	movw	r30, r16
 b08:	a0 80       	ld	r10, Z
 b0a:	b1 80       	ldd	r11, Z+1	; 0x01
 b0c:	26 ff       	sbrs	r18, 6
 b0e:	03 c0       	rjmp	.+6      	; 0xb16 <vfprintf+0x12a>
 b10:	65 2d       	mov	r22, r5
 b12:	70 e0       	ldi	r23, 0x00	; 0
 b14:	02 c0       	rjmp	.+4      	; 0xb1a <vfprintf+0x12e>
 b16:	6f ef       	ldi	r22, 0xFF	; 255
 b18:	7f ef       	ldi	r23, 0xFF	; 255
 b1a:	c5 01       	movw	r24, r10
 b1c:	2c 87       	std	Y+12, r18	; 0x0c
 b1e:	0e 94 d3 06 	call	0xda6	; 0xda6 <strnlen>
 b22:	2c 01       	movw	r4, r24
 b24:	83 01       	movw	r16, r6
 b26:	2c 85       	ldd	r18, Y+12	; 0x0c
 b28:	2f 77       	andi	r18, 0x7F	; 127
 b2a:	22 2e       	mov	r2, r18
 b2c:	17 c0       	rjmp	.+46     	; 0xb5c <vfprintf+0x170>
 b2e:	38 01       	movw	r6, r16
 b30:	f2 e0       	ldi	r31, 0x02	; 2
 b32:	6f 0e       	add	r6, r31
 b34:	71 1c       	adc	r7, r1
 b36:	f8 01       	movw	r30, r16
 b38:	a0 80       	ld	r10, Z
 b3a:	b1 80       	ldd	r11, Z+1	; 0x01
 b3c:	26 ff       	sbrs	r18, 6
 b3e:	03 c0       	rjmp	.+6      	; 0xb46 <vfprintf+0x15a>
 b40:	65 2d       	mov	r22, r5
 b42:	70 e0       	ldi	r23, 0x00	; 0
 b44:	02 c0       	rjmp	.+4      	; 0xb4a <vfprintf+0x15e>
 b46:	6f ef       	ldi	r22, 0xFF	; 255
 b48:	7f ef       	ldi	r23, 0xFF	; 255
 b4a:	c5 01       	movw	r24, r10
 b4c:	2c 87       	std	Y+12, r18	; 0x0c
 b4e:	0e 94 c8 06 	call	0xd90	; 0xd90 <strnlen_P>
 b52:	2c 01       	movw	r4, r24
 b54:	2c 85       	ldd	r18, Y+12	; 0x0c
 b56:	20 68       	ori	r18, 0x80	; 128
 b58:	22 2e       	mov	r2, r18
 b5a:	83 01       	movw	r16, r6
 b5c:	23 fc       	sbrc	r2, 3
 b5e:	1b c0       	rjmp	.+54     	; 0xb96 <vfprintf+0x1aa>
 b60:	83 2d       	mov	r24, r3
 b62:	90 e0       	ldi	r25, 0x00	; 0
 b64:	48 16       	cp	r4, r24
 b66:	59 06       	cpc	r5, r25
 b68:	b0 f4       	brcc	.+44     	; 0xb96 <vfprintf+0x1aa>
 b6a:	b7 01       	movw	r22, r14
 b6c:	80 e2       	ldi	r24, 0x20	; 32
 b6e:	90 e0       	ldi	r25, 0x00	; 0
 b70:	0e 94 de 06 	call	0xdbc	; 0xdbc <fputc>
 b74:	3a 94       	dec	r3
 b76:	f4 cf       	rjmp	.-24     	; 0xb60 <vfprintf+0x174>
 b78:	f5 01       	movw	r30, r10
 b7a:	27 fc       	sbrc	r2, 7
 b7c:	85 91       	lpm	r24, Z+
 b7e:	27 fe       	sbrs	r2, 7
 b80:	81 91       	ld	r24, Z+
 b82:	5f 01       	movw	r10, r30
 b84:	b7 01       	movw	r22, r14
 b86:	90 e0       	ldi	r25, 0x00	; 0
 b88:	0e 94 de 06 	call	0xdbc	; 0xdbc <fputc>
 b8c:	31 10       	cpse	r3, r1
 b8e:	3a 94       	dec	r3
 b90:	f1 e0       	ldi	r31, 0x01	; 1
 b92:	4f 1a       	sub	r4, r31
 b94:	51 08       	sbc	r5, r1
 b96:	41 14       	cp	r4, r1
 b98:	51 04       	cpc	r5, r1
 b9a:	71 f7       	brne	.-36     	; 0xb78 <vfprintf+0x18c>
 b9c:	e5 c0       	rjmp	.+458    	; 0xd68 <vfprintf+0x37c>
 b9e:	84 36       	cpi	r24, 0x64	; 100
 ba0:	11 f0       	breq	.+4      	; 0xba6 <vfprintf+0x1ba>
 ba2:	89 36       	cpi	r24, 0x69	; 105
 ba4:	39 f5       	brne	.+78     	; 0xbf4 <vfprintf+0x208>
 ba6:	f8 01       	movw	r30, r16
 ba8:	27 ff       	sbrs	r18, 7
 baa:	07 c0       	rjmp	.+14     	; 0xbba <vfprintf+0x1ce>
 bac:	60 81       	ld	r22, Z
 bae:	71 81       	ldd	r23, Z+1	; 0x01
 bb0:	82 81       	ldd	r24, Z+2	; 0x02
 bb2:	93 81       	ldd	r25, Z+3	; 0x03
 bb4:	0c 5f       	subi	r16, 0xFC	; 252
 bb6:	1f 4f       	sbci	r17, 0xFF	; 255
 bb8:	08 c0       	rjmp	.+16     	; 0xbca <vfprintf+0x1de>
 bba:	60 81       	ld	r22, Z
 bbc:	71 81       	ldd	r23, Z+1	; 0x01
 bbe:	07 2e       	mov	r0, r23
 bc0:	00 0c       	add	r0, r0
 bc2:	88 0b       	sbc	r24, r24
 bc4:	99 0b       	sbc	r25, r25
 bc6:	0e 5f       	subi	r16, 0xFE	; 254
 bc8:	1f 4f       	sbci	r17, 0xFF	; 255
 bca:	2f 76       	andi	r18, 0x6F	; 111
 bcc:	72 2e       	mov	r7, r18
 bce:	97 ff       	sbrs	r25, 7
 bd0:	09 c0       	rjmp	.+18     	; 0xbe4 <vfprintf+0x1f8>
 bd2:	90 95       	com	r25
 bd4:	80 95       	com	r24
 bd6:	70 95       	com	r23
 bd8:	61 95       	neg	r22
 bda:	7f 4f       	sbci	r23, 0xFF	; 255
 bdc:	8f 4f       	sbci	r24, 0xFF	; 255
 bde:	9f 4f       	sbci	r25, 0xFF	; 255
 be0:	20 68       	ori	r18, 0x80	; 128
 be2:	72 2e       	mov	r7, r18
 be4:	2a e0       	ldi	r18, 0x0A	; 10
 be6:	30 e0       	ldi	r19, 0x00	; 0
 be8:	a4 01       	movw	r20, r8
 bea:	0e 94 16 07 	call	0xe2c	; 0xe2c <__ultoa_invert>
 bee:	a8 2e       	mov	r10, r24
 bf0:	a8 18       	sub	r10, r8
 bf2:	44 c0       	rjmp	.+136    	; 0xc7c <vfprintf+0x290>
 bf4:	85 37       	cpi	r24, 0x75	; 117
 bf6:	29 f4       	brne	.+10     	; 0xc02 <vfprintf+0x216>
 bf8:	2f 7e       	andi	r18, 0xEF	; 239
 bfa:	b2 2e       	mov	r11, r18
 bfc:	2a e0       	ldi	r18, 0x0A	; 10
 bfe:	30 e0       	ldi	r19, 0x00	; 0
 c00:	25 c0       	rjmp	.+74     	; 0xc4c <vfprintf+0x260>
 c02:	f2 2f       	mov	r31, r18
 c04:	f9 7f       	andi	r31, 0xF9	; 249
 c06:	bf 2e       	mov	r11, r31
 c08:	8f 36       	cpi	r24, 0x6F	; 111
 c0a:	c1 f0       	breq	.+48     	; 0xc3c <vfprintf+0x250>
 c0c:	18 f4       	brcc	.+6      	; 0xc14 <vfprintf+0x228>
 c0e:	88 35       	cpi	r24, 0x58	; 88
 c10:	79 f0       	breq	.+30     	; 0xc30 <vfprintf+0x244>
 c12:	b4 c0       	rjmp	.+360    	; 0xd7c <vfprintf+0x390>
 c14:	80 37       	cpi	r24, 0x70	; 112
 c16:	19 f0       	breq	.+6      	; 0xc1e <vfprintf+0x232>
 c18:	88 37       	cpi	r24, 0x78	; 120
 c1a:	21 f0       	breq	.+8      	; 0xc24 <vfprintf+0x238>
 c1c:	af c0       	rjmp	.+350    	; 0xd7c <vfprintf+0x390>
 c1e:	2f 2f       	mov	r18, r31
 c20:	20 61       	ori	r18, 0x10	; 16
 c22:	b2 2e       	mov	r11, r18
 c24:	b4 fe       	sbrs	r11, 4
 c26:	0d c0       	rjmp	.+26     	; 0xc42 <vfprintf+0x256>
 c28:	8b 2d       	mov	r24, r11
 c2a:	84 60       	ori	r24, 0x04	; 4
 c2c:	b8 2e       	mov	r11, r24
 c2e:	09 c0       	rjmp	.+18     	; 0xc42 <vfprintf+0x256>
 c30:	24 ff       	sbrs	r18, 4
 c32:	0a c0       	rjmp	.+20     	; 0xc48 <vfprintf+0x25c>
 c34:	9f 2f       	mov	r25, r31
 c36:	96 60       	ori	r25, 0x06	; 6
 c38:	b9 2e       	mov	r11, r25
 c3a:	06 c0       	rjmp	.+12     	; 0xc48 <vfprintf+0x25c>
 c3c:	28 e0       	ldi	r18, 0x08	; 8
 c3e:	30 e0       	ldi	r19, 0x00	; 0
 c40:	05 c0       	rjmp	.+10     	; 0xc4c <vfprintf+0x260>
 c42:	20 e1       	ldi	r18, 0x10	; 16
 c44:	30 e0       	ldi	r19, 0x00	; 0
 c46:	02 c0       	rjmp	.+4      	; 0xc4c <vfprintf+0x260>
 c48:	20 e1       	ldi	r18, 0x10	; 16
 c4a:	32 e0       	ldi	r19, 0x02	; 2
 c4c:	f8 01       	movw	r30, r16
 c4e:	b7 fe       	sbrs	r11, 7
 c50:	07 c0       	rjmp	.+14     	; 0xc60 <vfprintf+0x274>
 c52:	60 81       	ld	r22, Z
 c54:	71 81       	ldd	r23, Z+1	; 0x01
 c56:	82 81       	ldd	r24, Z+2	; 0x02
 c58:	93 81       	ldd	r25, Z+3	; 0x03
 c5a:	0c 5f       	subi	r16, 0xFC	; 252
 c5c:	1f 4f       	sbci	r17, 0xFF	; 255
 c5e:	06 c0       	rjmp	.+12     	; 0xc6c <vfprintf+0x280>
 c60:	60 81       	ld	r22, Z
 c62:	71 81       	ldd	r23, Z+1	; 0x01
 c64:	80 e0       	ldi	r24, 0x00	; 0
 c66:	90 e0       	ldi	r25, 0x00	; 0
 c68:	0e 5f       	subi	r16, 0xFE	; 254
 c6a:	1f 4f       	sbci	r17, 0xFF	; 255
 c6c:	a4 01       	movw	r20, r8
 c6e:	0e 94 16 07 	call	0xe2c	; 0xe2c <__ultoa_invert>
 c72:	a8 2e       	mov	r10, r24
 c74:	a8 18       	sub	r10, r8
 c76:	fb 2d       	mov	r31, r11
 c78:	ff 77       	andi	r31, 0x7F	; 127
 c7a:	7f 2e       	mov	r7, r31
 c7c:	76 fe       	sbrs	r7, 6
 c7e:	0b c0       	rjmp	.+22     	; 0xc96 <vfprintf+0x2aa>
 c80:	37 2d       	mov	r19, r7
 c82:	3e 7f       	andi	r19, 0xFE	; 254
 c84:	a5 14       	cp	r10, r5
 c86:	50 f4       	brcc	.+20     	; 0xc9c <vfprintf+0x2b0>
 c88:	74 fe       	sbrs	r7, 4
 c8a:	0a c0       	rjmp	.+20     	; 0xca0 <vfprintf+0x2b4>
 c8c:	72 fc       	sbrc	r7, 2
 c8e:	08 c0       	rjmp	.+16     	; 0xca0 <vfprintf+0x2b4>
 c90:	37 2d       	mov	r19, r7
 c92:	3e 7e       	andi	r19, 0xEE	; 238
 c94:	05 c0       	rjmp	.+10     	; 0xca0 <vfprintf+0x2b4>
 c96:	ba 2c       	mov	r11, r10
 c98:	37 2d       	mov	r19, r7
 c9a:	03 c0       	rjmp	.+6      	; 0xca2 <vfprintf+0x2b6>
 c9c:	ba 2c       	mov	r11, r10
 c9e:	01 c0       	rjmp	.+2      	; 0xca2 <vfprintf+0x2b6>
 ca0:	b5 2c       	mov	r11, r5
 ca2:	34 ff       	sbrs	r19, 4
 ca4:	0d c0       	rjmp	.+26     	; 0xcc0 <vfprintf+0x2d4>
 ca6:	fe 01       	movw	r30, r28
 ca8:	ea 0d       	add	r30, r10
 caa:	f1 1d       	adc	r31, r1
 cac:	80 81       	ld	r24, Z
 cae:	80 33       	cpi	r24, 0x30	; 48
 cb0:	11 f4       	brne	.+4      	; 0xcb6 <vfprintf+0x2ca>
 cb2:	39 7e       	andi	r19, 0xE9	; 233
 cb4:	09 c0       	rjmp	.+18     	; 0xcc8 <vfprintf+0x2dc>
 cb6:	32 ff       	sbrs	r19, 2
 cb8:	06 c0       	rjmp	.+12     	; 0xcc6 <vfprintf+0x2da>
 cba:	b3 94       	inc	r11
 cbc:	b3 94       	inc	r11
 cbe:	04 c0       	rjmp	.+8      	; 0xcc8 <vfprintf+0x2dc>
 cc0:	83 2f       	mov	r24, r19
 cc2:	86 78       	andi	r24, 0x86	; 134
 cc4:	09 f0       	breq	.+2      	; 0xcc8 <vfprintf+0x2dc>
 cc6:	b3 94       	inc	r11
 cc8:	33 fd       	sbrc	r19, 3
 cca:	13 c0       	rjmp	.+38     	; 0xcf2 <vfprintf+0x306>
 ccc:	30 ff       	sbrs	r19, 0
 cce:	06 c0       	rjmp	.+12     	; 0xcdc <vfprintf+0x2f0>
 cd0:	5a 2c       	mov	r5, r10
 cd2:	b3 14       	cp	r11, r3
 cd4:	18 f4       	brcc	.+6      	; 0xcdc <vfprintf+0x2f0>
 cd6:	53 0c       	add	r5, r3
 cd8:	5b 18       	sub	r5, r11
 cda:	b3 2c       	mov	r11, r3
 cdc:	b3 14       	cp	r11, r3
 cde:	68 f4       	brcc	.+26     	; 0xcfa <vfprintf+0x30e>
 ce0:	b7 01       	movw	r22, r14
 ce2:	80 e2       	ldi	r24, 0x20	; 32
 ce4:	90 e0       	ldi	r25, 0x00	; 0
 ce6:	3c 87       	std	Y+12, r19	; 0x0c
 ce8:	0e 94 de 06 	call	0xdbc	; 0xdbc <fputc>
 cec:	b3 94       	inc	r11
 cee:	3c 85       	ldd	r19, Y+12	; 0x0c
 cf0:	f5 cf       	rjmp	.-22     	; 0xcdc <vfprintf+0x2f0>
 cf2:	b3 14       	cp	r11, r3
 cf4:	10 f4       	brcc	.+4      	; 0xcfa <vfprintf+0x30e>
 cf6:	3b 18       	sub	r3, r11
 cf8:	01 c0       	rjmp	.+2      	; 0xcfc <vfprintf+0x310>
 cfa:	31 2c       	mov	r3, r1
 cfc:	34 ff       	sbrs	r19, 4
 cfe:	12 c0       	rjmp	.+36     	; 0xd24 <vfprintf+0x338>
 d00:	b7 01       	movw	r22, r14
 d02:	80 e3       	ldi	r24, 0x30	; 48
 d04:	90 e0       	ldi	r25, 0x00	; 0
 d06:	3c 87       	std	Y+12, r19	; 0x0c
 d08:	0e 94 de 06 	call	0xdbc	; 0xdbc <fputc>
 d0c:	3c 85       	ldd	r19, Y+12	; 0x0c
 d0e:	32 ff       	sbrs	r19, 2
 d10:	17 c0       	rjmp	.+46     	; 0xd40 <vfprintf+0x354>
 d12:	31 fd       	sbrc	r19, 1
 d14:	03 c0       	rjmp	.+6      	; 0xd1c <vfprintf+0x330>
 d16:	88 e7       	ldi	r24, 0x78	; 120
 d18:	90 e0       	ldi	r25, 0x00	; 0
 d1a:	02 c0       	rjmp	.+4      	; 0xd20 <vfprintf+0x334>
 d1c:	88 e5       	ldi	r24, 0x58	; 88
 d1e:	90 e0       	ldi	r25, 0x00	; 0
 d20:	b7 01       	movw	r22, r14
 d22:	0c c0       	rjmp	.+24     	; 0xd3c <vfprintf+0x350>
 d24:	83 2f       	mov	r24, r19
 d26:	86 78       	andi	r24, 0x86	; 134
 d28:	59 f0       	breq	.+22     	; 0xd40 <vfprintf+0x354>
 d2a:	31 ff       	sbrs	r19, 1
 d2c:	02 c0       	rjmp	.+4      	; 0xd32 <vfprintf+0x346>
 d2e:	8b e2       	ldi	r24, 0x2B	; 43
 d30:	01 c0       	rjmp	.+2      	; 0xd34 <vfprintf+0x348>
 d32:	80 e2       	ldi	r24, 0x20	; 32
 d34:	37 fd       	sbrc	r19, 7
 d36:	8d e2       	ldi	r24, 0x2D	; 45
 d38:	b7 01       	movw	r22, r14
 d3a:	90 e0       	ldi	r25, 0x00	; 0
 d3c:	0e 94 de 06 	call	0xdbc	; 0xdbc <fputc>
 d40:	a5 14       	cp	r10, r5
 d42:	38 f4       	brcc	.+14     	; 0xd52 <vfprintf+0x366>
 d44:	b7 01       	movw	r22, r14
 d46:	80 e3       	ldi	r24, 0x30	; 48
 d48:	90 e0       	ldi	r25, 0x00	; 0
 d4a:	0e 94 de 06 	call	0xdbc	; 0xdbc <fputc>
 d4e:	5a 94       	dec	r5
 d50:	f7 cf       	rjmp	.-18     	; 0xd40 <vfprintf+0x354>
 d52:	aa 94       	dec	r10
 d54:	f4 01       	movw	r30, r8
 d56:	ea 0d       	add	r30, r10
 d58:	f1 1d       	adc	r31, r1
 d5a:	80 81       	ld	r24, Z
 d5c:	b7 01       	movw	r22, r14
 d5e:	90 e0       	ldi	r25, 0x00	; 0
 d60:	0e 94 de 06 	call	0xdbc	; 0xdbc <fputc>
 d64:	a1 10       	cpse	r10, r1
 d66:	f5 cf       	rjmp	.-22     	; 0xd52 <vfprintf+0x366>
 d68:	33 20       	and	r3, r3
 d6a:	09 f4       	brne	.+2      	; 0xd6e <vfprintf+0x382>
 d6c:	51 ce       	rjmp	.-862    	; 0xa10 <vfprintf+0x24>
 d6e:	b7 01       	movw	r22, r14
 d70:	80 e2       	ldi	r24, 0x20	; 32
 d72:	90 e0       	ldi	r25, 0x00	; 0
 d74:	0e 94 de 06 	call	0xdbc	; 0xdbc <fputc>
 d78:	3a 94       	dec	r3
 d7a:	f6 cf       	rjmp	.-20     	; 0xd68 <vfprintf+0x37c>
 d7c:	f7 01       	movw	r30, r14
 d7e:	86 81       	ldd	r24, Z+6	; 0x06
 d80:	97 81       	ldd	r25, Z+7	; 0x07
 d82:	02 c0       	rjmp	.+4      	; 0xd88 <vfprintf+0x39c>
 d84:	8f ef       	ldi	r24, 0xFF	; 255
 d86:	9f ef       	ldi	r25, 0xFF	; 255
 d88:	2c 96       	adiw	r28, 0x0c	; 12
 d8a:	e2 e1       	ldi	r30, 0x12	; 18
 d8c:	0c 94 90 07 	jmp	0xf20	; 0xf20 <__epilogue_restores__>

00000d90 <strnlen_P>:
 d90:	fc 01       	movw	r30, r24
 d92:	05 90       	lpm	r0, Z+
 d94:	61 50       	subi	r22, 0x01	; 1
 d96:	70 40       	sbci	r23, 0x00	; 0
 d98:	01 10       	cpse	r0, r1
 d9a:	d8 f7       	brcc	.-10     	; 0xd92 <strnlen_P+0x2>
 d9c:	80 95       	com	r24
 d9e:	90 95       	com	r25
 da0:	8e 0f       	add	r24, r30
 da2:	9f 1f       	adc	r25, r31
 da4:	08 95       	ret

00000da6 <strnlen>:
 da6:	fc 01       	movw	r30, r24
 da8:	61 50       	subi	r22, 0x01	; 1
 daa:	70 40       	sbci	r23, 0x00	; 0
 dac:	01 90       	ld	r0, Z+
 dae:	01 10       	cpse	r0, r1
 db0:	d8 f7       	brcc	.-10     	; 0xda8 <strnlen+0x2>
 db2:	80 95       	com	r24
 db4:	90 95       	com	r25
 db6:	8e 0f       	add	r24, r30
 db8:	9f 1f       	adc	r25, r31
 dba:	08 95       	ret

00000dbc <fputc>:
 dbc:	0f 93       	push	r16
 dbe:	1f 93       	push	r17
 dc0:	cf 93       	push	r28
 dc2:	df 93       	push	r29
 dc4:	fb 01       	movw	r30, r22
 dc6:	23 81       	ldd	r18, Z+3	; 0x03
 dc8:	21 fd       	sbrc	r18, 1
 dca:	03 c0       	rjmp	.+6      	; 0xdd2 <fputc+0x16>
 dcc:	8f ef       	ldi	r24, 0xFF	; 255
 dce:	9f ef       	ldi	r25, 0xFF	; 255
 dd0:	28 c0       	rjmp	.+80     	; 0xe22 <fputc+0x66>
 dd2:	22 ff       	sbrs	r18, 2
 dd4:	16 c0       	rjmp	.+44     	; 0xe02 <fputc+0x46>
 dd6:	46 81       	ldd	r20, Z+6	; 0x06
 dd8:	57 81       	ldd	r21, Z+7	; 0x07
 dda:	24 81       	ldd	r18, Z+4	; 0x04
 ddc:	35 81       	ldd	r19, Z+5	; 0x05
 dde:	42 17       	cp	r20, r18
 de0:	53 07       	cpc	r21, r19
 de2:	44 f4       	brge	.+16     	; 0xdf4 <fputc+0x38>
 de4:	a0 81       	ld	r26, Z
 de6:	b1 81       	ldd	r27, Z+1	; 0x01
 de8:	9d 01       	movw	r18, r26
 dea:	2f 5f       	subi	r18, 0xFF	; 255
 dec:	3f 4f       	sbci	r19, 0xFF	; 255
 dee:	31 83       	std	Z+1, r19	; 0x01
 df0:	20 83       	st	Z, r18
 df2:	8c 93       	st	X, r24
 df4:	26 81       	ldd	r18, Z+6	; 0x06
 df6:	37 81       	ldd	r19, Z+7	; 0x07
 df8:	2f 5f       	subi	r18, 0xFF	; 255
 dfa:	3f 4f       	sbci	r19, 0xFF	; 255
 dfc:	37 83       	std	Z+7, r19	; 0x07
 dfe:	26 83       	std	Z+6, r18	; 0x06
 e00:	10 c0       	rjmp	.+32     	; 0xe22 <fputc+0x66>
 e02:	eb 01       	movw	r28, r22
 e04:	09 2f       	mov	r16, r25
 e06:	18 2f       	mov	r17, r24
 e08:	00 84       	ldd	r0, Z+8	; 0x08
 e0a:	f1 85       	ldd	r31, Z+9	; 0x09
 e0c:	e0 2d       	mov	r30, r0
 e0e:	09 95       	icall
 e10:	89 2b       	or	r24, r25
 e12:	e1 f6       	brne	.-72     	; 0xdcc <fputc+0x10>
 e14:	8e 81       	ldd	r24, Y+6	; 0x06
 e16:	9f 81       	ldd	r25, Y+7	; 0x07
 e18:	01 96       	adiw	r24, 0x01	; 1
 e1a:	9f 83       	std	Y+7, r25	; 0x07
 e1c:	8e 83       	std	Y+6, r24	; 0x06
 e1e:	81 2f       	mov	r24, r17
 e20:	90 2f       	mov	r25, r16
 e22:	df 91       	pop	r29
 e24:	cf 91       	pop	r28
 e26:	1f 91       	pop	r17
 e28:	0f 91       	pop	r16
 e2a:	08 95       	ret

00000e2c <__ultoa_invert>:
 e2c:	fa 01       	movw	r30, r20
 e2e:	aa 27       	eor	r26, r26
 e30:	28 30       	cpi	r18, 0x08	; 8
 e32:	51 f1       	breq	.+84     	; 0xe88 <__ultoa_invert+0x5c>
 e34:	20 31       	cpi	r18, 0x10	; 16
 e36:	81 f1       	breq	.+96     	; 0xe98 <__ultoa_invert+0x6c>
 e38:	e8 94       	clt
 e3a:	6f 93       	push	r22
 e3c:	6e 7f       	andi	r22, 0xFE	; 254
 e3e:	6e 5f       	subi	r22, 0xFE	; 254
 e40:	7f 4f       	sbci	r23, 0xFF	; 255
 e42:	8f 4f       	sbci	r24, 0xFF	; 255
 e44:	9f 4f       	sbci	r25, 0xFF	; 255
 e46:	af 4f       	sbci	r26, 0xFF	; 255
 e48:	b1 e0       	ldi	r27, 0x01	; 1
 e4a:	3e d0       	rcall	.+124    	; 0xec8 <__ultoa_invert+0x9c>
 e4c:	b4 e0       	ldi	r27, 0x04	; 4
 e4e:	3c d0       	rcall	.+120    	; 0xec8 <__ultoa_invert+0x9c>
 e50:	67 0f       	add	r22, r23
 e52:	78 1f       	adc	r23, r24
 e54:	89 1f       	adc	r24, r25
 e56:	9a 1f       	adc	r25, r26
 e58:	a1 1d       	adc	r26, r1
 e5a:	68 0f       	add	r22, r24
 e5c:	79 1f       	adc	r23, r25
 e5e:	8a 1f       	adc	r24, r26
 e60:	91 1d       	adc	r25, r1
 e62:	a1 1d       	adc	r26, r1
 e64:	6a 0f       	add	r22, r26
 e66:	71 1d       	adc	r23, r1
 e68:	81 1d       	adc	r24, r1
 e6a:	91 1d       	adc	r25, r1
 e6c:	a1 1d       	adc	r26, r1
 e6e:	20 d0       	rcall	.+64     	; 0xeb0 <__ultoa_invert+0x84>
 e70:	09 f4       	brne	.+2      	; 0xe74 <__ultoa_invert+0x48>
 e72:	68 94       	set
 e74:	3f 91       	pop	r19
 e76:	2a e0       	ldi	r18, 0x0A	; 10
 e78:	26 9f       	mul	r18, r22
 e7a:	11 24       	eor	r1, r1
 e7c:	30 19       	sub	r19, r0
 e7e:	30 5d       	subi	r19, 0xD0	; 208
 e80:	31 93       	st	Z+, r19
 e82:	de f6       	brtc	.-74     	; 0xe3a <__ultoa_invert+0xe>
 e84:	cf 01       	movw	r24, r30
 e86:	08 95       	ret
 e88:	46 2f       	mov	r20, r22
 e8a:	47 70       	andi	r20, 0x07	; 7
 e8c:	40 5d       	subi	r20, 0xD0	; 208
 e8e:	41 93       	st	Z+, r20
 e90:	b3 e0       	ldi	r27, 0x03	; 3
 e92:	0f d0       	rcall	.+30     	; 0xeb2 <__ultoa_invert+0x86>
 e94:	c9 f7       	brne	.-14     	; 0xe88 <__ultoa_invert+0x5c>
 e96:	f6 cf       	rjmp	.-20     	; 0xe84 <__ultoa_invert+0x58>
 e98:	46 2f       	mov	r20, r22
 e9a:	4f 70       	andi	r20, 0x0F	; 15
 e9c:	40 5d       	subi	r20, 0xD0	; 208
 e9e:	4a 33       	cpi	r20, 0x3A	; 58
 ea0:	18 f0       	brcs	.+6      	; 0xea8 <__ultoa_invert+0x7c>
 ea2:	49 5d       	subi	r20, 0xD9	; 217
 ea4:	31 fd       	sbrc	r19, 1
 ea6:	40 52       	subi	r20, 0x20	; 32
 ea8:	41 93       	st	Z+, r20
 eaa:	02 d0       	rcall	.+4      	; 0xeb0 <__ultoa_invert+0x84>
 eac:	a9 f7       	brne	.-22     	; 0xe98 <__ultoa_invert+0x6c>
 eae:	ea cf       	rjmp	.-44     	; 0xe84 <__ultoa_invert+0x58>
 eb0:	b4 e0       	ldi	r27, 0x04	; 4
 eb2:	a6 95       	lsr	r26
 eb4:	97 95       	ror	r25
 eb6:	87 95       	ror	r24
 eb8:	77 95       	ror	r23
 eba:	67 95       	ror	r22
 ebc:	ba 95       	dec	r27
 ebe:	c9 f7       	brne	.-14     	; 0xeb2 <__ultoa_invert+0x86>
 ec0:	00 97       	sbiw	r24, 0x00	; 0
 ec2:	61 05       	cpc	r22, r1
 ec4:	71 05       	cpc	r23, r1
 ec6:	08 95       	ret
 ec8:	9b 01       	movw	r18, r22
 eca:	ac 01       	movw	r20, r24
 ecc:	0a 2e       	mov	r0, r26
 ece:	06 94       	lsr	r0
 ed0:	57 95       	ror	r21
 ed2:	47 95       	ror	r20
 ed4:	37 95       	ror	r19
 ed6:	27 95       	ror	r18
 ed8:	ba 95       	dec	r27
 eda:	c9 f7       	brne	.-14     	; 0xece <__ultoa_invert+0xa2>
 edc:	62 0f       	add	r22, r18
 ede:	73 1f       	adc	r23, r19
 ee0:	84 1f       	adc	r24, r20
 ee2:	95 1f       	adc	r25, r21
 ee4:	a0 1d       	adc	r26, r0
 ee6:	08 95       	ret

00000ee8 <__prologue_saves__>:
 ee8:	2f 92       	push	r2
 eea:	3f 92       	push	r3
 eec:	4f 92       	push	r4
 eee:	5f 92       	push	r5
 ef0:	6f 92       	push	r6
 ef2:	7f 92       	push	r7
 ef4:	8f 92       	push	r8
 ef6:	9f 92       	push	r9
 ef8:	af 92       	push	r10
 efa:	bf 92       	push	r11
 efc:	cf 92       	push	r12
 efe:	df 92       	push	r13
 f00:	ef 92       	push	r14
 f02:	ff 92       	push	r15
 f04:	0f 93       	push	r16
 f06:	1f 93       	push	r17
 f08:	cf 93       	push	r28
 f0a:	df 93       	push	r29
 f0c:	cd b7       	in	r28, 0x3d	; 61
 f0e:	de b7       	in	r29, 0x3e	; 62
 f10:	ca 1b       	sub	r28, r26
 f12:	db 0b       	sbc	r29, r27
 f14:	0f b6       	in	r0, 0x3f	; 63
 f16:	f8 94       	cli
 f18:	de bf       	out	0x3e, r29	; 62
 f1a:	0f be       	out	0x3f, r0	; 63
 f1c:	cd bf       	out	0x3d, r28	; 61
 f1e:	09 94       	ijmp

00000f20 <__epilogue_restores__>:
 f20:	2a 88       	ldd	r2, Y+18	; 0x12
 f22:	39 88       	ldd	r3, Y+17	; 0x11
 f24:	48 88       	ldd	r4, Y+16	; 0x10
 f26:	5f 84       	ldd	r5, Y+15	; 0x0f
 f28:	6e 84       	ldd	r6, Y+14	; 0x0e
 f2a:	7d 84       	ldd	r7, Y+13	; 0x0d
 f2c:	8c 84       	ldd	r8, Y+12	; 0x0c
 f2e:	9b 84       	ldd	r9, Y+11	; 0x0b
 f30:	aa 84       	ldd	r10, Y+10	; 0x0a
 f32:	b9 84       	ldd	r11, Y+9	; 0x09
 f34:	c8 84       	ldd	r12, Y+8	; 0x08
 f36:	df 80       	ldd	r13, Y+7	; 0x07
 f38:	ee 80       	ldd	r14, Y+6	; 0x06
 f3a:	fd 80       	ldd	r15, Y+5	; 0x05
 f3c:	0c 81       	ldd	r16, Y+4	; 0x04
 f3e:	1b 81       	ldd	r17, Y+3	; 0x03
 f40:	aa 81       	ldd	r26, Y+2	; 0x02
 f42:	b9 81       	ldd	r27, Y+1	; 0x01
 f44:	ce 0f       	add	r28, r30
 f46:	d1 1d       	adc	r29, r1
 f48:	0f b6       	in	r0, 0x3f	; 63
 f4a:	f8 94       	cli
 f4c:	de bf       	out	0x3e, r29	; 62
 f4e:	0f be       	out	0x3f, r0	; 63
 f50:	cd bf       	out	0x3d, r28	; 61
 f52:	ed 01       	movw	r28, r26
 f54:	08 95       	ret

00000f56 <_exit>:
 f56:	f8 94       	cli

00000f58 <__stop_program>:
 f58:	ff cf       	rjmp	.-2      	; 0xf58 <__stop_program>
