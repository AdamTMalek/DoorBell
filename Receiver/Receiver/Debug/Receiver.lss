
Receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000108  00800100  00000e6e  00000f02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000f1  00800208  00800208  0000100a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000100a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001068  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000010a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000155d  00000000  00000000  000011f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000840  00000000  00000000  00002755  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d5c  00000000  00000000  00002f95  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000364  00000000  00000000  00003cf4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000503  00000000  00000000  00004058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000adb  00000000  00000000  0000455b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00005036  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 7a 02 	jmp	0x4f4	; 0x4f4 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 a9 01 	jmp	0x352	; 0x352 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 b3 03 	jmp	0x766	; 0x766 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e6       	ldi	r30, 0x6E	; 110
  7c:	fe e0       	ldi	r31, 0x0E	; 14
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 3f       	cpi	r26, 0xF9	; 249
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 39 01 	call	0x272	; 0x272 <main>
  9e:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ESP_AT>:
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
	ESP_Response.ERROR = 0;
	ESP_Response.INPUT = 0;
  a6:	88 e3       	ldi	r24, 0x38	; 56
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	0e 94 a4 03 	call	0x748	; 0x748 <UART_SendString>
  ae:	08 95       	ret

000000b0 <WaitForResponse>:
}
void WaitForResponse(void)
{
	while(ESP_Response.OK == 0 &&
  b0:	e9 e0       	ldi	r30, 0x09	; 9
  b2:	f2 e0       	ldi	r31, 0x02	; 2
  b4:	80 81       	ld	r24, Z
  b6:	81 11       	cpse	r24, r1
  b8:	06 c0       	rjmp	.+12     	; 0xc6 <WaitForResponse+0x16>
		  ESP_Response.ERROR == 0 &&
  ba:	81 81       	ldd	r24, Z+1	; 0x01
	ESP_Response.ERROR = 0;
	ESP_Response.INPUT = 0;
}
void WaitForResponse(void)
{
	while(ESP_Response.OK == 0 &&
  bc:	81 11       	cpse	r24, r1
  be:	03 c0       	rjmp	.+6      	; 0xc6 <WaitForResponse+0x16>
		  ESP_Response.ERROR == 0 &&
		  ESP_Response.INPUT == 0);
  c0:	82 81       	ldd	r24, Z+2	; 0x02
	ESP_Response.INPUT = 0;
}
void WaitForResponse(void)
{
	while(ESP_Response.OK == 0 &&
		  ESP_Response.ERROR == 0 &&
  c2:	88 23       	and	r24, r24
  c4:	b9 f3       	breq	.-18     	; 0xb4 <WaitForResponse+0x4>
  c6:	08 95       	ret

000000c8 <ESP_Initialize>:

/************************************************************************/
/*                        INITIALIZATION                                */
/************************************************************************/
uint8_t ESP_Initialize(void)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
  cc:	c9 e0       	ldi	r28, 0x09	; 9
  ce:	d2 e0       	ldi	r29, 0x02	; 2
  d0:	18 82       	st	Y, r1
	ESP_Response.ERROR = 0;
  d2:	19 82       	std	Y+1, r1	; 0x01
	ESP_Response.INPUT = 0;
  d4:	1a 82       	std	Y+2, r1	; 0x02
/************************************************************************/
uint8_t ESP_Initialize(void)
{
	/*--- Checking communication between microcontroller and ESP ---*/
	ResetResponse();
	ESP_AT();
  d6:	0e 94 53 00 	call	0xa6	; 0xa6 <ESP_AT>
	WaitForResponse();
  da:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
  de:	18 82       	st	Y, r1
	ESP_Response.ERROR = 0;
  e0:	19 82       	std	Y+1, r1	; 0x01
	ESP_Response.INPUT = 0;
  e2:	1a 82       	std	Y+2, r1	; 0x02

	/*--- ECHO ---*/
#if ESP_ECHO == 0
	UART_SendString("ATE0\r\n");
#else
	UART_SendString("ATE1\r\n");
  e4:	86 e4       	ldi	r24, 0x46	; 70
  e6:	91 e0       	ldi	r25, 0x01	; 1
  e8:	0e 94 a4 03 	call	0x748	; 0x748 <UART_SendString>
#endif
	WaitForResponse();
  ec:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
  f0:	18 82       	st	Y, r1
	ESP_Response.ERROR = 0;
  f2:	19 82       	std	Y+1, r1	; 0x01
	ESP_Response.INPUT = 0;
  f4:	1a 82       	std	Y+2, r1	; 0x02
#endif
	WaitForResponse();
	ResetResponse();

#if ESP_DHCP == 1
	UART_SendString("AT+CWDHCP=2,1\r\n");
  f6:	8d e4       	ldi	r24, 0x4D	; 77
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	0e 94 a4 03 	call	0x748	; 0x748 <UART_SendString>
#else
	UART_SendString("AT+CWDHCP=2,0\r\n");
#endif
	WaitForResponse();
  fe:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
 102:	18 82       	st	Y, r1
	ESP_Response.ERROR = 0;
 104:	19 82       	std	Y+1, r1	; 0x01
	ESP_Response.INPUT = 0;
 106:	1a 82       	std	Y+2, r1	; 0x02
	WaitForResponse();
	ResetResponse();

	/*--- MODE ---*/
#if ESP_WIFIMODE == 1
	UART_SendString("AT+CWMODE=1\r\n"); //STATION MODE
 108:	8d e5       	ldi	r24, 0x5D	; 93
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	0e 94 a4 03 	call	0x748	; 0x748 <UART_SendString>
#elif ESP_WIFIMODE == 2
	UART_SendString("AT+CWMODE=2\r\n"); //ACCESS POINT MODE
#elif ESP_WIFIMODE == 3
	UART_SendString("AT+CWMODE=3\r\n"); //STATON + ACCESS POINT MODE
#endif
	WaitForResponse();
 110:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
 114:	18 82       	st	Y, r1
	ESP_Response.ERROR = 0;
 116:	19 82       	std	Y+1, r1	; 0x01
	ESP_Response.INPUT = 0;
 118:	1a 82       	std	Y+2, r1	; 0x02

	/*--- CONNECTING TO WIFI ---*/
#if ESP_WIFIMODE == 1 || ESP_WIFIMODE  == 3
#ifdef ESP_APNAME
#ifdef ESP_APPASSWORD
	ESP_Response.ERROR = 0;
 11a:	19 82       	std	Y+1, r1	; 0x01
	
	UART_SendString("AT+CWJAP=\"");
 11c:	8b e6       	ldi	r24, 0x6B	; 107
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 a4 03 	call	0x748	; 0x748 <UART_SendString>
	UART_SendString(ESP_APNAME);
 124:	86 e7       	ldi	r24, 0x76	; 118
 126:	91 e0       	ldi	r25, 0x01	; 1
 128:	0e 94 a4 03 	call	0x748	; 0x748 <UART_SendString>
	UART_SendString("\",\"");
 12c:	8f ea       	ldi	r24, 0xAF	; 175
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	0e 94 a4 03 	call	0x748	; 0x748 <UART_SendString>
	UART_SendString(ESP_APPASSWORD);
 134:	82 e8       	ldi	r24, 0x82	; 130
 136:	91 e0       	ldi	r25, 0x01	; 1
 138:	0e 94 a4 03 	call	0x748	; 0x748 <UART_SendString>
	UART_SendString("\"\r\n");
 13c:	8d e8       	ldi	r24, 0x8D	; 141
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	0e 94 a4 03 	call	0x748	; 0x748 <UART_SendString>
	WaitForResponse();
 144:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	if(ESP_Response.ERROR == 1)
 148:	89 81       	ldd	r24, Y+1	; 0x01
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	21 f4       	brne	.+8      	; 0x156 <ESP_Initialize+0x8e>
	{
		ESP_Response.ERROR = 0;
 14e:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <ESP_Response+0x1>
		return 2;
 152:	82 e0       	ldi	r24, 0x02	; 2
 154:	26 c0       	rjmp	.+76     	; 0x1a2 <ESP_Initialize+0xda>
	}
	else
	{
		ESP_Response.OK = 0;
 156:	c9 e0       	ldi	r28, 0x09	; 9
 158:	d2 e0       	ldi	r29, 0x02	; 2
 15a:	18 82       	st	Y, r1
	ResetResponse();
	#endif

#endif /* ESP_WIFIMODE == 2 || ESP_WIFIMODE == 3 */
#if ESP_CONNECTIONTYPE == 1 //UDP
	UART_SendString("AT+CIPMUX=0\r\n");
 15c:	81 e9       	ldi	r24, 0x91	; 145
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	0e 94 a4 03 	call	0x748	; 0x748 <UART_SendString>
	WaitForResponse();
 164:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
 168:	18 82       	st	Y, r1
	ESP_Response.ERROR = 0;
 16a:	19 82       	std	Y+1, r1	; 0x01
	ESP_Response.INPUT = 0;
 16c:	1a 82       	std	Y+2, r1	; 0x02
#endif /* ESP_WIFIMODE == 2 || ESP_WIFIMODE == 3 */
#if ESP_CONNECTIONTYPE == 1 //UDP
	UART_SendString("AT+CIPMUX=0\r\n");
	WaitForResponse();
	ResetResponse();
	UART_SendString("AT+CIPSTART=\"UDP\",\"");
 16e:	8f e9       	ldi	r24, 0x9F	; 159
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	0e 94 a4 03 	call	0x748	; 0x748 <UART_SendString>
	UART_SendString(ESP_IP);
 176:	83 eb       	ldi	r24, 0xB3	; 179
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	0e 94 a4 03 	call	0x748	; 0x748 <UART_SendString>
	UART_SendString("\",");
 17e:	81 ec       	ldi	r24, 0xC1	; 193
 180:	91 e0       	ldi	r25, 0x01	; 1
 182:	0e 94 a4 03 	call	0x748	; 0x748 <UART_SendString>
	UART_SendString(ESP_PORT);
 186:	84 ec       	ldi	r24, 0xC4	; 196
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	0e 94 a4 03 	call	0x748	; 0x748 <UART_SendString>
	UART_SendString("\r\n");
 18e:	8e e8       	ldi	r24, 0x8E	; 142
 190:	91 e0       	ldi	r25, 0x01	; 1
 192:	0e 94 a4 03 	call	0x748	; 0x748 <UART_SendString>
	WaitForResponse();
 196:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
 19a:	18 82       	st	Y, r1
	ESP_Response.ERROR = 0;
 19c:	19 82       	std	Y+1, r1	; 0x01
	ESP_Response.INPUT = 0;
 19e:	1a 82       	std	Y+2, r1	; 0x02
#else
	UART_SendString("AT+CIPDINFO=1\r\n");
	WaitForResponse();
	ResetResponse();
#endif
	return 0;
 1a0:	80 e0       	ldi	r24, 0x00	; 0
}
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	08 95       	ret

000001a8 <ESP_Send>:
}
/************************************************************************/
/*                               SENDING                                */
/************************************************************************/
uint8_t ESP_Send(char* data, char* connectionID)
{
 1a8:	ef 92       	push	r14
 1aa:	ff 92       	push	r15
 1ac:	0f 93       	push	r16
 1ae:	1f 93       	push	r17
 1b0:	cf 93       	push	r28
 1b2:	df 93       	push	r29
 1b4:	00 d0       	rcall	.+0      	; 0x1b6 <ESP_Send+0xe>
 1b6:	00 d0       	rcall	.+0      	; 0x1b8 <ESP_Send+0x10>
 1b8:	cd b7       	in	r28, 0x3d	; 61
 1ba:	de b7       	in	r29, 0x3e	; 62
 1bc:	8c 01       	movw	r16, r24
#if ESP_CONNECTIONTYPE == 2
	if(ESP_Connections == 0) //If there are no connections...
		return 1; //Return 1 - error
#endif
	//Length of data
	uint16_t size = strlen(data);
 1be:	fc 01       	movw	r30, r24
 1c0:	01 90       	ld	r0, Z+
 1c2:	00 20       	and	r0, r0
 1c4:	e9 f7       	brne	.-6      	; 0x1c0 <ESP_Send+0x18>
 1c6:	31 97       	sbiw	r30, 0x01	; 1
 1c8:	e8 1b       	sub	r30, r24
 1ca:	f9 0b       	sbc	r31, r25
	char length[4];
	sprintf(length, "%d", size);
 1cc:	ff 93       	push	r31
 1ce:	ef 93       	push	r30
 1d0:	89 ec       	ldi	r24, 0xC9	; 201
 1d2:	91 e0       	ldi	r25, 0x01	; 1
 1d4:	9f 93       	push	r25
 1d6:	8f 93       	push	r24
 1d8:	ce 01       	movw	r24, r28
 1da:	01 96       	adiw	r24, 0x01	; 1
 1dc:	7c 01       	movw	r14, r24
 1de:	9f 93       	push	r25
 1e0:	8f 93       	push	r24
 1e2:	0e 94 5d 04 	call	0x8ba	; 0x8ba <sprintf>

	UART_SendString("AT+CIPSEND=");
 1e6:	8c ec       	ldi	r24, 0xCC	; 204
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	0e 94 a4 03 	call	0x748	; 0x748 <UART_SendString>
#if ESP_CONNECTIONTYPE == 2
	UART_SendString(connectionID);
	UART_SendString(",");
#endif
	UART_SendString(length);
 1ee:	c7 01       	movw	r24, r14
 1f0:	0e 94 a4 03 	call	0x748	; 0x748 <UART_SendString>
	UART_SendString("\r\n");
 1f4:	8e e8       	ldi	r24, 0x8E	; 142
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	0e 94 a4 03 	call	0x748	; 0x748 <UART_SendString>
	while(!ESP_Response.INPUT && !ESP_Response.ERROR);
 1fc:	0f 90       	pop	r0
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	0f 90       	pop	r0
 204:	0f 90       	pop	r0
 206:	0f 90       	pop	r0
 208:	e9 e0       	ldi	r30, 0x09	; 9
 20a:	f2 e0       	ldi	r31, 0x02	; 2
 20c:	92 81       	ldd	r25, Z+2	; 0x02
 20e:	91 11       	cpse	r25, r1
 210:	03 c0       	rjmp	.+6      	; 0x218 <ESP_Send+0x70>
 212:	91 81       	ldd	r25, Z+1	; 0x01
 214:	99 23       	and	r25, r25
 216:	d1 f3       	breq	.-12     	; 0x20c <ESP_Send+0x64>
	if(ESP_Response.INPUT == 1)
 218:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <ESP_Response+0x2>
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	21 f4       	brne	.+8      	; 0x228 <ESP_Send+0x80>
	{
		UART_SendString(data);
 220:	c8 01       	movw	r24, r16
 222:	0e 94 a4 03 	call	0x748	; 0x748 <UART_SendString>
 226:	08 c0       	rjmp	.+16     	; 0x238 <ESP_Send+0x90>
	}
	else if(ESP_Response.ERROR) 
 228:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <ESP_Response+0x1>
 22c:	88 23       	and	r24, r24
 22e:	21 f0       	breq	.+8      	; 0x238 <ESP_Send+0x90>
	{
		ESP_Response.ERROR = 0;
 230:	10 92 0a 02 	sts	0x020A, r1	; 0x80020a <ESP_Response+0x1>
		return 1;
 234:	81 e0       	ldi	r24, 0x01	; 1
 236:	06 c0       	rjmp	.+12     	; 0x244 <ESP_Send+0x9c>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
 238:	e9 e0       	ldi	r30, 0x09	; 9
 23a:	f2 e0       	ldi	r31, 0x02	; 2
 23c:	10 82       	st	Z, r1
	ESP_Response.ERROR = 0;
 23e:	11 82       	std	Z+1, r1	; 0x01
	ESP_Response.INPUT = 0;
 240:	12 82       	std	Z+2, r1	; 0x02
#if ESP_CONNECTIONTYPE == 2
	UART_SendString("AT+CIPCLOSE=0\r\n");
	WaitForResponse();
#endif
	ResetResponse();
	return 0;
 242:	80 e0       	ldi	r24, 0x00	; 0
}
 244:	0f 90       	pop	r0
 246:	0f 90       	pop	r0
 248:	0f 90       	pop	r0
 24a:	0f 90       	pop	r0
 24c:	df 91       	pop	r29
 24e:	cf 91       	pop	r28
 250:	1f 91       	pop	r17
 252:	0f 91       	pop	r16
 254:	ff 90       	pop	r15
 256:	ef 90       	pop	r14
 258:	08 95       	ret

0000025a <RingBell>:
#endif
	}
}
void RingBell(void)
{
	PORTB |= (1<<BELL);
 25a:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 25c:	2f ef       	ldi	r18, 0xFF	; 255
 25e:	8f ef       	ldi	r24, 0xFF	; 255
 260:	9c e2       	ldi	r25, 0x2C	; 44
 262:	21 50       	subi	r18, 0x01	; 1
 264:	80 40       	sbci	r24, 0x00	; 0
 266:	90 40       	sbci	r25, 0x00	; 0
 268:	e1 f7       	brne	.-8      	; 0x262 <RingBell+0x8>
 26a:	00 c0       	rjmp	.+0      	; 0x26c <RingBell+0x12>
 26c:	00 00       	nop
	_delay_ms(1000);
	PORTB &= ~(1<<BELL);
 26e:	29 98       	cbi	0x05, 1	; 5
 270:	08 95       	ret

00000272 <main>:
 272:	2f ef       	ldi	r18, 0xFF	; 255
 274:	8f ef       	ldi	r24, 0xFF	; 255
 276:	9c e2       	ldi	r25, 0x2C	; 44
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	80 40       	sbci	r24, 0x00	; 0
 27c:	90 40       	sbci	r25, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <main+0x6>
 280:	00 c0       	rjmp	.+0      	; 0x282 <main+0x10>
 282:	00 00       	nop
void RingBell(void);
int main(void)
{
	_delay_ms(1000); //Waiting until ESP is ready

	DDRB |= (1<<BELL);
 284:	21 9a       	sbi	0x04, 1	; 4

	// --- TIMER --- //
	TCCR1B = (1<<CS12) | (1<<CS10); // clk/1024 prescaler
 286:	85 e0       	ldi	r24, 0x05	; 5
 288:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 = (1<<TOIE1); //Overflow interrupt enable
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

	// --- RF12 --- //
	RF_Initialize();
 292:	0e 94 ba 01 	call	0x374	; 0x374 <RF_Initialize>
	RF_SetRange(RANGE_433MHZ);
 296:	80 e1       	ldi	r24, 0x10	; 16
 298:	0e 94 15 02 	call	0x42a	; 0x42a <RF_SetRange>
	RF_SetFrequency(RFFREQ433(432.74));
 29c:	88 ee       	ldi	r24, 0xE8	; 232
 29e:	93 e0       	ldi	r25, 0x03	; 3
 2a0:	0e 94 32 02 	call	0x464	; 0x464 <RF_SetFrequency>
	RF_SetBaudRate(9600);
 2a4:	80 e8       	ldi	r24, 0x80	; 128
 2a6:	95 e2       	ldi	r25, 0x25	; 37
 2a8:	0e 94 42 02 	call	0x484	; 0x484 <RF_SetBaudRate>
	RF_SetBandwith(RxBW200, LNA_6, RSSI_79);
 2ac:	44 e0       	ldi	r20, 0x04	; 4
 2ae:	61 e0       	ldi	r22, 0x01	; 1
 2b0:	84 e0       	ldi	r24, 0x04	; 4
 2b2:	0e 94 1b 02 	call	0x436	; 0x436 <RF_SetBandwith>
	RF_SetPower(PWRdB_0, TxBW120);
 2b6:	67 e0       	ldi	r22, 0x07	; 7
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	0e 94 6d 02 	call	0x4da	; 0x4da <RF_SetPower>
	RF_DisableWakeUpTimer();
 2be:	0e 94 68 02 	call	0x4d0	; 0x4d0 <RF_DisableWakeUpTimer>
	RF_Transmit(0x0000);
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <RF_Transmit>
	RF_Transmit(0xCC77);
 2ca:	87 e7       	ldi	r24, 0x77	; 119
 2cc:	9c ec       	ldi	r25, 0xCC	; 204
 2ce:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <RF_Transmit>
	uint8_t ret = 0;

	sei();
 2d2:	78 94       	sei

	// --- UART --- //
	UART_Initlialise(UBRR);
 2d4:	87 e0       	ldi	r24, 0x07	; 7
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 91 03 	call	0x722	; 0x722 <UART_Initlialise>
	ESP_Initialize();
 2dc:	0e 94 64 00 	call	0xc8	; 0xc8 <ESP_Initialize>

	// --- SLEEP AND POWER MANAGEMENT --- //
	PRR = (1<<PRTWI) | (1<<PRTIM2) | (1<<PRADC);
 2e0:	81 ec       	ldi	r24, 0xC1	; 193
 2e2:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>

	ESP_Send(conntestMsg,0);
 2e6:	60 e0       	ldi	r22, 0x00	; 0
 2e8:	70 e0       	ldi	r23, 0x00	; 0
 2ea:	80 e0       	ldi	r24, 0x00	; 0
 2ec:	91 e0       	ldi	r25, 0x01	; 1
 2ee:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <ESP_Send>
	while (1)
	{
		if(connCounter >= 13) //Approximately a minute
 2f2:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <connCounter>
 2f6:	8d 30       	cpi	r24, 0x0D	; 13
 2f8:	40 f0       	brcs	.+16     	; 0x30a <main+0x98>
		{
			ESP_Send(conntestMsg,0);
 2fa:	60 e0       	ldi	r22, 0x00	; 0
 2fc:	70 e0       	ldi	r23, 0x00	; 0
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	91 e0       	ldi	r25, 0x01	; 1
 302:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <ESP_Send>
			connCounter = 0;
 306:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <connCounter>
		}

	// --- RF12 RECEIVING DATA --- //
#if RF_UseIRQ == 1
	if(!(RF_status.status & 0x07))
 30a:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <RF_status>
 30e:	87 70       	andi	r24, 0x07	; 7
 310:	11 f4       	brne	.+4      	; 0x316 <main+0xa4>
	{
		RF_RxStart();
 312:	0e 94 00 03 	call	0x600	; 0x600 <RF_RxStart>
	}
	if(RF_status.New)
 316:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <RF_status>
 31a:	82 ff       	sbrs	r24, 2
 31c:	ea cf       	rjmp	.-44     	; 0x2f2 <main+0x80>
	{
		ret = RF_RxFinish(data);
 31e:	8e e0       	ldi	r24, 0x0E	; 14
 320:	92 e0       	ldi	r25, 0x02	; 2
 322:	0e 94 27 03 	call	0x64e	; 0x64e <RF_RxFinish>

		if(data > 0 && ret < 254)
 326:	8e 3f       	cpi	r24, 0xFE	; 254
 328:	58 f4       	brcc	.+22     	; 0x340 <main+0xce>
		{
			RingBell();
 32a:	0e 94 2d 01 	call	0x25a	; 0x25a <RingBell>
			ESP_Send(data,0);
 32e:	60 e0       	ldi	r22, 0x00	; 0
 330:	70 e0       	ldi	r23, 0x00	; 0
 332:	8e e0       	ldi	r24, 0x0E	; 14
 334:	92 e0       	ldi	r25, 0x02	; 2
 336:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <ESP_Send>
			data[16] = 0;
 33a:	10 92 1e 02 	sts	0x021E, r1	; 0x80021e <data+0x10>
 33e:	d9 cf       	rjmp	.-78     	; 0x2f2 <main+0x80>
		}
		else if(!ret)
 340:	81 11       	cpse	r24, r1
 342:	d7 cf       	rjmp	.-82     	; 0x2f2 <main+0x80>
		{
			ESP_Send(crcErrorMsg, 0);
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	70 e0       	ldi	r23, 0x00	; 0
 348:	89 e0       	ldi	r24, 0x09	; 9
 34a:	91 e0       	ldi	r25, 0x01	; 1
 34c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <ESP_Send>
 350:	d0 cf       	rjmp	.-96     	; 0x2f2 <main+0x80>

00000352 <__vector_13>:
	_delay_ms(1000);
	PORTB &= ~(1<<BELL);
}
// --- "ALIVE" LED INTERRUPT --- //
ISR(TIMER1_OVF_vect) //4.5s on 14MHz clock
{
 352:	1f 92       	push	r1
 354:	0f 92       	push	r0
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	0f 92       	push	r0
 35a:	11 24       	eor	r1, r1
 35c:	8f 93       	push	r24
	connCounter++;	
 35e:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <connCounter>
 362:	8f 5f       	subi	r24, 0xFF	; 255
 364:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <connCounter>
 368:	8f 91       	pop	r24
 36a:	0f 90       	pop	r0
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	0f 90       	pop	r0
 370:	1f 90       	pop	r1
 372:	18 95       	reti

00000374 <RF_Initialize>:
//-------------------------INITIALIZATION-------------------------------//
void RF_Initialize(void)
{
	//	INTIALZATION OF PINS
	
	RF_DDR |= (1<<SDI) | (1<<SCK) | (1<<CS);
 374:	84 b1       	in	r24, 0x04	; 4
 376:	8c 62       	ori	r24, 0x2C	; 44
 378:	84 b9       	out	0x04, r24	; 4
	RF_DDR &= ~(1<<SDO);
 37a:	24 98       	cbi	0x04, 4	; 4
	
	RF_PORT |= (1<<CS);
 37c:	2a 9a       	sbi	0x05, 2	; 5
	//SPCR = (1<<SPE) | (1<<MSTR); //SCK - Fosc/128

#if RF_UseIRQ == 1
	RF_PORT |= (1<<SDO);
 37e:	2c 9a       	sbi	0x05, 4	; 5
 380:	2f ef       	ldi	r18, 0xFF	; 255
 382:	8f e7       	ldi	r24, 0x7F	; 127
 384:	94 e0       	ldi	r25, 0x04	; 4
 386:	21 50       	subi	r18, 0x01	; 1
 388:	80 40       	sbci	r24, 0x00	; 0
 38a:	90 40       	sbci	r25, 0x00	; 0
 38c:	e1 f7       	brne	.-8      	; 0x386 <RF_Initialize+0x12>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <RF_Initialize+0x1c>
 390:	00 00       	nop
#endif

	_delay_ms(100); //WAITING FOR MODULE TO RESET

#if RF_UseIRQ == 1
	RF_status.Rx = 0;
 392:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <RF_status>
 396:	8e 7f       	andi	r24, 0xFE	; 254
 398:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <RF_status>
	RF_status.Tx = 0;
 39c:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <RF_status>
 3a0:	8d 7f       	andi	r24, 0xFD	; 253
 3a2:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <RF_status>
	RF_status.New = 0;
 3a6:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <RF_status>
 3aa:	8b 7f       	andi	r24, 0xFB	; 251
 3ac:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <RF_status>

	RF_IRQDDR &= ~(1<<IRQ);
 3b0:	52 98       	cbi	0x0a, 2	; 10
	//LOW STATE ON INT0 WILL GENERATE AN INTERRUPT
	EICRA &= ~(1<<ISC01);
 3b2:	e9 e6       	ldi	r30, 0x69	; 105
 3b4:	f0 e0       	ldi	r31, 0x00	; 0
 3b6:	80 81       	ld	r24, Z
 3b8:	8d 7f       	andi	r24, 0xFD	; 253
 3ba:	80 83       	st	Z, r24
	EICRA &= ~(1<<ISC00);
 3bc:	80 81       	ld	r24, Z
 3be:	8e 7f       	andi	r24, 0xFE	; 254
 3c0:	80 83       	st	Z, r24

	EIMSK |= (1<<INT0);
 3c2:	e8 9a       	sbi	0x1d, 0	; 29
 3c4:	08 95       	ret

000003c6 <RF_Transmit>:
#endif
}

//----------------------------TRANSMITION-------------------------------//
uint16_t RF_Transmit(uint16_t data)
{
 3c6:	ac 01       	movw	r20, r24
	uint16_t ret_val = 0;
	uint8_t i;

	RF_PORT &= ~(1<<CS);
 3c8:	2a 98       	cbi	0x05, 2	; 5
 3ca:	90 e1       	ldi	r25, 0x10	; 16
}

//----------------------------TRANSMITION-------------------------------//
uint16_t RF_Transmit(uint16_t data)
{
	uint16_t ret_val = 0;
 3cc:	20 e0       	ldi	r18, 0x00	; 0
 3ce:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;

	RF_PORT &= ~(1<<CS);
	for (i=0; i<16; i++)
	{
		if (data & 0x8000) RF_PORT |= (1<<SDI);
 3d0:	55 23       	and	r21, r21
 3d2:	14 f4       	brge	.+4      	; 0x3d8 <RF_Transmit+0x12>
 3d4:	2b 9a       	sbi	0x05, 3	; 5
 3d6:	01 c0       	rjmp	.+2      	; 0x3da <RF_Transmit+0x14>
		else RF_PORT &= ~(1<<SDI);
 3d8:	2b 98       	cbi	0x05, 3	; 5

		ret_val <<= 1;
 3da:	22 0f       	add	r18, r18
 3dc:	33 1f       	adc	r19, r19
		if (RF_PIN&(1<<SDO)) ret_val |= 1;
 3de:	1c 99       	sbic	0x03, 4	; 3
 3e0:	21 60       	ori	r18, 0x01	; 1
		RF_PORT |= (1<<SCK);
 3e2:	2d 9a       	sbi	0x05, 5	; 5
		data <<= 1;
 3e4:	44 0f       	add	r20, r20
 3e6:	55 1f       	adc	r21, r21
		asm("nop");
 3e8:	00 00       	nop
		asm("nop");
 3ea:	00 00       	nop
		RF_PORT &= ~(1<<SCK);
 3ec:	2d 98       	cbi	0x05, 5	; 5
 3ee:	91 50       	subi	r25, 0x01	; 1
{
	uint16_t ret_val = 0;
	uint8_t i;

	RF_PORT &= ~(1<<CS);
	for (i=0; i<16; i++)
 3f0:	79 f7       	brne	.-34     	; 0x3d0 <RF_Transmit+0xa>
		data <<= 1;
		asm("nop");
		asm("nop");
		RF_PORT &= ~(1<<SCK);
	}
	RF_PORT |= (1<<CS);
 3f2:	2a 9a       	sbi	0x05, 2	; 5

	RF_PORT |= (1<<CS);

	return response;
	*/
}
 3f4:	c9 01       	movw	r24, r18
 3f6:	08 95       	ret

000003f8 <UpdateChecksum>:
//--------------------CALCULATING CHECKSUM (CRC16)--------------------------//
uint16_t UpdateChecksum(uint16_t checksum, uint8_t data)
{
	uint16_t tmp = (data<<8);
 3f8:	70 e0       	ldi	r23, 0x00	; 0
 3fa:	76 2f       	mov	r23, r22
 3fc:	66 27       	eor	r22, r22
 3fe:	28 e0       	ldi	r18, 0x08	; 8
 400:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i < 8; i++)
	{
		if((checksum ^ tmp) & 0x8000)
 402:	ab 01       	movw	r20, r22
 404:	48 27       	eor	r20, r24
 406:	59 27       	eor	r21, r25
 408:	55 23       	and	r21, r21
 40a:	3c f4       	brge	.+14     	; 0x41a <__FUSE_REGION_LENGTH__+0x1a>
			checksum = (checksum<<1) ^ 0x1021;
 40c:	88 0f       	add	r24, r24
 40e:	99 1f       	adc	r25, r25
 410:	41 e2       	ldi	r20, 0x21	; 33
 412:	84 27       	eor	r24, r20
 414:	40 e1       	ldi	r20, 0x10	; 16
 416:	94 27       	eor	r25, r20
 418:	02 c0       	rjmp	.+4      	; 0x41e <__FUSE_REGION_LENGTH__+0x1e>
		else
			checksum = (checksum<<1);
 41a:	88 0f       	add	r24, r24
 41c:	99 1f       	adc	r25, r25
		tmp = tmp << 1;
 41e:	66 0f       	add	r22, r22
 420:	77 1f       	adc	r23, r23
 422:	21 50       	subi	r18, 0x01	; 1
 424:	31 09       	sbc	r19, r1
}
//--------------------CALCULATING CHECKSUM (CRC16)--------------------------//
uint16_t UpdateChecksum(uint16_t checksum, uint8_t data)
{
	uint16_t tmp = (data<<8);
	for(int i = 0; i < 8; i++)
 426:	69 f7       	brne	.-38     	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
		else
			checksum = (checksum<<1);
		tmp = tmp << 1;
	}
	return checksum;
}
 428:	08 95       	ret

0000042a <RF_SetRange>:
//--------------------RANGE BAUDRATE AND FREQUENCY----------------------//
void RF_SetRange(enum RANGE range)
{
	RF_Transmit(0x80C7 | range); //ENABLE FIFO, SET RANGE
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	87 6c       	ori	r24, 0xC7	; 199
 42e:	90 68       	ori	r25, 0x80	; 128
 430:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <RF_Transmit>
 434:	08 95       	ret

00000436 <RF_SetBandwith>:
}
void RF_SetBandwith(uint8_t bandwidth, uint8_t gain, uint8_t drssi)
{
	RF_Transmit(0x9000 | ((bandwidth & 7) << 5) | ((gain & 3) << 3) | (drssi & 7));
 436:	47 70       	andi	r20, 0x07	; 7
 438:	50 e0       	ldi	r21, 0x00	; 0
 43a:	50 69       	ori	r21, 0x90	; 144
 43c:	63 70       	andi	r22, 0x03	; 3
 43e:	70 e0       	ldi	r23, 0x00	; 0
 440:	66 0f       	add	r22, r22
 442:	77 1f       	adc	r23, r23
 444:	66 0f       	add	r22, r22
 446:	77 1f       	adc	r23, r23
 448:	66 0f       	add	r22, r22
 44a:	77 1f       	adc	r23, r23
 44c:	46 2b       	or	r20, r22
 44e:	57 2b       	or	r21, r23
 450:	20 e2       	ldi	r18, 0x20	; 32
 452:	82 9f       	mul	r24, r18
 454:	c0 01       	movw	r24, r0
 456:	11 24       	eor	r1, r1
 458:	99 27       	eor	r25, r25
 45a:	84 2b       	or	r24, r20
 45c:	95 2b       	or	r25, r21
 45e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <RF_Transmit>
 462:	08 95       	ret

00000464 <RF_SetFrequency>:
}
void RF_SetFrequency(uint16_t frequency)
{
	if(frequency < 96)
 464:	80 36       	cpi	r24, 0x60	; 96
 466:	91 05       	cpc	r25, r1
 468:	38 f0       	brcs	.+14     	; 0x478 <RF_SetFrequency+0x14>
 46a:	80 34       	cpi	r24, 0x40	; 64
 46c:	2f e0       	ldi	r18, 0x0F	; 15
 46e:	92 07       	cpc	r25, r18
 470:	28 f0       	brcs	.+10     	; 0x47c <RF_SetFrequency+0x18>
 472:	8f e3       	ldi	r24, 0x3F	; 63
 474:	9f e0       	ldi	r25, 0x0F	; 15
 476:	02 c0       	rjmp	.+4      	; 0x47c <RF_SetFrequency+0x18>
		frequency = 96;
 478:	80 e6       	ldi	r24, 0x60	; 96
 47a:	90 e0       	ldi	r25, 0x00	; 0
	else if (frequency > 3903)
		frequency = 3903;
	RF_Transmit(0xA000 | frequency);
 47c:	90 6a       	ori	r25, 0xA0	; 160
 47e:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <RF_Transmit>
 482:	08 95       	ret

00000484 <RF_SetBaudRate>:
}
void RF_SetBaudRate(uint16_t baud)
{
	if(baud<663)
 484:	87 39       	cpi	r24, 0x97	; 151
 486:	22 e0       	ldi	r18, 0x02	; 2
 488:	92 07       	cpc	r25, r18
 48a:	08 f1       	brcs	.+66     	; 0x4ce <RF_SetBaudRate+0x4a>
 48c:	9c 01       	movw	r18, r24
		return;
	if(baud<5400)
 48e:	28 31       	cpi	r18, 0x18	; 24
 490:	85 e1       	ldi	r24, 0x15	; 21
 492:	38 07       	cpc	r19, r24
 494:	78 f4       	brcc	.+30     	; 0x4b4 <RF_SetBaudRate+0x30>
		RF_Transmit(0xC680 | ((43104/baud)-1));
 496:	40 e0       	ldi	r20, 0x00	; 0
 498:	50 e0       	ldi	r21, 0x00	; 0
 49a:	60 e6       	ldi	r22, 0x60	; 96
 49c:	78 ea       	ldi	r23, 0xA8	; 168
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 3e 04 	call	0x87c	; 0x87c <__divmodsi4>
 4a6:	c9 01       	movw	r24, r18
 4a8:	01 97       	sbiw	r24, 0x01	; 1
 4aa:	80 68       	ori	r24, 0x80	; 128
 4ac:	96 6c       	ori	r25, 0xC6	; 198
 4ae:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <RF_Transmit>
 4b2:	08 95       	ret
	else
		RF_Transmit(0xC600 | ((344828UL/baud)-1));		
 4b4:	40 e0       	ldi	r20, 0x00	; 0
 4b6:	50 e0       	ldi	r21, 0x00	; 0
 4b8:	6c ef       	ldi	r22, 0xFC	; 252
 4ba:	72 e4       	ldi	r23, 0x42	; 66
 4bc:	85 e0       	ldi	r24, 0x05	; 5
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 1c 04 	call	0x838	; 0x838 <__udivmodsi4>
 4c4:	c9 01       	movw	r24, r18
 4c6:	01 97       	sbiw	r24, 0x01	; 1
 4c8:	96 6c       	ori	r25, 0xC6	; 198
 4ca:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <RF_Transmit>
 4ce:	08 95       	ret

000004d0 <RF_DisableWakeUpTimer>:
}
//----------------------WAKE UP TIMER DISABLING-------------------------//
void RF_DisableWakeUpTimer(void)
{
	RF_Transmit(0xE000);
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	90 ee       	ldi	r25, 0xE0	; 224
 4d4:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <RF_Transmit>
 4d8:	08 95       	ret

000004da <RF_SetPower>:
}
//---------------------------POWER SETTING------------------------------//
void RF_SetPower(uint8_t power, uint8_t mod)
{
	RF_Transmit(0x9800 | (power & 7) | ((mod & 15)<<4));
 4da:	87 70       	andi	r24, 0x07	; 7
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	98 69       	ori	r25, 0x98	; 152
 4e0:	20 e1       	ldi	r18, 0x10	; 16
 4e2:	62 9f       	mul	r22, r18
 4e4:	b0 01       	movw	r22, r0
 4e6:	11 24       	eor	r1, r1
 4e8:	77 27       	eor	r23, r23
 4ea:	86 2b       	or	r24, r22
 4ec:	97 2b       	or	r25, r23
 4ee:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <RF_Transmit>
 4f2:	08 95       	ret

000004f4 <__vector_1>:
uint8_t RF_Data[(RF_DataLength + 10)]; // +10 FOR THE REST OF THE FRAME

//----------------------------------------------------------------------//
//-------------------------------ISR------------------------------------//
ISR(INT0_vect)
{	
 4f4:	1f 92       	push	r1
 4f6:	0f 92       	push	r0
 4f8:	0f b6       	in	r0, 0x3f	; 63
 4fa:	0f 92       	push	r0
 4fc:	11 24       	eor	r1, r1
 4fe:	2f 93       	push	r18
 500:	3f 93       	push	r19
 502:	4f 93       	push	r20
 504:	5f 93       	push	r21
 506:	6f 93       	push	r22
 508:	7f 93       	push	r23
 50a:	8f 93       	push	r24
 50c:	9f 93       	push	r25
 50e:	af 93       	push	r26
 510:	bf 93       	push	r27
 512:	cf 93       	push	r28
 514:	ef 93       	push	r30
 516:	ff 93       	push	r31
	if(RF_status.Rx)
 518:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <RF_status>
 51c:	80 ff       	sbrs	r24, 0
 51e:	3d c0       	rjmp	.+122    	; 0x59a <__vector_1+0xa6>
	{
		if(RF_Index < RF_DataLength)
 520:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
 524:	84 36       	cpi	r24, 0x64	; 100
 526:	d8 f4       	brcc	.+54     	; 0x55e <__vector_1+0x6a>
		{
			RF_Data[RF_Index++] = RF_Transmit(0xB000) & 0x00FF;
 528:	c0 91 08 02 	lds	r28, 0x0208	; 0x800208 <__data_end>
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	8c 0f       	add	r24, r28
 530:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
 534:	80 e0       	ldi	r24, 0x00	; 0
 536:	90 eb       	ldi	r25, 0xB0	; 176
 538:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <RF_Transmit>
 53c:	ec 2f       	mov	r30, r28
 53e:	f0 e0       	ldi	r31, 0x00	; 0
 540:	e8 57       	subi	r30, 0x78	; 120
 542:	fd 4f       	sbci	r31, 0xFD	; 253
 544:	80 83       	st	Z, r24
			RF_Transmit(0x8208);
			RF_status.Rx = 0;
			RF_status.New = 1; //FRAME NOT RIGHT
			return;
		}
		if(RF_Index >= (RF_Data[0] + 3))
 546:	20 91 08 02 	lds	r18, 0x0208	; 0x800208 <__data_end>
 54a:	30 e0       	ldi	r19, 0x00	; 0
 54c:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <RF_Data>
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	03 96       	adiw	r24, 0x03	; 3
 554:	28 17       	cp	r18, r24
 556:	39 07       	cpc	r19, r25
 558:	0c f4       	brge	.+2      	; 0x55c <__vector_1+0x68>
 55a:	40 c0       	rjmp	.+128    	; 0x5dc <__vector_1+0xe8>
 55c:	0f c0       	rjmp	.+30     	; 0x57c <__vector_1+0x88>
		{
			RF_Data[RF_Index++] = RF_Transmit(0xB000) & 0x00FF;
		}
		else
		{
			RF_Transmit(0x8208);
 55e:	88 e0       	ldi	r24, 0x08	; 8
 560:	92 e8       	ldi	r25, 0x82	; 130
 562:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <RF_Transmit>
			RF_status.Rx = 0;
 566:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <RF_status>
 56a:	8e 7f       	andi	r24, 0xFE	; 254
 56c:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <RF_status>
			RF_status.New = 1; //FRAME NOT RIGHT
 570:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <RF_status>
 574:	84 60       	ori	r24, 0x04	; 4
 576:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <RF_status>
			return;
 57a:	30 c0       	rjmp	.+96     	; 0x5dc <__vector_1+0xe8>
		}
		if(RF_Index >= (RF_Data[0] + 3))
		{
			RF_Transmit(0x8208);
 57c:	88 e0       	ldi	r24, 0x08	; 8
 57e:	92 e8       	ldi	r25, 0x82	; 130
 580:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <RF_Transmit>
			RF_status.Rx = 0;
 584:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <RF_status>
 588:	8e 7f       	andi	r24, 0xFE	; 254
 58a:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <RF_status>
			RF_status.New = 1; //FRAME IS RIGHT
 58e:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <RF_status>
 592:	84 60       	ori	r24, 0x04	; 4
 594:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <RF_status>
 598:	21 c0       	rjmp	.+66     	; 0x5dc <__vector_1+0xe8>
		}
	}
	else if(RF_status.Tx)
 59a:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <RF_status>
 59e:	81 ff       	sbrs	r24, 1
 5a0:	1d c0       	rjmp	.+58     	; 0x5dc <__vector_1+0xe8>
	{
		RF_Transmit(0xB800 | RF_Data[RF_Index]);
 5a2:	e0 91 08 02 	lds	r30, 0x0208	; 0x800208 <__data_end>
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	e8 57       	subi	r30, 0x78	; 120
 5aa:	fd 4f       	sbci	r31, 0xFD	; 253
 5ac:	80 81       	ld	r24, Z
 5ae:	90 e0       	ldi	r25, 0x00	; 0
 5b0:	98 6b       	ori	r25, 0xB8	; 184
 5b2:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <RF_Transmit>
		if(!RF_Index)
 5b6:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
 5ba:	81 11       	cpse	r24, r1
 5bc:	0a c0       	rjmp	.+20     	; 0x5d2 <__vector_1+0xde>
		{
			RF_status.Tx = 0;
 5be:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <RF_status>
 5c2:	8d 7f       	andi	r24, 0xFD	; 253
 5c4:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <RF_status>
			RF_Transmit(0x8208); //TX OFF
 5c8:	88 e0       	ldi	r24, 0x08	; 8
 5ca:	92 e8       	ldi	r25, 0x82	; 130
 5cc:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <RF_Transmit>
 5d0:	05 c0       	rjmp	.+10     	; 0x5dc <__vector_1+0xe8>
		}
		else
		{	
			RF_Index--;
 5d2:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <__data_end>
 5d6:	81 50       	subi	r24, 0x01	; 1
 5d8:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <__data_end>
		}
	}
}
 5dc:	ff 91       	pop	r31
 5de:	ef 91       	pop	r30
 5e0:	cf 91       	pop	r28
 5e2:	bf 91       	pop	r27
 5e4:	af 91       	pop	r26
 5e6:	9f 91       	pop	r25
 5e8:	8f 91       	pop	r24
 5ea:	7f 91       	pop	r23
 5ec:	6f 91       	pop	r22
 5ee:	5f 91       	pop	r21
 5f0:	4f 91       	pop	r20
 5f2:	3f 91       	pop	r19
 5f4:	2f 91       	pop	r18
 5f6:	0f 90       	pop	r0
 5f8:	0f be       	out	0x3f, r0	; 63
 5fa:	0f 90       	pop	r0
 5fc:	1f 90       	pop	r1
 5fe:	18 95       	reti

00000600 <RF_RxStart>:
//-----------------------------DATA RECEIVE-----------------------------//
uint8_t RF_RxStart(void)
{
	if(RF_status.New)
 600:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <RF_status>
 604:	82 fd       	sbrc	r24, 2
 606:	1d c0       	rjmp	.+58     	; 0x642 <RF_RxStart+0x42>
		return 1;		//BUFFER NOT EMPTY YET
	if(RF_status.Tx)
 608:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <RF_status>
 60c:	81 fd       	sbrc	r24, 1
 60e:	1b c0       	rjmp	.+54     	; 0x646 <RF_RxStart+0x46>
		return 2;		//TRANSMITION IN PROGRESS
	if(RF_status.Rx)
 610:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <RF_status>
 614:	80 fd       	sbrc	r24, 0
 616:	19 c0       	rjmp	.+50     	; 0x64a <RF_RxStart+0x4a>
		return 3;		//RECEIVING IN PROGRESS

	RF_Transmit(0x82C8); //RX ON
 618:	88 ec       	ldi	r24, 0xC8	; 200
 61a:	92 e8       	ldi	r25, 0x82	; 130
 61c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <RF_Transmit>

	//FIFO RESET
	RF_Transmit(0xCA81);
 620:	81 e8       	ldi	r24, 0x81	; 129
 622:	9a ec       	ldi	r25, 0xCA	; 202
 624:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <RF_Transmit>
	RF_Transmit(0xCA83);
 628:	83 e8       	ldi	r24, 0x83	; 131
 62a:	9a ec       	ldi	r25, 0xCA	; 202
 62c:	0e 94 e3 01 	call	0x3c6	; 0x3c6 <RF_Transmit>

	RF_Index = 0;
 630:	10 92 08 02 	sts	0x0208, r1	; 0x800208 <__data_end>
	RF_status.Rx = 1;
 634:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <RF_status>
 638:	81 60       	ori	r24, 0x01	; 1
 63a:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <RF_status>

	return 0;			//EVERYTING OK
 63e:	80 e0       	ldi	r24, 0x00	; 0
 640:	08 95       	ret
}
//-----------------------------DATA RECEIVE-----------------------------//
uint8_t RF_RxStart(void)
{
	if(RF_status.New)
		return 1;		//BUFFER NOT EMPTY YET
 642:	81 e0       	ldi	r24, 0x01	; 1
 644:	08 95       	ret
	if(RF_status.Tx)
		return 2;		//TRANSMITION IN PROGRESS
 646:	82 e0       	ldi	r24, 0x02	; 2
 648:	08 95       	ret
	if(RF_status.Rx)
		return 3;		//RECEIVING IN PROGRESS
 64a:	83 e0       	ldi	r24, 0x03	; 3

	RF_Index = 0;
	RF_status.Rx = 1;

	return 0;			//EVERYTING OK
}
 64c:	08 95       	ret

0000064e <RF_RxFinish>:
 *	OR (ERRORS)
 *	255 - receiving in progress
 *	254 - previous frame was not read
*/
uint8_t RF_RxFinish(char* data)
{
 64e:	cf 92       	push	r12
 650:	df 92       	push	r13
 652:	ef 92       	push	r14
 654:	ff 92       	push	r15
 656:	0f 93       	push	r16
 658:	1f 93       	push	r17
 65a:	cf 93       	push	r28
 65c:	df 93       	push	r29
 65e:	ec 01       	movw	r28, r24
	uint16_t crc;
	uint16_t crc_checksum = 0;
	uint8_t size = RF_Data[0];
 660:	10 91 88 02 	lds	r17, 0x0288	; 0x800288 <RF_Data>

	if(RF_status.Rx)
 664:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <RF_status>
 668:	90 fd       	sbrc	r25, 0
 66a:	4d c0       	rjmp	.+154    	; 0x706 <RF_RxFinish+0xb8>
		return 255;
	if(!RF_status.New)
 66c:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <RF_status>
 670:	82 ff       	sbrs	r24, 2
 672:	4b c0       	rjmp	.+150    	; 0x70a <RF_RxFinish+0xbc>
		return 254;

	if(size > RF_DataLength)
 674:	15 36       	cpi	r17, 0x65	; 101
 676:	58 f4       	brcc	.+22     	; 0x68e <RF_RxFinish+0x40>
		data[0] = 0;
		RF_status.New = 0;
		return 0; //FRAME SIZE NOT RIGHT
	}
	uint8_t i;
	for(i = 0; i < (size + 1); i++)
 678:	e1 2e       	mov	r14, r17
 67a:	f1 2c       	mov	r15, r1
 67c:	c7 01       	movw	r24, r14
 67e:	01 96       	adiw	r24, 0x01	; 1
 680:	6c 01       	movw	r12, r24
 682:	20 e0       	ldi	r18, 0x00	; 0
 684:	30 e0       	ldi	r19, 0x00	; 0
 686:	00 e0       	ldi	r16, 0x00	; 0
 688:	80 e0       	ldi	r24, 0x00	; 0
 68a:	90 e0       	ldi	r25, 0x00	; 0
 68c:	08 c0       	rjmp	.+16     	; 0x69e <RF_RxFinish+0x50>
	if(!RF_status.New)
		return 254;

	if(size > RF_DataLength)
	{
		data[0] = 0;
 68e:	18 82       	st	Y, r1
		RF_status.New = 0;
 690:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <RF_status>
 694:	8b 7f       	andi	r24, 0xFB	; 251
 696:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <RF_status>
		return 0; //FRAME SIZE NOT RIGHT
 69a:	80 e0       	ldi	r24, 0x00	; 0
 69c:	39 c0       	rjmp	.+114    	; 0x710 <RF_RxFinish+0xc2>
	}
	uint8_t i;
	for(i = 0; i < (size + 1); i++)
	{
		crc_checksum = UpdateChecksum(crc_checksum, RF_Data[i]);
 69e:	f9 01       	movw	r30, r18
 6a0:	e8 57       	subi	r30, 0x78	; 120
 6a2:	fd 4f       	sbci	r31, 0xFD	; 253
 6a4:	60 81       	ld	r22, Z
 6a6:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <UpdateChecksum>
		data[0] = 0;
		RF_status.New = 0;
		return 0; //FRAME SIZE NOT RIGHT
	}
	uint8_t i;
	for(i = 0; i < (size + 1); i++)
 6aa:	0f 5f       	subi	r16, 0xFF	; 255
 6ac:	20 2f       	mov	r18, r16
 6ae:	30 e0       	ldi	r19, 0x00	; 0
 6b0:	2c 15       	cp	r18, r12
 6b2:	3d 05       	cpc	r19, r13
 6b4:	a4 f3       	brlt	.-24     	; 0x69e <RF_RxFinish+0x50>
	{
		crc_checksum = UpdateChecksum(crc_checksum, RF_Data[i]);
	}

	crc = RF_Data[i++];
 6b6:	f9 01       	movw	r30, r18
 6b8:	e8 57       	subi	r30, 0x78	; 120
 6ba:	fd 4f       	sbci	r31, 0xFD	; 253
 6bc:	20 81       	ld	r18, Z
 6be:	0f 5f       	subi	r16, 0xFF	; 255
	crc |= RF_Data[i] << 8;
 6c0:	e0 2f       	mov	r30, r16
 6c2:	f0 e0       	ldi	r31, 0x00	; 0
 6c4:	e8 57       	subi	r30, 0x78	; 120
 6c6:	fd 4f       	sbci	r31, 0xFD	; 253
 6c8:	40 81       	ld	r20, Z
 6ca:	30 e0       	ldi	r19, 0x00	; 0
 6cc:	34 2b       	or	r19, r20
	RF_status.New = 0;
 6ce:	40 91 87 02 	lds	r20, 0x0287	; 0x800287 <RF_status>
 6d2:	4b 7f       	andi	r20, 0xFB	; 251
 6d4:	40 93 87 02 	sts	0x0287, r20	; 0x800287 <RF_status>
	
	if(crc != crc_checksum)
 6d8:	28 17       	cp	r18, r24
 6da:	39 07       	cpc	r19, r25
 6dc:	c1 f4       	brne	.+48     	; 0x70e <RF_RxFinish+0xc0>
		return 0; //DATA NOT RIGHT - DIFFERENT CHECKSUMS
	else
	{
		for(int i = 0; i < size; i++)
 6de:	1e 14       	cp	r1, r14
 6e0:	1f 04       	cpc	r1, r15
 6e2:	64 f4       	brge	.+24     	; 0x6fc <RF_RxFinish+0xae>
 6e4:	e9 e8       	ldi	r30, 0x89	; 137
 6e6:	f2 e0       	ldi	r31, 0x02	; 2
 6e8:	de 01       	movw	r26, r28
 6ea:	21 2f       	mov	r18, r17
 6ec:	30 e0       	ldi	r19, 0x00	; 0
 6ee:	27 57       	subi	r18, 0x77	; 119
 6f0:	3d 4f       	sbci	r19, 0xFD	; 253
		{
			data[i] = RF_Data[i+1];
 6f2:	91 91       	ld	r25, Z+
 6f4:	9d 93       	st	X+, r25
	
	if(crc != crc_checksum)
		return 0; //DATA NOT RIGHT - DIFFERENT CHECKSUMS
	else
	{
		for(int i = 0; i < size; i++)
 6f6:	e2 17       	cp	r30, r18
 6f8:	f3 07       	cpc	r31, r19
 6fa:	d9 f7       	brne	.-10     	; 0x6f2 <RF_RxFinish+0xa4>
		{
			data[i] = RF_Data[i+1];
		}
		data[size] = 0; //ENDING FRAME WITH 0
 6fc:	c1 0f       	add	r28, r17
 6fe:	d1 1d       	adc	r29, r1
 700:	18 82       	st	Y, r1
		return size; //SIZE OF RECEIVED FRAME IN BYTES
 702:	81 2f       	mov	r24, r17
 704:	05 c0       	rjmp	.+10     	; 0x710 <RF_RxFinish+0xc2>
	uint16_t crc;
	uint16_t crc_checksum = 0;
	uint8_t size = RF_Data[0];

	if(RF_status.Rx)
		return 255;
 706:	8f ef       	ldi	r24, 0xFF	; 255
 708:	03 c0       	rjmp	.+6      	; 0x710 <RF_RxFinish+0xc2>
	if(!RF_status.New)
		return 254;
 70a:	8e ef       	ldi	r24, 0xFE	; 254
 70c:	01 c0       	rjmp	.+2      	; 0x710 <RF_RxFinish+0xc2>
	crc = RF_Data[i++];
	crc |= RF_Data[i] << 8;
	RF_status.New = 0;
	
	if(crc != crc_checksum)
		return 0; //DATA NOT RIGHT - DIFFERENT CHECKSUMS
 70e:	80 e0       	ldi	r24, 0x00	; 0
			data[i] = RF_Data[i+1];
		}
		data[size] = 0; //ENDING FRAME WITH 0
		return size; //SIZE OF RECEIVED FRAME IN BYTES
	}
}
 710:	df 91       	pop	r29
 712:	cf 91       	pop	r28
 714:	1f 91       	pop	r17
 716:	0f 91       	pop	r16
 718:	ff 90       	pop	r15
 71a:	ef 90       	pop	r14
 71c:	df 90       	pop	r13
 71e:	cf 90       	pop	r12
 720:	08 95       	ret

00000722 <UART_Initlialise>:
char UART_ReceiveChar(void)
{
	while(!(UCSR0A & (1<<RXC0))); //EMPTY LOOP - WAITING UNTIL DATA IS RECEIVED

	return UDR0;
}
 722:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 726:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 72a:	88 e9       	ldi	r24, 0x98	; 152
 72c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 730:	86 e0       	ldi	r24, 0x06	; 6
 732:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 736:	08 95       	ret

00000738 <UART_SendChar>:
 738:	e0 ec       	ldi	r30, 0xC0	; 192
 73a:	f0 e0       	ldi	r31, 0x00	; 0
 73c:	90 81       	ld	r25, Z
 73e:	95 ff       	sbrs	r25, 5
 740:	fd cf       	rjmp	.-6      	; 0x73c <UART_SendChar+0x4>
 742:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 746:	08 95       	ret

00000748 <UART_SendString>:
 748:	cf 93       	push	r28
 74a:	df 93       	push	r29
 74c:	ec 01       	movw	r28, r24
 74e:	88 81       	ld	r24, Y
 750:	88 23       	and	r24, r24
 752:	31 f0       	breq	.+12     	; 0x760 <UART_SendString+0x18>
 754:	21 96       	adiw	r28, 0x01	; 1
 756:	0e 94 9c 03 	call	0x738	; 0x738 <UART_SendChar>
 75a:	89 91       	ld	r24, Y+
 75c:	81 11       	cpse	r24, r1
 75e:	fb cf       	rjmp	.-10     	; 0x756 <UART_SendString+0xe>
 760:	df 91       	pop	r29
 762:	cf 91       	pop	r28
 764:	08 95       	ret

00000766 <__vector_18>:
ISR(USART_RX_vect)
{
 766:	1f 92       	push	r1
 768:	0f 92       	push	r0
 76a:	0f b6       	in	r0, 0x3f	; 63
 76c:	0f 92       	push	r0
 76e:	11 24       	eor	r1, r1
 770:	8f 93       	push	r24
 772:	9f 93       	push	r25
 774:	af 93       	push	r26
 776:	bf 93       	push	r27
 778:	ef 93       	push	r30
 77a:	ff 93       	push	r31
	char character = UDR0;
 77c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

	if(messageIndex == 0)
 780:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <messageIndex>
 784:	91 11       	cpse	r25, r1
 786:	2a c0       	rjmp	.+84     	; 0x7dc <__vector_18+0x76>
	{
		if(character == 'E')
 788:	85 34       	cpi	r24, 0x45	; 69
 78a:	61 f4       	brne	.+24     	; 0x7a4 <__vector_18+0x3e>
		{
			message = &errorMessage;
 78c:	86 e2       	ldi	r24, 0x26	; 38
 78e:	91 e0       	ldi	r25, 0x01	; 1
 790:	90 93 f8 02 	sts	0x02F8, r25	; 0x8002f8 <message+0x1>
 794:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <message>
			messageIndex++;
 798:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <messageIndex>
 79c:	8f 5f       	subi	r24, 0xFF	; 255
 79e:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <messageIndex>
 7a2:	3f c0       	rjmp	.+126    	; 0x822 <__vector_18+0xbc>
		}
		else if(character == 'O')
 7a4:	8f 34       	cpi	r24, 0x4F	; 79
 7a6:	61 f4       	brne	.+24     	; 0x7c0 <__vector_18+0x5a>
		{
			message = &okMessage;
 7a8:	8f e2       	ldi	r24, 0x2F	; 47
 7aa:	91 e0       	ldi	r25, 0x01	; 1
 7ac:	90 93 f8 02 	sts	0x02F8, r25	; 0x8002f8 <message+0x1>
 7b0:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <message>
			messageIndex++;
 7b4:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <messageIndex>
 7b8:	8f 5f       	subi	r24, 0xFF	; 255
 7ba:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <messageIndex>
 7be:	31 c0       	rjmp	.+98     	; 0x822 <__vector_18+0xbc>
		}
		else if(character == '>')
 7c0:	8e 33       	cpi	r24, 0x3E	; 62
 7c2:	79 f5       	brne	.+94     	; 0x822 <__vector_18+0xbc>
		{
			message = &inputMessage;
 7c4:	8d e1       	ldi	r24, 0x1D	; 29
 7c6:	91 e0       	ldi	r25, 0x01	; 1
 7c8:	90 93 f8 02 	sts	0x02F8, r25	; 0x8002f8 <message+0x1>
 7cc:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <message>
			messageIndex++;
 7d0:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <messageIndex>
 7d4:	8f 5f       	subi	r24, 0xFF	; 255
 7d6:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <messageIndex>
 7da:	23 c0       	rjmp	.+70     	; 0x822 <__vector_18+0xbc>
		}
	}
	else
	{
		if(character == message->characters[messageIndex])
 7dc:	e0 91 f7 02 	lds	r30, 0x02F7	; 0x8002f7 <message>
 7e0:	f0 91 f8 02 	lds	r31, 0x02F8	; 0x8002f8 <message+0x1>
 7e4:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <messageIndex>
 7e8:	df 01       	movw	r26, r30
 7ea:	a9 0f       	add	r26, r25
 7ec:	b1 1d       	adc	r27, r1
 7ee:	9c 91       	ld	r25, X
 7f0:	98 13       	cpse	r25, r24
 7f2:	15 c0       	rjmp	.+42     	; 0x81e <__vector_18+0xb8>
		{
			messageIndex++;	
 7f4:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <messageIndex>
 7f8:	8f 5f       	subi	r24, 0xFF	; 255
 7fa:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <messageIndex>
				
			if(message->characters[messageIndex] == '\0')
 7fe:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <messageIndex>
 802:	df 01       	movw	r26, r30
 804:	a8 0f       	add	r26, r24
 806:	b1 1d       	adc	r27, r1
 808:	8c 91       	ld	r24, X
 80a:	81 11       	cpse	r24, r1
 80c:	0a c0       	rjmp	.+20     	; 0x822 <__vector_18+0xbc>
			{
				*message->fullyReceived = 1;
 80e:	07 80       	ldd	r0, Z+7	; 0x07
 810:	f0 85       	ldd	r31, Z+8	; 0x08
 812:	e0 2d       	mov	r30, r0
 814:	81 e0       	ldi	r24, 0x01	; 1
 816:	80 83       	st	Z, r24
				messageIndex = 0;
 818:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <messageIndex>
 81c:	02 c0       	rjmp	.+4      	; 0x822 <__vector_18+0xbc>
			}
		}
		else
		{
			messageIndex = 0;
 81e:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <messageIndex>
	//}
	//else
	//{
		//bufferIndex++;
	//}
 822:	ff 91       	pop	r31
 824:	ef 91       	pop	r30
 826:	bf 91       	pop	r27
 828:	af 91       	pop	r26
 82a:	9f 91       	pop	r25
 82c:	8f 91       	pop	r24
 82e:	0f 90       	pop	r0
 830:	0f be       	out	0x3f, r0	; 63
 832:	0f 90       	pop	r0
 834:	1f 90       	pop	r1
 836:	18 95       	reti

00000838 <__udivmodsi4>:
 838:	a1 e2       	ldi	r26, 0x21	; 33
 83a:	1a 2e       	mov	r1, r26
 83c:	aa 1b       	sub	r26, r26
 83e:	bb 1b       	sub	r27, r27
 840:	fd 01       	movw	r30, r26
 842:	0d c0       	rjmp	.+26     	; 0x85e <__udivmodsi4_ep>

00000844 <__udivmodsi4_loop>:
 844:	aa 1f       	adc	r26, r26
 846:	bb 1f       	adc	r27, r27
 848:	ee 1f       	adc	r30, r30
 84a:	ff 1f       	adc	r31, r31
 84c:	a2 17       	cp	r26, r18
 84e:	b3 07       	cpc	r27, r19
 850:	e4 07       	cpc	r30, r20
 852:	f5 07       	cpc	r31, r21
 854:	20 f0       	brcs	.+8      	; 0x85e <__udivmodsi4_ep>
 856:	a2 1b       	sub	r26, r18
 858:	b3 0b       	sbc	r27, r19
 85a:	e4 0b       	sbc	r30, r20
 85c:	f5 0b       	sbc	r31, r21

0000085e <__udivmodsi4_ep>:
 85e:	66 1f       	adc	r22, r22
 860:	77 1f       	adc	r23, r23
 862:	88 1f       	adc	r24, r24
 864:	99 1f       	adc	r25, r25
 866:	1a 94       	dec	r1
 868:	69 f7       	brne	.-38     	; 0x844 <__udivmodsi4_loop>
 86a:	60 95       	com	r22
 86c:	70 95       	com	r23
 86e:	80 95       	com	r24
 870:	90 95       	com	r25
 872:	9b 01       	movw	r18, r22
 874:	ac 01       	movw	r20, r24
 876:	bd 01       	movw	r22, r26
 878:	cf 01       	movw	r24, r30
 87a:	08 95       	ret

0000087c <__divmodsi4>:
 87c:	05 2e       	mov	r0, r21
 87e:	97 fb       	bst	r25, 7
 880:	1e f4       	brtc	.+6      	; 0x888 <__divmodsi4+0xc>
 882:	00 94       	com	r0
 884:	0e 94 55 04 	call	0x8aa	; 0x8aa <__negsi2>
 888:	57 fd       	sbrc	r21, 7
 88a:	07 d0       	rcall	.+14     	; 0x89a <__divmodsi4_neg2>
 88c:	0e 94 1c 04 	call	0x838	; 0x838 <__udivmodsi4>
 890:	07 fc       	sbrc	r0, 7
 892:	03 d0       	rcall	.+6      	; 0x89a <__divmodsi4_neg2>
 894:	4e f4       	brtc	.+18     	; 0x8a8 <__divmodsi4_exit>
 896:	0c 94 55 04 	jmp	0x8aa	; 0x8aa <__negsi2>

0000089a <__divmodsi4_neg2>:
 89a:	50 95       	com	r21
 89c:	40 95       	com	r20
 89e:	30 95       	com	r19
 8a0:	21 95       	neg	r18
 8a2:	3f 4f       	sbci	r19, 0xFF	; 255
 8a4:	4f 4f       	sbci	r20, 0xFF	; 255
 8a6:	5f 4f       	sbci	r21, 0xFF	; 255

000008a8 <__divmodsi4_exit>:
 8a8:	08 95       	ret

000008aa <__negsi2>:
 8aa:	90 95       	com	r25
 8ac:	80 95       	com	r24
 8ae:	70 95       	com	r23
 8b0:	61 95       	neg	r22
 8b2:	7f 4f       	sbci	r23, 0xFF	; 255
 8b4:	8f 4f       	sbci	r24, 0xFF	; 255
 8b6:	9f 4f       	sbci	r25, 0xFF	; 255
 8b8:	08 95       	ret

000008ba <sprintf>:
 8ba:	ae e0       	ldi	r26, 0x0E	; 14
 8bc:	b0 e0       	ldi	r27, 0x00	; 0
 8be:	e3 e6       	ldi	r30, 0x63	; 99
 8c0:	f4 e0       	ldi	r31, 0x04	; 4
 8c2:	0c 94 0c 07 	jmp	0xe18	; 0xe18 <__prologue_saves__+0x1c>
 8c6:	0d 89       	ldd	r16, Y+21	; 0x15
 8c8:	1e 89       	ldd	r17, Y+22	; 0x16
 8ca:	86 e0       	ldi	r24, 0x06	; 6
 8cc:	8c 83       	std	Y+4, r24	; 0x04
 8ce:	1a 83       	std	Y+2, r17	; 0x02
 8d0:	09 83       	std	Y+1, r16	; 0x01
 8d2:	8f ef       	ldi	r24, 0xFF	; 255
 8d4:	9f e7       	ldi	r25, 0x7F	; 127
 8d6:	9e 83       	std	Y+6, r25	; 0x06
 8d8:	8d 83       	std	Y+5, r24	; 0x05
 8da:	ae 01       	movw	r20, r28
 8dc:	47 5e       	subi	r20, 0xE7	; 231
 8de:	5f 4f       	sbci	r21, 0xFF	; 255
 8e0:	6f 89       	ldd	r22, Y+23	; 0x17
 8e2:	78 8d       	ldd	r23, Y+24	; 0x18
 8e4:	ce 01       	movw	r24, r28
 8e6:	01 96       	adiw	r24, 0x01	; 1
 8e8:	0e 94 80 04 	call	0x900	; 0x900 <vfprintf>
 8ec:	2f 81       	ldd	r18, Y+7	; 0x07
 8ee:	38 85       	ldd	r19, Y+8	; 0x08
 8f0:	f8 01       	movw	r30, r16
 8f2:	e2 0f       	add	r30, r18
 8f4:	f3 1f       	adc	r31, r19
 8f6:	10 82       	st	Z, r1
 8f8:	2e 96       	adiw	r28, 0x0e	; 14
 8fa:	e4 e0       	ldi	r30, 0x04	; 4
 8fc:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__epilogue_restores__+0x1c>

00000900 <vfprintf>:
 900:	ac e0       	ldi	r26, 0x0C	; 12
 902:	b0 e0       	ldi	r27, 0x00	; 0
 904:	e6 e8       	ldi	r30, 0x86	; 134
 906:	f4 e0       	ldi	r31, 0x04	; 4
 908:	0c 94 fe 06 	jmp	0xdfc	; 0xdfc <__prologue_saves__>
 90c:	7c 01       	movw	r14, r24
 90e:	6b 01       	movw	r12, r22
 910:	8a 01       	movw	r16, r20
 912:	fc 01       	movw	r30, r24
 914:	17 82       	std	Z+7, r1	; 0x07
 916:	16 82       	std	Z+6, r1	; 0x06
 918:	83 81       	ldd	r24, Z+3	; 0x03
 91a:	81 ff       	sbrs	r24, 1
 91c:	bd c1       	rjmp	.+890    	; 0xc98 <vfprintf+0x398>
 91e:	ce 01       	movw	r24, r28
 920:	01 96       	adiw	r24, 0x01	; 1
 922:	4c 01       	movw	r8, r24
 924:	f7 01       	movw	r30, r14
 926:	93 81       	ldd	r25, Z+3	; 0x03
 928:	f6 01       	movw	r30, r12
 92a:	93 fd       	sbrc	r25, 3
 92c:	85 91       	lpm	r24, Z+
 92e:	93 ff       	sbrs	r25, 3
 930:	81 91       	ld	r24, Z+
 932:	6f 01       	movw	r12, r30
 934:	88 23       	and	r24, r24
 936:	09 f4       	brne	.+2      	; 0x93a <vfprintf+0x3a>
 938:	ab c1       	rjmp	.+854    	; 0xc90 <vfprintf+0x390>
 93a:	85 32       	cpi	r24, 0x25	; 37
 93c:	39 f4       	brne	.+14     	; 0x94c <vfprintf+0x4c>
 93e:	93 fd       	sbrc	r25, 3
 940:	85 91       	lpm	r24, Z+
 942:	93 ff       	sbrs	r25, 3
 944:	81 91       	ld	r24, Z+
 946:	6f 01       	movw	r12, r30
 948:	85 32       	cpi	r24, 0x25	; 37
 94a:	29 f4       	brne	.+10     	; 0x956 <vfprintf+0x56>
 94c:	b7 01       	movw	r22, r14
 94e:	90 e0       	ldi	r25, 0x00	; 0
 950:	0e 94 68 06 	call	0xcd0	; 0xcd0 <fputc>
 954:	e7 cf       	rjmp	.-50     	; 0x924 <vfprintf+0x24>
 956:	51 2c       	mov	r5, r1
 958:	31 2c       	mov	r3, r1
 95a:	20 e0       	ldi	r18, 0x00	; 0
 95c:	20 32       	cpi	r18, 0x20	; 32
 95e:	a0 f4       	brcc	.+40     	; 0x988 <vfprintf+0x88>
 960:	8b 32       	cpi	r24, 0x2B	; 43
 962:	69 f0       	breq	.+26     	; 0x97e <vfprintf+0x7e>
 964:	30 f4       	brcc	.+12     	; 0x972 <vfprintf+0x72>
 966:	80 32       	cpi	r24, 0x20	; 32
 968:	59 f0       	breq	.+22     	; 0x980 <vfprintf+0x80>
 96a:	83 32       	cpi	r24, 0x23	; 35
 96c:	69 f4       	brne	.+26     	; 0x988 <vfprintf+0x88>
 96e:	20 61       	ori	r18, 0x10	; 16
 970:	2c c0       	rjmp	.+88     	; 0x9ca <vfprintf+0xca>
 972:	8d 32       	cpi	r24, 0x2D	; 45
 974:	39 f0       	breq	.+14     	; 0x984 <vfprintf+0x84>
 976:	80 33       	cpi	r24, 0x30	; 48
 978:	39 f4       	brne	.+14     	; 0x988 <vfprintf+0x88>
 97a:	21 60       	ori	r18, 0x01	; 1
 97c:	26 c0       	rjmp	.+76     	; 0x9ca <vfprintf+0xca>
 97e:	22 60       	ori	r18, 0x02	; 2
 980:	24 60       	ori	r18, 0x04	; 4
 982:	23 c0       	rjmp	.+70     	; 0x9ca <vfprintf+0xca>
 984:	28 60       	ori	r18, 0x08	; 8
 986:	21 c0       	rjmp	.+66     	; 0x9ca <vfprintf+0xca>
 988:	27 fd       	sbrc	r18, 7
 98a:	27 c0       	rjmp	.+78     	; 0x9da <vfprintf+0xda>
 98c:	30 ed       	ldi	r19, 0xD0	; 208
 98e:	38 0f       	add	r19, r24
 990:	3a 30       	cpi	r19, 0x0A	; 10
 992:	78 f4       	brcc	.+30     	; 0x9b2 <vfprintf+0xb2>
 994:	26 ff       	sbrs	r18, 6
 996:	06 c0       	rjmp	.+12     	; 0x9a4 <vfprintf+0xa4>
 998:	fa e0       	ldi	r31, 0x0A	; 10
 99a:	5f 9e       	mul	r5, r31
 99c:	30 0d       	add	r19, r0
 99e:	11 24       	eor	r1, r1
 9a0:	53 2e       	mov	r5, r19
 9a2:	13 c0       	rjmp	.+38     	; 0x9ca <vfprintf+0xca>
 9a4:	8a e0       	ldi	r24, 0x0A	; 10
 9a6:	38 9e       	mul	r3, r24
 9a8:	30 0d       	add	r19, r0
 9aa:	11 24       	eor	r1, r1
 9ac:	33 2e       	mov	r3, r19
 9ae:	20 62       	ori	r18, 0x20	; 32
 9b0:	0c c0       	rjmp	.+24     	; 0x9ca <vfprintf+0xca>
 9b2:	8e 32       	cpi	r24, 0x2E	; 46
 9b4:	21 f4       	brne	.+8      	; 0x9be <vfprintf+0xbe>
 9b6:	26 fd       	sbrc	r18, 6
 9b8:	6b c1       	rjmp	.+726    	; 0xc90 <vfprintf+0x390>
 9ba:	20 64       	ori	r18, 0x40	; 64
 9bc:	06 c0       	rjmp	.+12     	; 0x9ca <vfprintf+0xca>
 9be:	8c 36       	cpi	r24, 0x6C	; 108
 9c0:	11 f4       	brne	.+4      	; 0x9c6 <vfprintf+0xc6>
 9c2:	20 68       	ori	r18, 0x80	; 128
 9c4:	02 c0       	rjmp	.+4      	; 0x9ca <vfprintf+0xca>
 9c6:	88 36       	cpi	r24, 0x68	; 104
 9c8:	41 f4       	brne	.+16     	; 0x9da <vfprintf+0xda>
 9ca:	f6 01       	movw	r30, r12
 9cc:	93 fd       	sbrc	r25, 3
 9ce:	85 91       	lpm	r24, Z+
 9d0:	93 ff       	sbrs	r25, 3
 9d2:	81 91       	ld	r24, Z+
 9d4:	6f 01       	movw	r12, r30
 9d6:	81 11       	cpse	r24, r1
 9d8:	c1 cf       	rjmp	.-126    	; 0x95c <vfprintf+0x5c>
 9da:	98 2f       	mov	r25, r24
 9dc:	9f 7d       	andi	r25, 0xDF	; 223
 9de:	95 54       	subi	r25, 0x45	; 69
 9e0:	93 30       	cpi	r25, 0x03	; 3
 9e2:	28 f4       	brcc	.+10     	; 0x9ee <vfprintf+0xee>
 9e4:	0c 5f       	subi	r16, 0xFC	; 252
 9e6:	1f 4f       	sbci	r17, 0xFF	; 255
 9e8:	ff e3       	ldi	r31, 0x3F	; 63
 9ea:	f9 83       	std	Y+1, r31	; 0x01
 9ec:	0d c0       	rjmp	.+26     	; 0xa08 <vfprintf+0x108>
 9ee:	83 36       	cpi	r24, 0x63	; 99
 9f0:	31 f0       	breq	.+12     	; 0x9fe <vfprintf+0xfe>
 9f2:	83 37       	cpi	r24, 0x73	; 115
 9f4:	71 f0       	breq	.+28     	; 0xa12 <vfprintf+0x112>
 9f6:	83 35       	cpi	r24, 0x53	; 83
 9f8:	09 f0       	breq	.+2      	; 0x9fc <vfprintf+0xfc>
 9fa:	5b c0       	rjmp	.+182    	; 0xab2 <vfprintf+0x1b2>
 9fc:	22 c0       	rjmp	.+68     	; 0xa42 <vfprintf+0x142>
 9fe:	f8 01       	movw	r30, r16
 a00:	80 81       	ld	r24, Z
 a02:	89 83       	std	Y+1, r24	; 0x01
 a04:	0e 5f       	subi	r16, 0xFE	; 254
 a06:	1f 4f       	sbci	r17, 0xFF	; 255
 a08:	44 24       	eor	r4, r4
 a0a:	43 94       	inc	r4
 a0c:	51 2c       	mov	r5, r1
 a0e:	54 01       	movw	r10, r8
 a10:	15 c0       	rjmp	.+42     	; 0xa3c <vfprintf+0x13c>
 a12:	38 01       	movw	r6, r16
 a14:	f2 e0       	ldi	r31, 0x02	; 2
 a16:	6f 0e       	add	r6, r31
 a18:	71 1c       	adc	r7, r1
 a1a:	f8 01       	movw	r30, r16
 a1c:	a0 80       	ld	r10, Z
 a1e:	b1 80       	ldd	r11, Z+1	; 0x01
 a20:	26 ff       	sbrs	r18, 6
 a22:	03 c0       	rjmp	.+6      	; 0xa2a <vfprintf+0x12a>
 a24:	65 2d       	mov	r22, r5
 a26:	70 e0       	ldi	r23, 0x00	; 0
 a28:	02 c0       	rjmp	.+4      	; 0xa2e <vfprintf+0x12e>
 a2a:	6f ef       	ldi	r22, 0xFF	; 255
 a2c:	7f ef       	ldi	r23, 0xFF	; 255
 a2e:	c5 01       	movw	r24, r10
 a30:	2c 87       	std	Y+12, r18	; 0x0c
 a32:	0e 94 5d 06 	call	0xcba	; 0xcba <strnlen>
 a36:	2c 01       	movw	r4, r24
 a38:	83 01       	movw	r16, r6
 a3a:	2c 85       	ldd	r18, Y+12	; 0x0c
 a3c:	2f 77       	andi	r18, 0x7F	; 127
 a3e:	22 2e       	mov	r2, r18
 a40:	17 c0       	rjmp	.+46     	; 0xa70 <vfprintf+0x170>
 a42:	38 01       	movw	r6, r16
 a44:	f2 e0       	ldi	r31, 0x02	; 2
 a46:	6f 0e       	add	r6, r31
 a48:	71 1c       	adc	r7, r1
 a4a:	f8 01       	movw	r30, r16
 a4c:	a0 80       	ld	r10, Z
 a4e:	b1 80       	ldd	r11, Z+1	; 0x01
 a50:	26 ff       	sbrs	r18, 6
 a52:	03 c0       	rjmp	.+6      	; 0xa5a <vfprintf+0x15a>
 a54:	65 2d       	mov	r22, r5
 a56:	70 e0       	ldi	r23, 0x00	; 0
 a58:	02 c0       	rjmp	.+4      	; 0xa5e <vfprintf+0x15e>
 a5a:	6f ef       	ldi	r22, 0xFF	; 255
 a5c:	7f ef       	ldi	r23, 0xFF	; 255
 a5e:	c5 01       	movw	r24, r10
 a60:	2c 87       	std	Y+12, r18	; 0x0c
 a62:	0e 94 52 06 	call	0xca4	; 0xca4 <strnlen_P>
 a66:	2c 01       	movw	r4, r24
 a68:	2c 85       	ldd	r18, Y+12	; 0x0c
 a6a:	20 68       	ori	r18, 0x80	; 128
 a6c:	22 2e       	mov	r2, r18
 a6e:	83 01       	movw	r16, r6
 a70:	23 fc       	sbrc	r2, 3
 a72:	1b c0       	rjmp	.+54     	; 0xaaa <vfprintf+0x1aa>
 a74:	83 2d       	mov	r24, r3
 a76:	90 e0       	ldi	r25, 0x00	; 0
 a78:	48 16       	cp	r4, r24
 a7a:	59 06       	cpc	r5, r25
 a7c:	b0 f4       	brcc	.+44     	; 0xaaa <vfprintf+0x1aa>
 a7e:	b7 01       	movw	r22, r14
 a80:	80 e2       	ldi	r24, 0x20	; 32
 a82:	90 e0       	ldi	r25, 0x00	; 0
 a84:	0e 94 68 06 	call	0xcd0	; 0xcd0 <fputc>
 a88:	3a 94       	dec	r3
 a8a:	f4 cf       	rjmp	.-24     	; 0xa74 <vfprintf+0x174>
 a8c:	f5 01       	movw	r30, r10
 a8e:	27 fc       	sbrc	r2, 7
 a90:	85 91       	lpm	r24, Z+
 a92:	27 fe       	sbrs	r2, 7
 a94:	81 91       	ld	r24, Z+
 a96:	5f 01       	movw	r10, r30
 a98:	b7 01       	movw	r22, r14
 a9a:	90 e0       	ldi	r25, 0x00	; 0
 a9c:	0e 94 68 06 	call	0xcd0	; 0xcd0 <fputc>
 aa0:	31 10       	cpse	r3, r1
 aa2:	3a 94       	dec	r3
 aa4:	f1 e0       	ldi	r31, 0x01	; 1
 aa6:	4f 1a       	sub	r4, r31
 aa8:	51 08       	sbc	r5, r1
 aaa:	41 14       	cp	r4, r1
 aac:	51 04       	cpc	r5, r1
 aae:	71 f7       	brne	.-36     	; 0xa8c <vfprintf+0x18c>
 ab0:	e5 c0       	rjmp	.+458    	; 0xc7c <vfprintf+0x37c>
 ab2:	84 36       	cpi	r24, 0x64	; 100
 ab4:	11 f0       	breq	.+4      	; 0xaba <vfprintf+0x1ba>
 ab6:	89 36       	cpi	r24, 0x69	; 105
 ab8:	39 f5       	brne	.+78     	; 0xb08 <vfprintf+0x208>
 aba:	f8 01       	movw	r30, r16
 abc:	27 ff       	sbrs	r18, 7
 abe:	07 c0       	rjmp	.+14     	; 0xace <vfprintf+0x1ce>
 ac0:	60 81       	ld	r22, Z
 ac2:	71 81       	ldd	r23, Z+1	; 0x01
 ac4:	82 81       	ldd	r24, Z+2	; 0x02
 ac6:	93 81       	ldd	r25, Z+3	; 0x03
 ac8:	0c 5f       	subi	r16, 0xFC	; 252
 aca:	1f 4f       	sbci	r17, 0xFF	; 255
 acc:	08 c0       	rjmp	.+16     	; 0xade <vfprintf+0x1de>
 ace:	60 81       	ld	r22, Z
 ad0:	71 81       	ldd	r23, Z+1	; 0x01
 ad2:	07 2e       	mov	r0, r23
 ad4:	00 0c       	add	r0, r0
 ad6:	88 0b       	sbc	r24, r24
 ad8:	99 0b       	sbc	r25, r25
 ada:	0e 5f       	subi	r16, 0xFE	; 254
 adc:	1f 4f       	sbci	r17, 0xFF	; 255
 ade:	2f 76       	andi	r18, 0x6F	; 111
 ae0:	72 2e       	mov	r7, r18
 ae2:	97 ff       	sbrs	r25, 7
 ae4:	09 c0       	rjmp	.+18     	; 0xaf8 <vfprintf+0x1f8>
 ae6:	90 95       	com	r25
 ae8:	80 95       	com	r24
 aea:	70 95       	com	r23
 aec:	61 95       	neg	r22
 aee:	7f 4f       	sbci	r23, 0xFF	; 255
 af0:	8f 4f       	sbci	r24, 0xFF	; 255
 af2:	9f 4f       	sbci	r25, 0xFF	; 255
 af4:	20 68       	ori	r18, 0x80	; 128
 af6:	72 2e       	mov	r7, r18
 af8:	2a e0       	ldi	r18, 0x0A	; 10
 afa:	30 e0       	ldi	r19, 0x00	; 0
 afc:	a4 01       	movw	r20, r8
 afe:	0e 94 a0 06 	call	0xd40	; 0xd40 <__ultoa_invert>
 b02:	a8 2e       	mov	r10, r24
 b04:	a8 18       	sub	r10, r8
 b06:	44 c0       	rjmp	.+136    	; 0xb90 <vfprintf+0x290>
 b08:	85 37       	cpi	r24, 0x75	; 117
 b0a:	29 f4       	brne	.+10     	; 0xb16 <vfprintf+0x216>
 b0c:	2f 7e       	andi	r18, 0xEF	; 239
 b0e:	b2 2e       	mov	r11, r18
 b10:	2a e0       	ldi	r18, 0x0A	; 10
 b12:	30 e0       	ldi	r19, 0x00	; 0
 b14:	25 c0       	rjmp	.+74     	; 0xb60 <vfprintf+0x260>
 b16:	f2 2f       	mov	r31, r18
 b18:	f9 7f       	andi	r31, 0xF9	; 249
 b1a:	bf 2e       	mov	r11, r31
 b1c:	8f 36       	cpi	r24, 0x6F	; 111
 b1e:	c1 f0       	breq	.+48     	; 0xb50 <vfprintf+0x250>
 b20:	18 f4       	brcc	.+6      	; 0xb28 <vfprintf+0x228>
 b22:	88 35       	cpi	r24, 0x58	; 88
 b24:	79 f0       	breq	.+30     	; 0xb44 <vfprintf+0x244>
 b26:	b4 c0       	rjmp	.+360    	; 0xc90 <vfprintf+0x390>
 b28:	80 37       	cpi	r24, 0x70	; 112
 b2a:	19 f0       	breq	.+6      	; 0xb32 <vfprintf+0x232>
 b2c:	88 37       	cpi	r24, 0x78	; 120
 b2e:	21 f0       	breq	.+8      	; 0xb38 <vfprintf+0x238>
 b30:	af c0       	rjmp	.+350    	; 0xc90 <vfprintf+0x390>
 b32:	2f 2f       	mov	r18, r31
 b34:	20 61       	ori	r18, 0x10	; 16
 b36:	b2 2e       	mov	r11, r18
 b38:	b4 fe       	sbrs	r11, 4
 b3a:	0d c0       	rjmp	.+26     	; 0xb56 <vfprintf+0x256>
 b3c:	8b 2d       	mov	r24, r11
 b3e:	84 60       	ori	r24, 0x04	; 4
 b40:	b8 2e       	mov	r11, r24
 b42:	09 c0       	rjmp	.+18     	; 0xb56 <vfprintf+0x256>
 b44:	24 ff       	sbrs	r18, 4
 b46:	0a c0       	rjmp	.+20     	; 0xb5c <vfprintf+0x25c>
 b48:	9f 2f       	mov	r25, r31
 b4a:	96 60       	ori	r25, 0x06	; 6
 b4c:	b9 2e       	mov	r11, r25
 b4e:	06 c0       	rjmp	.+12     	; 0xb5c <vfprintf+0x25c>
 b50:	28 e0       	ldi	r18, 0x08	; 8
 b52:	30 e0       	ldi	r19, 0x00	; 0
 b54:	05 c0       	rjmp	.+10     	; 0xb60 <vfprintf+0x260>
 b56:	20 e1       	ldi	r18, 0x10	; 16
 b58:	30 e0       	ldi	r19, 0x00	; 0
 b5a:	02 c0       	rjmp	.+4      	; 0xb60 <vfprintf+0x260>
 b5c:	20 e1       	ldi	r18, 0x10	; 16
 b5e:	32 e0       	ldi	r19, 0x02	; 2
 b60:	f8 01       	movw	r30, r16
 b62:	b7 fe       	sbrs	r11, 7
 b64:	07 c0       	rjmp	.+14     	; 0xb74 <vfprintf+0x274>
 b66:	60 81       	ld	r22, Z
 b68:	71 81       	ldd	r23, Z+1	; 0x01
 b6a:	82 81       	ldd	r24, Z+2	; 0x02
 b6c:	93 81       	ldd	r25, Z+3	; 0x03
 b6e:	0c 5f       	subi	r16, 0xFC	; 252
 b70:	1f 4f       	sbci	r17, 0xFF	; 255
 b72:	06 c0       	rjmp	.+12     	; 0xb80 <vfprintf+0x280>
 b74:	60 81       	ld	r22, Z
 b76:	71 81       	ldd	r23, Z+1	; 0x01
 b78:	80 e0       	ldi	r24, 0x00	; 0
 b7a:	90 e0       	ldi	r25, 0x00	; 0
 b7c:	0e 5f       	subi	r16, 0xFE	; 254
 b7e:	1f 4f       	sbci	r17, 0xFF	; 255
 b80:	a4 01       	movw	r20, r8
 b82:	0e 94 a0 06 	call	0xd40	; 0xd40 <__ultoa_invert>
 b86:	a8 2e       	mov	r10, r24
 b88:	a8 18       	sub	r10, r8
 b8a:	fb 2d       	mov	r31, r11
 b8c:	ff 77       	andi	r31, 0x7F	; 127
 b8e:	7f 2e       	mov	r7, r31
 b90:	76 fe       	sbrs	r7, 6
 b92:	0b c0       	rjmp	.+22     	; 0xbaa <vfprintf+0x2aa>
 b94:	37 2d       	mov	r19, r7
 b96:	3e 7f       	andi	r19, 0xFE	; 254
 b98:	a5 14       	cp	r10, r5
 b9a:	50 f4       	brcc	.+20     	; 0xbb0 <vfprintf+0x2b0>
 b9c:	74 fe       	sbrs	r7, 4
 b9e:	0a c0       	rjmp	.+20     	; 0xbb4 <vfprintf+0x2b4>
 ba0:	72 fc       	sbrc	r7, 2
 ba2:	08 c0       	rjmp	.+16     	; 0xbb4 <vfprintf+0x2b4>
 ba4:	37 2d       	mov	r19, r7
 ba6:	3e 7e       	andi	r19, 0xEE	; 238
 ba8:	05 c0       	rjmp	.+10     	; 0xbb4 <vfprintf+0x2b4>
 baa:	ba 2c       	mov	r11, r10
 bac:	37 2d       	mov	r19, r7
 bae:	03 c0       	rjmp	.+6      	; 0xbb6 <vfprintf+0x2b6>
 bb0:	ba 2c       	mov	r11, r10
 bb2:	01 c0       	rjmp	.+2      	; 0xbb6 <vfprintf+0x2b6>
 bb4:	b5 2c       	mov	r11, r5
 bb6:	34 ff       	sbrs	r19, 4
 bb8:	0d c0       	rjmp	.+26     	; 0xbd4 <vfprintf+0x2d4>
 bba:	fe 01       	movw	r30, r28
 bbc:	ea 0d       	add	r30, r10
 bbe:	f1 1d       	adc	r31, r1
 bc0:	80 81       	ld	r24, Z
 bc2:	80 33       	cpi	r24, 0x30	; 48
 bc4:	11 f4       	brne	.+4      	; 0xbca <vfprintf+0x2ca>
 bc6:	39 7e       	andi	r19, 0xE9	; 233
 bc8:	09 c0       	rjmp	.+18     	; 0xbdc <vfprintf+0x2dc>
 bca:	32 ff       	sbrs	r19, 2
 bcc:	06 c0       	rjmp	.+12     	; 0xbda <vfprintf+0x2da>
 bce:	b3 94       	inc	r11
 bd0:	b3 94       	inc	r11
 bd2:	04 c0       	rjmp	.+8      	; 0xbdc <vfprintf+0x2dc>
 bd4:	83 2f       	mov	r24, r19
 bd6:	86 78       	andi	r24, 0x86	; 134
 bd8:	09 f0       	breq	.+2      	; 0xbdc <vfprintf+0x2dc>
 bda:	b3 94       	inc	r11
 bdc:	33 fd       	sbrc	r19, 3
 bde:	13 c0       	rjmp	.+38     	; 0xc06 <vfprintf+0x306>
 be0:	30 ff       	sbrs	r19, 0
 be2:	06 c0       	rjmp	.+12     	; 0xbf0 <vfprintf+0x2f0>
 be4:	5a 2c       	mov	r5, r10
 be6:	b3 14       	cp	r11, r3
 be8:	18 f4       	brcc	.+6      	; 0xbf0 <vfprintf+0x2f0>
 bea:	53 0c       	add	r5, r3
 bec:	5b 18       	sub	r5, r11
 bee:	b3 2c       	mov	r11, r3
 bf0:	b3 14       	cp	r11, r3
 bf2:	68 f4       	brcc	.+26     	; 0xc0e <vfprintf+0x30e>
 bf4:	b7 01       	movw	r22, r14
 bf6:	80 e2       	ldi	r24, 0x20	; 32
 bf8:	90 e0       	ldi	r25, 0x00	; 0
 bfa:	3c 87       	std	Y+12, r19	; 0x0c
 bfc:	0e 94 68 06 	call	0xcd0	; 0xcd0 <fputc>
 c00:	b3 94       	inc	r11
 c02:	3c 85       	ldd	r19, Y+12	; 0x0c
 c04:	f5 cf       	rjmp	.-22     	; 0xbf0 <vfprintf+0x2f0>
 c06:	b3 14       	cp	r11, r3
 c08:	10 f4       	brcc	.+4      	; 0xc0e <vfprintf+0x30e>
 c0a:	3b 18       	sub	r3, r11
 c0c:	01 c0       	rjmp	.+2      	; 0xc10 <vfprintf+0x310>
 c0e:	31 2c       	mov	r3, r1
 c10:	34 ff       	sbrs	r19, 4
 c12:	12 c0       	rjmp	.+36     	; 0xc38 <vfprintf+0x338>
 c14:	b7 01       	movw	r22, r14
 c16:	80 e3       	ldi	r24, 0x30	; 48
 c18:	90 e0       	ldi	r25, 0x00	; 0
 c1a:	3c 87       	std	Y+12, r19	; 0x0c
 c1c:	0e 94 68 06 	call	0xcd0	; 0xcd0 <fputc>
 c20:	3c 85       	ldd	r19, Y+12	; 0x0c
 c22:	32 ff       	sbrs	r19, 2
 c24:	17 c0       	rjmp	.+46     	; 0xc54 <vfprintf+0x354>
 c26:	31 fd       	sbrc	r19, 1
 c28:	03 c0       	rjmp	.+6      	; 0xc30 <vfprintf+0x330>
 c2a:	88 e7       	ldi	r24, 0x78	; 120
 c2c:	90 e0       	ldi	r25, 0x00	; 0
 c2e:	02 c0       	rjmp	.+4      	; 0xc34 <vfprintf+0x334>
 c30:	88 e5       	ldi	r24, 0x58	; 88
 c32:	90 e0       	ldi	r25, 0x00	; 0
 c34:	b7 01       	movw	r22, r14
 c36:	0c c0       	rjmp	.+24     	; 0xc50 <vfprintf+0x350>
 c38:	83 2f       	mov	r24, r19
 c3a:	86 78       	andi	r24, 0x86	; 134
 c3c:	59 f0       	breq	.+22     	; 0xc54 <vfprintf+0x354>
 c3e:	31 ff       	sbrs	r19, 1
 c40:	02 c0       	rjmp	.+4      	; 0xc46 <vfprintf+0x346>
 c42:	8b e2       	ldi	r24, 0x2B	; 43
 c44:	01 c0       	rjmp	.+2      	; 0xc48 <vfprintf+0x348>
 c46:	80 e2       	ldi	r24, 0x20	; 32
 c48:	37 fd       	sbrc	r19, 7
 c4a:	8d e2       	ldi	r24, 0x2D	; 45
 c4c:	b7 01       	movw	r22, r14
 c4e:	90 e0       	ldi	r25, 0x00	; 0
 c50:	0e 94 68 06 	call	0xcd0	; 0xcd0 <fputc>
 c54:	a5 14       	cp	r10, r5
 c56:	38 f4       	brcc	.+14     	; 0xc66 <vfprintf+0x366>
 c58:	b7 01       	movw	r22, r14
 c5a:	80 e3       	ldi	r24, 0x30	; 48
 c5c:	90 e0       	ldi	r25, 0x00	; 0
 c5e:	0e 94 68 06 	call	0xcd0	; 0xcd0 <fputc>
 c62:	5a 94       	dec	r5
 c64:	f7 cf       	rjmp	.-18     	; 0xc54 <vfprintf+0x354>
 c66:	aa 94       	dec	r10
 c68:	f4 01       	movw	r30, r8
 c6a:	ea 0d       	add	r30, r10
 c6c:	f1 1d       	adc	r31, r1
 c6e:	80 81       	ld	r24, Z
 c70:	b7 01       	movw	r22, r14
 c72:	90 e0       	ldi	r25, 0x00	; 0
 c74:	0e 94 68 06 	call	0xcd0	; 0xcd0 <fputc>
 c78:	a1 10       	cpse	r10, r1
 c7a:	f5 cf       	rjmp	.-22     	; 0xc66 <vfprintf+0x366>
 c7c:	33 20       	and	r3, r3
 c7e:	09 f4       	brne	.+2      	; 0xc82 <vfprintf+0x382>
 c80:	51 ce       	rjmp	.-862    	; 0x924 <vfprintf+0x24>
 c82:	b7 01       	movw	r22, r14
 c84:	80 e2       	ldi	r24, 0x20	; 32
 c86:	90 e0       	ldi	r25, 0x00	; 0
 c88:	0e 94 68 06 	call	0xcd0	; 0xcd0 <fputc>
 c8c:	3a 94       	dec	r3
 c8e:	f6 cf       	rjmp	.-20     	; 0xc7c <vfprintf+0x37c>
 c90:	f7 01       	movw	r30, r14
 c92:	86 81       	ldd	r24, Z+6	; 0x06
 c94:	97 81       	ldd	r25, Z+7	; 0x07
 c96:	02 c0       	rjmp	.+4      	; 0xc9c <vfprintf+0x39c>
 c98:	8f ef       	ldi	r24, 0xFF	; 255
 c9a:	9f ef       	ldi	r25, 0xFF	; 255
 c9c:	2c 96       	adiw	r28, 0x0c	; 12
 c9e:	e2 e1       	ldi	r30, 0x12	; 18
 ca0:	0c 94 1a 07 	jmp	0xe34	; 0xe34 <__epilogue_restores__>

00000ca4 <strnlen_P>:
 ca4:	fc 01       	movw	r30, r24
 ca6:	05 90       	lpm	r0, Z+
 ca8:	61 50       	subi	r22, 0x01	; 1
 caa:	70 40       	sbci	r23, 0x00	; 0
 cac:	01 10       	cpse	r0, r1
 cae:	d8 f7       	brcc	.-10     	; 0xca6 <strnlen_P+0x2>
 cb0:	80 95       	com	r24
 cb2:	90 95       	com	r25
 cb4:	8e 0f       	add	r24, r30
 cb6:	9f 1f       	adc	r25, r31
 cb8:	08 95       	ret

00000cba <strnlen>:
 cba:	fc 01       	movw	r30, r24
 cbc:	61 50       	subi	r22, 0x01	; 1
 cbe:	70 40       	sbci	r23, 0x00	; 0
 cc0:	01 90       	ld	r0, Z+
 cc2:	01 10       	cpse	r0, r1
 cc4:	d8 f7       	brcc	.-10     	; 0xcbc <strnlen+0x2>
 cc6:	80 95       	com	r24
 cc8:	90 95       	com	r25
 cca:	8e 0f       	add	r24, r30
 ccc:	9f 1f       	adc	r25, r31
 cce:	08 95       	ret

00000cd0 <fputc>:
 cd0:	0f 93       	push	r16
 cd2:	1f 93       	push	r17
 cd4:	cf 93       	push	r28
 cd6:	df 93       	push	r29
 cd8:	fb 01       	movw	r30, r22
 cda:	23 81       	ldd	r18, Z+3	; 0x03
 cdc:	21 fd       	sbrc	r18, 1
 cde:	03 c0       	rjmp	.+6      	; 0xce6 <fputc+0x16>
 ce0:	8f ef       	ldi	r24, 0xFF	; 255
 ce2:	9f ef       	ldi	r25, 0xFF	; 255
 ce4:	28 c0       	rjmp	.+80     	; 0xd36 <fputc+0x66>
 ce6:	22 ff       	sbrs	r18, 2
 ce8:	16 c0       	rjmp	.+44     	; 0xd16 <fputc+0x46>
 cea:	46 81       	ldd	r20, Z+6	; 0x06
 cec:	57 81       	ldd	r21, Z+7	; 0x07
 cee:	24 81       	ldd	r18, Z+4	; 0x04
 cf0:	35 81       	ldd	r19, Z+5	; 0x05
 cf2:	42 17       	cp	r20, r18
 cf4:	53 07       	cpc	r21, r19
 cf6:	44 f4       	brge	.+16     	; 0xd08 <fputc+0x38>
 cf8:	a0 81       	ld	r26, Z
 cfa:	b1 81       	ldd	r27, Z+1	; 0x01
 cfc:	9d 01       	movw	r18, r26
 cfe:	2f 5f       	subi	r18, 0xFF	; 255
 d00:	3f 4f       	sbci	r19, 0xFF	; 255
 d02:	31 83       	std	Z+1, r19	; 0x01
 d04:	20 83       	st	Z, r18
 d06:	8c 93       	st	X, r24
 d08:	26 81       	ldd	r18, Z+6	; 0x06
 d0a:	37 81       	ldd	r19, Z+7	; 0x07
 d0c:	2f 5f       	subi	r18, 0xFF	; 255
 d0e:	3f 4f       	sbci	r19, 0xFF	; 255
 d10:	37 83       	std	Z+7, r19	; 0x07
 d12:	26 83       	std	Z+6, r18	; 0x06
 d14:	10 c0       	rjmp	.+32     	; 0xd36 <fputc+0x66>
 d16:	eb 01       	movw	r28, r22
 d18:	09 2f       	mov	r16, r25
 d1a:	18 2f       	mov	r17, r24
 d1c:	00 84       	ldd	r0, Z+8	; 0x08
 d1e:	f1 85       	ldd	r31, Z+9	; 0x09
 d20:	e0 2d       	mov	r30, r0
 d22:	09 95       	icall
 d24:	89 2b       	or	r24, r25
 d26:	e1 f6       	brne	.-72     	; 0xce0 <fputc+0x10>
 d28:	8e 81       	ldd	r24, Y+6	; 0x06
 d2a:	9f 81       	ldd	r25, Y+7	; 0x07
 d2c:	01 96       	adiw	r24, 0x01	; 1
 d2e:	9f 83       	std	Y+7, r25	; 0x07
 d30:	8e 83       	std	Y+6, r24	; 0x06
 d32:	81 2f       	mov	r24, r17
 d34:	90 2f       	mov	r25, r16
 d36:	df 91       	pop	r29
 d38:	cf 91       	pop	r28
 d3a:	1f 91       	pop	r17
 d3c:	0f 91       	pop	r16
 d3e:	08 95       	ret

00000d40 <__ultoa_invert>:
 d40:	fa 01       	movw	r30, r20
 d42:	aa 27       	eor	r26, r26
 d44:	28 30       	cpi	r18, 0x08	; 8
 d46:	51 f1       	breq	.+84     	; 0xd9c <__ultoa_invert+0x5c>
 d48:	20 31       	cpi	r18, 0x10	; 16
 d4a:	81 f1       	breq	.+96     	; 0xdac <__ultoa_invert+0x6c>
 d4c:	e8 94       	clt
 d4e:	6f 93       	push	r22
 d50:	6e 7f       	andi	r22, 0xFE	; 254
 d52:	6e 5f       	subi	r22, 0xFE	; 254
 d54:	7f 4f       	sbci	r23, 0xFF	; 255
 d56:	8f 4f       	sbci	r24, 0xFF	; 255
 d58:	9f 4f       	sbci	r25, 0xFF	; 255
 d5a:	af 4f       	sbci	r26, 0xFF	; 255
 d5c:	b1 e0       	ldi	r27, 0x01	; 1
 d5e:	3e d0       	rcall	.+124    	; 0xddc <__ultoa_invert+0x9c>
 d60:	b4 e0       	ldi	r27, 0x04	; 4
 d62:	3c d0       	rcall	.+120    	; 0xddc <__ultoa_invert+0x9c>
 d64:	67 0f       	add	r22, r23
 d66:	78 1f       	adc	r23, r24
 d68:	89 1f       	adc	r24, r25
 d6a:	9a 1f       	adc	r25, r26
 d6c:	a1 1d       	adc	r26, r1
 d6e:	68 0f       	add	r22, r24
 d70:	79 1f       	adc	r23, r25
 d72:	8a 1f       	adc	r24, r26
 d74:	91 1d       	adc	r25, r1
 d76:	a1 1d       	adc	r26, r1
 d78:	6a 0f       	add	r22, r26
 d7a:	71 1d       	adc	r23, r1
 d7c:	81 1d       	adc	r24, r1
 d7e:	91 1d       	adc	r25, r1
 d80:	a1 1d       	adc	r26, r1
 d82:	20 d0       	rcall	.+64     	; 0xdc4 <__ultoa_invert+0x84>
 d84:	09 f4       	brne	.+2      	; 0xd88 <__ultoa_invert+0x48>
 d86:	68 94       	set
 d88:	3f 91       	pop	r19
 d8a:	2a e0       	ldi	r18, 0x0A	; 10
 d8c:	26 9f       	mul	r18, r22
 d8e:	11 24       	eor	r1, r1
 d90:	30 19       	sub	r19, r0
 d92:	30 5d       	subi	r19, 0xD0	; 208
 d94:	31 93       	st	Z+, r19
 d96:	de f6       	brtc	.-74     	; 0xd4e <__ultoa_invert+0xe>
 d98:	cf 01       	movw	r24, r30
 d9a:	08 95       	ret
 d9c:	46 2f       	mov	r20, r22
 d9e:	47 70       	andi	r20, 0x07	; 7
 da0:	40 5d       	subi	r20, 0xD0	; 208
 da2:	41 93       	st	Z+, r20
 da4:	b3 e0       	ldi	r27, 0x03	; 3
 da6:	0f d0       	rcall	.+30     	; 0xdc6 <__ultoa_invert+0x86>
 da8:	c9 f7       	brne	.-14     	; 0xd9c <__ultoa_invert+0x5c>
 daa:	f6 cf       	rjmp	.-20     	; 0xd98 <__ultoa_invert+0x58>
 dac:	46 2f       	mov	r20, r22
 dae:	4f 70       	andi	r20, 0x0F	; 15
 db0:	40 5d       	subi	r20, 0xD0	; 208
 db2:	4a 33       	cpi	r20, 0x3A	; 58
 db4:	18 f0       	brcs	.+6      	; 0xdbc <__ultoa_invert+0x7c>
 db6:	49 5d       	subi	r20, 0xD9	; 217
 db8:	31 fd       	sbrc	r19, 1
 dba:	40 52       	subi	r20, 0x20	; 32
 dbc:	41 93       	st	Z+, r20
 dbe:	02 d0       	rcall	.+4      	; 0xdc4 <__ultoa_invert+0x84>
 dc0:	a9 f7       	brne	.-22     	; 0xdac <__ultoa_invert+0x6c>
 dc2:	ea cf       	rjmp	.-44     	; 0xd98 <__ultoa_invert+0x58>
 dc4:	b4 e0       	ldi	r27, 0x04	; 4
 dc6:	a6 95       	lsr	r26
 dc8:	97 95       	ror	r25
 dca:	87 95       	ror	r24
 dcc:	77 95       	ror	r23
 dce:	67 95       	ror	r22
 dd0:	ba 95       	dec	r27
 dd2:	c9 f7       	brne	.-14     	; 0xdc6 <__ultoa_invert+0x86>
 dd4:	00 97       	sbiw	r24, 0x00	; 0
 dd6:	61 05       	cpc	r22, r1
 dd8:	71 05       	cpc	r23, r1
 dda:	08 95       	ret
 ddc:	9b 01       	movw	r18, r22
 dde:	ac 01       	movw	r20, r24
 de0:	0a 2e       	mov	r0, r26
 de2:	06 94       	lsr	r0
 de4:	57 95       	ror	r21
 de6:	47 95       	ror	r20
 de8:	37 95       	ror	r19
 dea:	27 95       	ror	r18
 dec:	ba 95       	dec	r27
 dee:	c9 f7       	brne	.-14     	; 0xde2 <__ultoa_invert+0xa2>
 df0:	62 0f       	add	r22, r18
 df2:	73 1f       	adc	r23, r19
 df4:	84 1f       	adc	r24, r20
 df6:	95 1f       	adc	r25, r21
 df8:	a0 1d       	adc	r26, r0
 dfa:	08 95       	ret

00000dfc <__prologue_saves__>:
 dfc:	2f 92       	push	r2
 dfe:	3f 92       	push	r3
 e00:	4f 92       	push	r4
 e02:	5f 92       	push	r5
 e04:	6f 92       	push	r6
 e06:	7f 92       	push	r7
 e08:	8f 92       	push	r8
 e0a:	9f 92       	push	r9
 e0c:	af 92       	push	r10
 e0e:	bf 92       	push	r11
 e10:	cf 92       	push	r12
 e12:	df 92       	push	r13
 e14:	ef 92       	push	r14
 e16:	ff 92       	push	r15
 e18:	0f 93       	push	r16
 e1a:	1f 93       	push	r17
 e1c:	cf 93       	push	r28
 e1e:	df 93       	push	r29
 e20:	cd b7       	in	r28, 0x3d	; 61
 e22:	de b7       	in	r29, 0x3e	; 62
 e24:	ca 1b       	sub	r28, r26
 e26:	db 0b       	sbc	r29, r27
 e28:	0f b6       	in	r0, 0x3f	; 63
 e2a:	f8 94       	cli
 e2c:	de bf       	out	0x3e, r29	; 62
 e2e:	0f be       	out	0x3f, r0	; 63
 e30:	cd bf       	out	0x3d, r28	; 61
 e32:	09 94       	ijmp

00000e34 <__epilogue_restores__>:
 e34:	2a 88       	ldd	r2, Y+18	; 0x12
 e36:	39 88       	ldd	r3, Y+17	; 0x11
 e38:	48 88       	ldd	r4, Y+16	; 0x10
 e3a:	5f 84       	ldd	r5, Y+15	; 0x0f
 e3c:	6e 84       	ldd	r6, Y+14	; 0x0e
 e3e:	7d 84       	ldd	r7, Y+13	; 0x0d
 e40:	8c 84       	ldd	r8, Y+12	; 0x0c
 e42:	9b 84       	ldd	r9, Y+11	; 0x0b
 e44:	aa 84       	ldd	r10, Y+10	; 0x0a
 e46:	b9 84       	ldd	r11, Y+9	; 0x09
 e48:	c8 84       	ldd	r12, Y+8	; 0x08
 e4a:	df 80       	ldd	r13, Y+7	; 0x07
 e4c:	ee 80       	ldd	r14, Y+6	; 0x06
 e4e:	fd 80       	ldd	r15, Y+5	; 0x05
 e50:	0c 81       	ldd	r16, Y+4	; 0x04
 e52:	1b 81       	ldd	r17, Y+3	; 0x03
 e54:	aa 81       	ldd	r26, Y+2	; 0x02
 e56:	b9 81       	ldd	r27, Y+1	; 0x01
 e58:	ce 0f       	add	r28, r30
 e5a:	d1 1d       	adc	r29, r1
 e5c:	0f b6       	in	r0, 0x3f	; 63
 e5e:	f8 94       	cli
 e60:	de bf       	out	0x3e, r29	; 62
 e62:	0f be       	out	0x3f, r0	; 63
 e64:	cd bf       	out	0x3d, r28	; 61
 e66:	ed 01       	movw	r28, r26
 e68:	08 95       	ret

00000e6a <_exit>:
 e6a:	f8 94       	cli

00000e6c <__stop_program>:
 e6c:	ff cf       	rjmp	.-2      	; 0xe6c <__stop_program>
