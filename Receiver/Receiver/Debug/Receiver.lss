
Receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000bc  00800100  00000f1c  00000fb0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014f  008001bc  008001bc  0000106c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000106c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001108  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000142c  00000000  00000000  00001250  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000884  00000000  00000000  0000267c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d6a  00000000  00000000  00002f00  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  00003c6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004a6  00000000  00000000  00003fac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ab8  00000000  00000000  00004452  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004f0a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 c3 02 	jmp	0x586	; 0x586 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 f1 01 	jmp	0x3e2	; 0x3e2 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 fc 03 	jmp	0x7f8	; 0x7f8 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e1       	ldi	r30, 0x1C	; 28
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 3b       	cpi	r26, 0xBC	; 188
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	ac eb       	ldi	r26, 0xBC	; 188
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 30       	cpi	r26, 0x0B	; 11
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 95 01 	call	0x32a	; 0x32a <main>
  9e:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ESP_AT>:
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
	ESP_Response.ERROR = 0;
	ESP_Response.INPUT = 0;
  a6:	84 e1       	ldi	r24, 0x14	; 20
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	0e 94 ed 03 	call	0x7da	; 0x7da <UART_SendString>
  ae:	08 95       	ret

000000b0 <WaitForResponse>:
}
void WaitForResponse(void)
{
	while(ESP_Response.OK == 0 &&
  b0:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
  b4:	80 fd       	sbrc	r24, 0
  b6:	08 c0       	rjmp	.+16     	; 0xc8 <WaitForResponse+0x18>
		  ESP_Response.ERROR == 0 &&
  b8:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
	ESP_Response.ERROR = 0;
	ESP_Response.INPUT = 0;
}
void WaitForResponse(void)
{
	while(ESP_Response.OK == 0 &&
  bc:	81 fd       	sbrc	r24, 1
  be:	04 c0       	rjmp	.+8      	; 0xc8 <WaitForResponse+0x18>
		  ESP_Response.ERROR == 0 &&
		  ESP_Response.INPUT == 0);
  c0:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
	ESP_Response.INPUT = 0;
}
void WaitForResponse(void)
{
	while(ESP_Response.OK == 0 &&
		  ESP_Response.ERROR == 0 &&
  c4:	82 ff       	sbrs	r24, 2
  c6:	f4 cf       	rjmp	.-24     	; 0xb0 <WaitForResponse>
  c8:	08 95       	ret

000000ca <ESP_Initialize>:
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
  ca:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ESP_Response>
	ESP_Response.ERROR = 0;
  d4:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
  d8:	8d 7f       	andi	r24, 0xFD	; 253
  da:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ESP_Response>
	ESP_Response.INPUT = 0;
  de:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
  e2:	8b 7f       	andi	r24, 0xFB	; 251
  e4:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ESP_Response>
/************************************************************************/
uint8_t ESP_Initialize(void)
{
	/*--- Checking communication between microcontroller and ESP ---*/
	ResetResponse();
	bufferIndex = 0;
  e8:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <bufferIndex>
	ESP_AT();
  ec:	0e 94 53 00 	call	0xa6	; 0xa6 <ESP_AT>
	WaitForResponse();
  f0:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
  f4:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
  f8:	8e 7f       	andi	r24, 0xFE	; 254
  fa:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ESP_Response>
	ESP_Response.ERROR = 0;
  fe:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
 102:	8d 7f       	andi	r24, 0xFD	; 253
 104:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ESP_Response>
	ESP_Response.INPUT = 0;
 108:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
 10c:	8b 7f       	andi	r24, 0xFB	; 251
 10e:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ESP_Response>

	/*--- ECHO ---*/
#if ESP_ECHO == 0
	UART_SendString("ATE0\r\n");
#else
	UART_SendString("ATE1\r\n");
 112:	82 e2       	ldi	r24, 0x22	; 34
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	0e 94 ed 03 	call	0x7da	; 0x7da <UART_SendString>
#endif
	WaitForResponse();
 11a:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
 11e:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
 122:	8e 7f       	andi	r24, 0xFE	; 254
 124:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ESP_Response>
	ESP_Response.ERROR = 0;
 128:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
 12c:	8d 7f       	andi	r24, 0xFD	; 253
 12e:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ESP_Response>
	ESP_Response.INPUT = 0;
 132:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
 136:	8b 7f       	andi	r24, 0xFB	; 251
 138:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ESP_Response>
	WaitForResponse();
	ResetResponse();

	/*--- MODE ---*/
#if ESP_WIFIMODE == 1
	UART_SendString("AT+CWMODE=1\r\n"); //STATION MODE
 13c:	89 e2       	ldi	r24, 0x29	; 41
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	0e 94 ed 03 	call	0x7da	; 0x7da <UART_SendString>
#elif ESP_WIFIMODE == 2
	UART_SendString("AT+CWMODE=2\r\n"); //ACCESS POINT MODE
#elif ESP_WIFIMODE == 3
	UART_SendString("AT+CWMODE=3\r\n"); //STATON + ACCESS POINT MODE
#endif
	WaitForResponse();
 144:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
 148:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
 14c:	8e 7f       	andi	r24, 0xFE	; 254
 14e:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ESP_Response>
	ESP_Response.ERROR = 0;
 152:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
 156:	8d 7f       	andi	r24, 0xFD	; 253
 158:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ESP_Response>
	ESP_Response.INPUT = 0;
 15c:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
 160:	8b 7f       	andi	r24, 0xFB	; 251
 162:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ESP_Response>
	WaitForResponse();
	ResetResponse();

	/*--- CONNECTING TO WIFI ---*/
#if ESP_WIFIMODE == 1 || ESP_WIFIMODE  == 3
	ESP_Response.ERROR = 0;
 166:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
 16a:	8d 7f       	andi	r24, 0xFD	; 253
 16c:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ESP_Response>
	
	UART_SendString("AT+CWJAP=\"");
 170:	87 e3       	ldi	r24, 0x37	; 55
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	0e 94 ed 03 	call	0x7da	; 0x7da <UART_SendString>
	UART_SendString(ESP_APNAME);
 178:	85 e4       	ldi	r24, 0x45	; 69
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	0e 94 ed 03 	call	0x7da	; 0x7da <UART_SendString>
	UART_SendString("\",\"");
 180:	84 e6       	ldi	r24, 0x64	; 100
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	0e 94 ed 03 	call	0x7da	; 0x7da <UART_SendString>
	UART_SendString(ESP_APPASSWORD);
 188:	85 e4       	ldi	r24, 0x45	; 69
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	0e 94 ed 03 	call	0x7da	; 0x7da <UART_SendString>
	UART_SendString("\"\r\n");
 190:	82 e4       	ldi	r24, 0x42	; 66
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	0e 94 ed 03 	call	0x7da	; 0x7da <UART_SendString>
	WaitForResponse();
 198:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	if(ESP_Response.ERROR == 1)
 19c:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
 1a0:	81 ff       	sbrs	r24, 1
 1a2:	07 c0       	rjmp	.+14     	; 0x1b2 <ESP_Initialize+0xe8>
	{
		ESP_Response.ERROR = 0;
 1a4:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
 1a8:	8d 7f       	andi	r24, 0xFD	; 253
 1aa:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ESP_Response>
		return 2;
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	08 95       	ret
	}
	else
	{
		ESP_Response.OK = 0;
 1b2:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
 1b6:	8e 7f       	andi	r24, 0xFE	; 254
 1b8:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ESP_Response>
	WaitForResponse();
	ResetResponse();

#endif /* ESP_WIFIMODE == 2 || ESP_WIFIMODE == 3 */
#if ESP_CONNECTIONTYPE == 1 //UDP
	UART_SendString("AT+CIPMUX=0\r\n");
 1bc:	86 e4       	ldi	r24, 0x46	; 70
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	0e 94 ed 03 	call	0x7da	; 0x7da <UART_SendString>
	WaitForResponse();
 1c4:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
 1c8:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
 1cc:	8e 7f       	andi	r24, 0xFE	; 254
 1ce:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ESP_Response>
	ESP_Response.ERROR = 0;
 1d2:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
 1d6:	8d 7f       	andi	r24, 0xFD	; 253
 1d8:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ESP_Response>
	ESP_Response.INPUT = 0;
 1dc:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
 1e0:	8b 7f       	andi	r24, 0xFB	; 251
 1e2:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ESP_Response>
#endif /* ESP_WIFIMODE == 2 || ESP_WIFIMODE == 3 */
#if ESP_CONNECTIONTYPE == 1 //UDP
	UART_SendString("AT+CIPMUX=0\r\n");
	WaitForResponse();
	ResetResponse();
	UART_SendString("AT+CIPSTART=\"UDP\",\"");
 1e6:	84 e5       	ldi	r24, 0x54	; 84
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	0e 94 ed 03 	call	0x7da	; 0x7da <UART_SendString>
	UART_SendString(ESP_IP);
 1ee:	88 e6       	ldi	r24, 0x68	; 104
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 ed 03 	call	0x7da	; 0x7da <UART_SendString>
	UART_SendString("\",");
 1f6:	86 e7       	ldi	r24, 0x76	; 118
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	0e 94 ed 03 	call	0x7da	; 0x7da <UART_SendString>
	UART_SendString(ESP_PORT);
 1fe:	89 e7       	ldi	r24, 0x79	; 121
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	0e 94 ed 03 	call	0x7da	; 0x7da <UART_SendString>
	UART_SendString("\r\n");
 206:	83 e4       	ldi	r24, 0x43	; 67
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	0e 94 ed 03 	call	0x7da	; 0x7da <UART_SendString>
	WaitForResponse();
 20e:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	if(ESP_Response.ERROR)
 212:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
 216:	81 ff       	sbrs	r24, 1
 218:	11 c0       	rjmp	.+34     	; 0x23c <ESP_Initialize+0x172>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
 21a:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
 21e:	8e 7f       	andi	r24, 0xFE	; 254
 220:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ESP_Response>
	ESP_Response.ERROR = 0;
 224:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
 228:	8d 7f       	andi	r24, 0xFD	; 253
 22a:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ESP_Response>
	ESP_Response.INPUT = 0;
 22e:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
 232:	8b 7f       	andi	r24, 0xFB	; 251
 234:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ESP_Response>
	UART_SendString("\r\n");
	WaitForResponse();
	if(ESP_Response.ERROR)
	{
		ResetResponse();
		return 1;
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	08 95       	ret
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
 23c:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
 240:	8e 7f       	andi	r24, 0xFE	; 254
 242:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ESP_Response>
	ESP_Response.ERROR = 0;
 246:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
 24a:	8d 7f       	andi	r24, 0xFD	; 253
 24c:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ESP_Response>
	ESP_Response.INPUT = 0;
 250:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
 254:	8b 7f       	andi	r24, 0xFB	; 251
 256:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ESP_Response>
#else
	UART_SendString("AT+CIPDINFO=1\r\n");
	WaitForResponse();
	ResetResponse();
#endif
	return 0;
 25a:	80 e0       	ldi	r24, 0x00	; 0
}
 25c:	08 95       	ret

0000025e <ESP_Send>:
}
/************************************************************************/
/*                               SENDING                                */
/************************************************************************/
uint8_t ESP_Send(char* data, char* connectionID)
{
 25e:	ef 92       	push	r14
 260:	ff 92       	push	r15
 262:	0f 93       	push	r16
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	00 d0       	rcall	.+0      	; 0x26c <ESP_Send+0xe>
 26c:	00 d0       	rcall	.+0      	; 0x26e <ESP_Send+0x10>
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
 272:	8c 01       	movw	r16, r24
#if ESP_CONNECTIONTYPE == 2
	if(ESP_Connections == 0) //If there are no connections...
		return 1; //Return 1 - error
#endif
	//Length of data
	uint16_t size = strlen(data);
 274:	fc 01       	movw	r30, r24
 276:	01 90       	ld	r0, Z+
 278:	00 20       	and	r0, r0
 27a:	e9 f7       	brne	.-6      	; 0x276 <ESP_Send+0x18>
 27c:	31 97       	sbiw	r30, 0x01	; 1
 27e:	e8 1b       	sub	r30, r24
 280:	f9 0b       	sbc	r31, r25
	char length[4];
	sprintf(length, "%d", size);
 282:	ff 93       	push	r31
 284:	ef 93       	push	r30
 286:	8e e7       	ldi	r24, 0x7E	; 126
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	9f 93       	push	r25
 28c:	8f 93       	push	r24
 28e:	ce 01       	movw	r24, r28
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	7c 01       	movw	r14, r24
 294:	9f 93       	push	r25
 296:	8f 93       	push	r24
 298:	0e 94 b4 04 	call	0x968	; 0x968 <sprintf>

	UART_SendString("AT+CIPSEND=");
 29c:	81 e8       	ldi	r24, 0x81	; 129
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	0e 94 ed 03 	call	0x7da	; 0x7da <UART_SendString>
#if ESP_CONNECTIONTYPE == 2
	UART_SendString(connectionID);
	UART_SendString(",");
#endif
	UART_SendString(length);
 2a4:	c7 01       	movw	r24, r14
 2a6:	0e 94 ed 03 	call	0x7da	; 0x7da <UART_SendString>
	UART_SendString("\r\n");
 2aa:	83 e4       	ldi	r24, 0x43	; 67
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	0e 94 ed 03 	call	0x7da	; 0x7da <UART_SendString>
	while(!ESP_Response.INPUT && !ESP_Response.ERROR);
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	0f 90       	pop	r0
 2ba:	0f 90       	pop	r0
 2bc:	0f 90       	pop	r0
 2be:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <ESP_Response>
 2c2:	92 fd       	sbrc	r25, 2
 2c4:	04 c0       	rjmp	.+8      	; 0x2ce <ESP_Send+0x70>
 2c6:	90 91 be 01 	lds	r25, 0x01BE	; 0x8001be <ESP_Response>
 2ca:	91 ff       	sbrs	r25, 1
 2cc:	f8 cf       	rjmp	.-16     	; 0x2be <ESP_Send+0x60>
	if(ESP_Response.INPUT == 1)
 2ce:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
 2d2:	82 ff       	sbrs	r24, 2
 2d4:	04 c0       	rjmp	.+8      	; 0x2de <ESP_Send+0x80>
	{
		UART_SendString(data);
 2d6:	c8 01       	movw	r24, r16
 2d8:	0e 94 ed 03 	call	0x7da	; 0x7da <UART_SendString>
 2dc:	0b c0       	rjmp	.+22     	; 0x2f4 <ESP_Send+0x96>
	}
	else if(ESP_Response.ERROR) 
 2de:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
 2e2:	81 ff       	sbrs	r24, 1
 2e4:	07 c0       	rjmp	.+14     	; 0x2f4 <ESP_Send+0x96>
	{
		ESP_Response.ERROR = 0;
 2e6:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
 2ea:	8d 7f       	andi	r24, 0xFD	; 253
 2ec:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ESP_Response>
		return 1;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	10 c0       	rjmp	.+32     	; 0x314 <ESP_Send+0xb6>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
 2f4:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
 2f8:	8e 7f       	andi	r24, 0xFE	; 254
 2fa:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ESP_Response>
	ESP_Response.ERROR = 0;
 2fe:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
 302:	8d 7f       	andi	r24, 0xFD	; 253
 304:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ESP_Response>
	ESP_Response.INPUT = 0;
 308:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
 30c:	8b 7f       	andi	r24, 0xFB	; 251
 30e:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ESP_Response>
#if ESP_CONNECTIONTYPE == 2
	UART_SendString("AT+CIPCLOSE=0\r\n");
	WaitForResponse();
#endif
	ResetResponse();
	return 0;
 312:	80 e0       	ldi	r24, 0x00	; 0
}
 314:	0f 90       	pop	r0
 316:	0f 90       	pop	r0
 318:	0f 90       	pop	r0
 31a:	0f 90       	pop	r0
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	1f 91       	pop	r17
 322:	0f 91       	pop	r16
 324:	ff 90       	pop	r15
 326:	ef 90       	pop	r14
 328:	08 95       	ret

0000032a <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 32a:	2f ef       	ldi	r18, 0xFF	; 255
 32c:	8f e7       	ldi	r24, 0x7F	; 127
 32e:	94 e0       	ldi	r25, 0x04	; 4
 330:	21 50       	subi	r18, 0x01	; 1
 332:	80 40       	sbci	r24, 0x00	; 0
 334:	90 40       	sbci	r25, 0x00	; 0
 336:	e1 f7       	brne	.-8      	; 0x330 <main+0x6>
 338:	00 c0       	rjmp	.+0      	; 0x33a <main+0x10>
 33a:	00 00       	nop
char crcErrorMsg[] = "CRC(CHECKSUM) ERROR";
int main(void)
{
	_delay_ms(100);
	// --- LED --- //
	DDRB = (1<<LED0);
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	84 b9       	out	0x04, r24	; 4

	// --- TIMER --- //
	TCCR1B = (1<<CS12) | (1<<CS10); // clk/1024 prescaler
 340:	95 e0       	ldi	r25, 0x05	; 5
 342:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 = (1<<TOIE1); //Overflow interrupt enable
 346:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

	// --- RF12 --- //
	RF_Initialize();
 34a:	0e 94 03 02 	call	0x406	; 0x406 <RF_Initialize>
	RF_SetRange(RANGE_433MHZ);
 34e:	80 e1       	ldi	r24, 0x10	; 16
 350:	0e 94 5e 02 	call	0x4bc	; 0x4bc <RF_SetRange>
	RF_SetFrequency(RFFREQ433(432.74));
 354:	88 ee       	ldi	r24, 0xE8	; 232
 356:	93 e0       	ldi	r25, 0x03	; 3
 358:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <RF_SetFrequency>
	RF_SetBaudRate(9600);
 35c:	80 e8       	ldi	r24, 0x80	; 128
 35e:	95 e2       	ldi	r25, 0x25	; 37
 360:	0e 94 8b 02 	call	0x516	; 0x516 <RF_SetBaudRate>
	RF_SetBandwith(RxBW200, LNA_6, RSSI_79);
 364:	44 e0       	ldi	r20, 0x04	; 4
 366:	61 e0       	ldi	r22, 0x01	; 1
 368:	84 e0       	ldi	r24, 0x04	; 4
 36a:	0e 94 64 02 	call	0x4c8	; 0x4c8 <RF_SetBandwith>
	RF_SetPower(PWRdB_0, TxBW120);
 36e:	67 e0       	ldi	r22, 0x07	; 7
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	0e 94 b6 02 	call	0x56c	; 0x56c <RF_SetPower>
	RF_DisableWakeUpTimer();
 376:	0e 94 b1 02 	call	0x562	; 0x562 <RF_DisableWakeUpTimer>
	RF_Transmit(0x0000);
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 2c 02 	call	0x458	; 0x458 <RF_Transmit>
	RF_Transmit(0xCC77);
 382:	87 e7       	ldi	r24, 0x77	; 119
 384:	9c ec       	ldi	r25, 0xCC	; 204
 386:	0e 94 2c 02 	call	0x458	; 0x458 <RF_Transmit>
	uint8_t ret = 0;

	sei();
 38a:	78 94       	sei

	// --- UART --- //
	UART_Initlialise(UBRR);
 38c:	87 e0       	ldi	r24, 0x07	; 7
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 da 03 	call	0x7b4	; 0x7b4 <UART_Initlialise>
	ESP_Initialize();
 394:	0e 94 65 00 	call	0xca	; 0xca <ESP_Initialize>

	// --- SLEEP AND POWER MANAGEMENT --- //
	PRR = (1<<PRTWI) | (1<<PRTIM2) | (1<<PRADC);
 398:	81 ec       	ldi	r24, 0xC1	; 193
 39a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>

	while (1)
	{
	// --- RF12 RECEIVING DATA --- //
#if RF_UseIRQ == 1
	if(!(RF_status.status & 0x07))
 39e:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <RF_status>
 3a2:	87 70       	andi	r24, 0x07	; 7
 3a4:	11 f4       	brne	.+4      	; 0x3aa <main+0x80>
	{
		RF_RxStart();
 3a6:	0e 94 49 03 	call	0x692	; 0x692 <RF_RxStart>
	}
	if(RF_status.New)
 3aa:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <RF_status>
 3ae:	82 ff       	sbrs	r24, 2
 3b0:	f6 cf       	rjmp	.-20     	; 0x39e <main+0x74>
	{
		ret = RF_RxFinish(data);
 3b2:	80 ec       	ldi	r24, 0xC0	; 192
 3b4:	91 e0       	ldi	r25, 0x01	; 1
 3b6:	0e 94 70 03 	call	0x6e0	; 0x6e0 <RF_RxFinish>

		if(data > 0 && ret < 254)
 3ba:	8e 3f       	cpi	r24, 0xFE	; 254
 3bc:	48 f4       	brcc	.+18     	; 0x3d0 <main+0xa6>
		{
			ESP_Send(data,0);
 3be:	60 e0       	ldi	r22, 0x00	; 0
 3c0:	70 e0       	ldi	r23, 0x00	; 0
 3c2:	80 ec       	ldi	r24, 0xC0	; 192
 3c4:	91 e0       	ldi	r25, 0x01	; 1
 3c6:	0e 94 2f 01 	call	0x25e	; 0x25e <ESP_Send>
			data[16] = 0;
 3ca:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <data+0x10>
 3ce:	e7 cf       	rjmp	.-50     	; 0x39e <main+0x74>
		}
		else if(!ret)
 3d0:	81 11       	cpse	r24, r1
 3d2:	e5 cf       	rjmp	.-54     	; 0x39e <main+0x74>
		{
			ESP_Send(crcErrorMsg, 0);
 3d4:	60 e0       	ldi	r22, 0x00	; 0
 3d6:	70 e0       	ldi	r23, 0x00	; 0
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	0e 94 2f 01 	call	0x25e	; 0x25e <ESP_Send>
 3e0:	de cf       	rjmp	.-68     	; 0x39e <main+0x74>

000003e2 <__vector_13>:
#endif
	}
}
// --- "ALIVE" LED INTERRUPT --- //
ISR(TIMER1_OVF_vect) //4.5s on 14MHz clock
{
 3e2:	1f 92       	push	r1
 3e4:	0f 92       	push	r0
 3e6:	0f b6       	in	r0, 0x3f	; 63
 3e8:	0f 92       	push	r0
 3ea:	11 24       	eor	r1, r1
 3ec:	8f 93       	push	r24
 3ee:	9f 93       	push	r25
	PORTB ^= (1<<LED0);
 3f0:	95 b1       	in	r25, 0x05	; 5
 3f2:	81 e0       	ldi	r24, 0x01	; 1
 3f4:	89 27       	eor	r24, r25
 3f6:	85 b9       	out	0x05, r24	; 5
 3f8:	9f 91       	pop	r25
 3fa:	8f 91       	pop	r24
 3fc:	0f 90       	pop	r0
 3fe:	0f be       	out	0x3f, r0	; 63
 400:	0f 90       	pop	r0
 402:	1f 90       	pop	r1
 404:	18 95       	reti

00000406 <RF_Initialize>:
//-------------------------INITIALIZATION-------------------------------//
void RF_Initialize(void)
{
	//	INTIALZATION OF PINS
	
	RF_DDR |= (1<<SDI) | (1<<SCK) | (1<<CS);
 406:	84 b1       	in	r24, 0x04	; 4
 408:	8c 62       	ori	r24, 0x2C	; 44
 40a:	84 b9       	out	0x04, r24	; 4
	RF_DDR &= ~(1<<SDO);
 40c:	24 98       	cbi	0x04, 4	; 4
	
	RF_PORT |= (1<<CS);
 40e:	2a 9a       	sbi	0x05, 2	; 5
	//SPCR = (1<<SPE) | (1<<MSTR); //SCK - Fosc/128

#if RF_UseIRQ == 1
	RF_PORT |= (1<<SDO);
 410:	2c 9a       	sbi	0x05, 4	; 5
 412:	2f ef       	ldi	r18, 0xFF	; 255
 414:	8f e7       	ldi	r24, 0x7F	; 127
 416:	94 e0       	ldi	r25, 0x04	; 4
 418:	21 50       	subi	r18, 0x01	; 1
 41a:	80 40       	sbci	r24, 0x00	; 0
 41c:	90 40       	sbci	r25, 0x00	; 0
 41e:	e1 f7       	brne	.-8      	; 0x418 <RF_Initialize+0x12>
 420:	00 c0       	rjmp	.+0      	; 0x422 <RF_Initialize+0x1c>
 422:	00 00       	nop
#endif

	_delay_ms(100); //WAITING FOR MODULE TO RESET

#if RF_UseIRQ == 1
	RF_status.Rx = 0;
 424:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <RF_status>
 428:	8e 7f       	andi	r24, 0xFE	; 254
 42a:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <RF_status>
	RF_status.Tx = 0;
 42e:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <RF_status>
 432:	8d 7f       	andi	r24, 0xFD	; 253
 434:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <RF_status>
	RF_status.New = 0;
 438:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <RF_status>
 43c:	8b 7f       	andi	r24, 0xFB	; 251
 43e:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <RF_status>

	RF_IRQDDR &= ~(1<<IRQ);
 442:	52 98       	cbi	0x0a, 2	; 10
	//LOW STATE ON INT0 WILL GENERATE AN INTERRUPT
	EICRA &= ~(1<<ISC01);
 444:	e9 e6       	ldi	r30, 0x69	; 105
 446:	f0 e0       	ldi	r31, 0x00	; 0
 448:	80 81       	ld	r24, Z
 44a:	8d 7f       	andi	r24, 0xFD	; 253
 44c:	80 83       	st	Z, r24
	EICRA &= ~(1<<ISC00);
 44e:	80 81       	ld	r24, Z
 450:	8e 7f       	andi	r24, 0xFE	; 254
 452:	80 83       	st	Z, r24

	EIMSK |= (1<<INT0);
 454:	e8 9a       	sbi	0x1d, 0	; 29
 456:	08 95       	ret

00000458 <RF_Transmit>:
#endif
}

//----------------------------TRANSMITION-------------------------------//
uint16_t RF_Transmit(uint16_t data)
{
 458:	ac 01       	movw	r20, r24
	uint16_t ret_val = 0;
	uint8_t i;

	RF_PORT &= ~(1<<CS);
 45a:	2a 98       	cbi	0x05, 2	; 5
 45c:	90 e1       	ldi	r25, 0x10	; 16
}

//----------------------------TRANSMITION-------------------------------//
uint16_t RF_Transmit(uint16_t data)
{
	uint16_t ret_val = 0;
 45e:	20 e0       	ldi	r18, 0x00	; 0
 460:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;

	RF_PORT &= ~(1<<CS);
	for (i=0; i<16; i++)
	{
		if (data & 0x8000) RF_PORT |= (1<<SDI);
 462:	55 23       	and	r21, r21
 464:	14 f4       	brge	.+4      	; 0x46a <RF_Transmit+0x12>
 466:	2b 9a       	sbi	0x05, 3	; 5
 468:	01 c0       	rjmp	.+2      	; 0x46c <RF_Transmit+0x14>
		else RF_PORT &= ~(1<<SDI);
 46a:	2b 98       	cbi	0x05, 3	; 5

		ret_val <<= 1;
 46c:	22 0f       	add	r18, r18
 46e:	33 1f       	adc	r19, r19
		if (RF_PIN&(1<<SDO)) ret_val |= 1;
 470:	1c 99       	sbic	0x03, 4	; 3
 472:	21 60       	ori	r18, 0x01	; 1
		RF_PORT |= (1<<SCK);
 474:	2d 9a       	sbi	0x05, 5	; 5
		data <<= 1;
 476:	44 0f       	add	r20, r20
 478:	55 1f       	adc	r21, r21
		asm("nop");
 47a:	00 00       	nop
		asm("nop");
 47c:	00 00       	nop
		RF_PORT &= ~(1<<SCK);
 47e:	2d 98       	cbi	0x05, 5	; 5
 480:	91 50       	subi	r25, 0x01	; 1
{
	uint16_t ret_val = 0;
	uint8_t i;

	RF_PORT &= ~(1<<CS);
	for (i=0; i<16; i++)
 482:	79 f7       	brne	.-34     	; 0x462 <RF_Transmit+0xa>
		data <<= 1;
		asm("nop");
		asm("nop");
		RF_PORT &= ~(1<<SCK);
	}
	RF_PORT |= (1<<CS);
 484:	2a 9a       	sbi	0x05, 2	; 5

	RF_PORT |= (1<<CS);

	return response;
	*/
}
 486:	c9 01       	movw	r24, r18
 488:	08 95       	ret

0000048a <UpdateChecksum>:
//--------------------CALCULATING CHECKSUM (CRC16)--------------------------//
uint16_t UpdateChecksum(uint16_t checksum, uint8_t data)
{
	uint16_t tmp = (data<<8);
 48a:	70 e0       	ldi	r23, 0x00	; 0
 48c:	76 2f       	mov	r23, r22
 48e:	66 27       	eor	r22, r22
 490:	28 e0       	ldi	r18, 0x08	; 8
 492:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i < 8; i++)
	{
		if((checksum ^ tmp) & 0x8000)
 494:	ab 01       	movw	r20, r22
 496:	48 27       	eor	r20, r24
 498:	59 27       	eor	r21, r25
 49a:	55 23       	and	r21, r21
 49c:	3c f4       	brge	.+14     	; 0x4ac <UpdateChecksum+0x22>
			checksum = (checksum<<1) ^ 0x1021;
 49e:	88 0f       	add	r24, r24
 4a0:	99 1f       	adc	r25, r25
 4a2:	41 e2       	ldi	r20, 0x21	; 33
 4a4:	84 27       	eor	r24, r20
 4a6:	40 e1       	ldi	r20, 0x10	; 16
 4a8:	94 27       	eor	r25, r20
 4aa:	02 c0       	rjmp	.+4      	; 0x4b0 <UpdateChecksum+0x26>
		else
			checksum = (checksum<<1);
 4ac:	88 0f       	add	r24, r24
 4ae:	99 1f       	adc	r25, r25
		tmp = tmp << 1;
 4b0:	66 0f       	add	r22, r22
 4b2:	77 1f       	adc	r23, r23
 4b4:	21 50       	subi	r18, 0x01	; 1
 4b6:	31 09       	sbc	r19, r1
}
//--------------------CALCULATING CHECKSUM (CRC16)--------------------------//
uint16_t UpdateChecksum(uint16_t checksum, uint8_t data)
{
	uint16_t tmp = (data<<8);
	for(int i = 0; i < 8; i++)
 4b8:	69 f7       	brne	.-38     	; 0x494 <UpdateChecksum+0xa>
		else
			checksum = (checksum<<1);
		tmp = tmp << 1;
	}
	return checksum;
}
 4ba:	08 95       	ret

000004bc <RF_SetRange>:
//--------------------RANGE BAUDRATE AND FREQUENCY----------------------//
void RF_SetRange(enum RANGE range)
{
	RF_Transmit(0x80C7 | range); //ENABLE FIFO, SET RANGE
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	87 6c       	ori	r24, 0xC7	; 199
 4c0:	90 68       	ori	r25, 0x80	; 128
 4c2:	0e 94 2c 02 	call	0x458	; 0x458 <RF_Transmit>
 4c6:	08 95       	ret

000004c8 <RF_SetBandwith>:
}
void RF_SetBandwith(uint8_t bandwidth, uint8_t gain, uint8_t drssi)
{
	RF_Transmit(0x9000 | ((bandwidth & 7) << 5) | ((gain & 3) << 3) | (drssi & 7));
 4c8:	47 70       	andi	r20, 0x07	; 7
 4ca:	50 e0       	ldi	r21, 0x00	; 0
 4cc:	50 69       	ori	r21, 0x90	; 144
 4ce:	63 70       	andi	r22, 0x03	; 3
 4d0:	70 e0       	ldi	r23, 0x00	; 0
 4d2:	66 0f       	add	r22, r22
 4d4:	77 1f       	adc	r23, r23
 4d6:	66 0f       	add	r22, r22
 4d8:	77 1f       	adc	r23, r23
 4da:	66 0f       	add	r22, r22
 4dc:	77 1f       	adc	r23, r23
 4de:	46 2b       	or	r20, r22
 4e0:	57 2b       	or	r21, r23
 4e2:	20 e2       	ldi	r18, 0x20	; 32
 4e4:	82 9f       	mul	r24, r18
 4e6:	c0 01       	movw	r24, r0
 4e8:	11 24       	eor	r1, r1
 4ea:	99 27       	eor	r25, r25
 4ec:	84 2b       	or	r24, r20
 4ee:	95 2b       	or	r25, r21
 4f0:	0e 94 2c 02 	call	0x458	; 0x458 <RF_Transmit>
 4f4:	08 95       	ret

000004f6 <RF_SetFrequency>:
}
void RF_SetFrequency(uint16_t frequency)
{
	if(frequency < 96)
 4f6:	80 36       	cpi	r24, 0x60	; 96
 4f8:	91 05       	cpc	r25, r1
 4fa:	38 f0       	brcs	.+14     	; 0x50a <RF_SetFrequency+0x14>
 4fc:	80 34       	cpi	r24, 0x40	; 64
 4fe:	2f e0       	ldi	r18, 0x0F	; 15
 500:	92 07       	cpc	r25, r18
 502:	28 f0       	brcs	.+10     	; 0x50e <RF_SetFrequency+0x18>
 504:	8f e3       	ldi	r24, 0x3F	; 63
 506:	9f e0       	ldi	r25, 0x0F	; 15
 508:	02 c0       	rjmp	.+4      	; 0x50e <RF_SetFrequency+0x18>
		frequency = 96;
 50a:	80 e6       	ldi	r24, 0x60	; 96
 50c:	90 e0       	ldi	r25, 0x00	; 0
	else if (frequency > 3903)
		frequency = 3903;
	RF_Transmit(0xA000 | frequency);
 50e:	90 6a       	ori	r25, 0xA0	; 160
 510:	0e 94 2c 02 	call	0x458	; 0x458 <RF_Transmit>
 514:	08 95       	ret

00000516 <RF_SetBaudRate>:
}
void RF_SetBaudRate(uint16_t baud)
{
	if(baud<663)
 516:	87 39       	cpi	r24, 0x97	; 151
 518:	22 e0       	ldi	r18, 0x02	; 2
 51a:	92 07       	cpc	r25, r18
 51c:	08 f1       	brcs	.+66     	; 0x560 <RF_SetBaudRate+0x4a>
 51e:	9c 01       	movw	r18, r24
		return;
	if(baud<5400)
 520:	28 31       	cpi	r18, 0x18	; 24
 522:	85 e1       	ldi	r24, 0x15	; 21
 524:	38 07       	cpc	r19, r24
 526:	78 f4       	brcc	.+30     	; 0x546 <RF_SetBaudRate+0x30>
		RF_Transmit(0xC680 | ((43104/baud)-1));
 528:	40 e0       	ldi	r20, 0x00	; 0
 52a:	50 e0       	ldi	r21, 0x00	; 0
 52c:	60 e6       	ldi	r22, 0x60	; 96
 52e:	78 ea       	ldi	r23, 0xA8	; 168
 530:	80 e0       	ldi	r24, 0x00	; 0
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	0e 94 95 04 	call	0x92a	; 0x92a <__divmodsi4>
 538:	c9 01       	movw	r24, r18
 53a:	01 97       	sbiw	r24, 0x01	; 1
 53c:	80 68       	ori	r24, 0x80	; 128
 53e:	96 6c       	ori	r25, 0xC6	; 198
 540:	0e 94 2c 02 	call	0x458	; 0x458 <RF_Transmit>
 544:	08 95       	ret
	else
		RF_Transmit(0xC600 | ((344828UL/baud)-1));		
 546:	40 e0       	ldi	r20, 0x00	; 0
 548:	50 e0       	ldi	r21, 0x00	; 0
 54a:	6c ef       	ldi	r22, 0xFC	; 252
 54c:	72 e4       	ldi	r23, 0x42	; 66
 54e:	85 e0       	ldi	r24, 0x05	; 5
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__udivmodsi4>
 556:	c9 01       	movw	r24, r18
 558:	01 97       	sbiw	r24, 0x01	; 1
 55a:	96 6c       	ori	r25, 0xC6	; 198
 55c:	0e 94 2c 02 	call	0x458	; 0x458 <RF_Transmit>
 560:	08 95       	ret

00000562 <RF_DisableWakeUpTimer>:
}
//----------------------WAKE UP TIMER DISABLING-------------------------//
void RF_DisableWakeUpTimer(void)
{
	RF_Transmit(0xE000);
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	90 ee       	ldi	r25, 0xE0	; 224
 566:	0e 94 2c 02 	call	0x458	; 0x458 <RF_Transmit>
 56a:	08 95       	ret

0000056c <RF_SetPower>:
}
//---------------------------POWER SETTING------------------------------//
void RF_SetPower(uint8_t power, uint8_t mod)
{
	RF_Transmit(0x9800 | (power & 7) | ((mod & 15)<<4));
 56c:	87 70       	andi	r24, 0x07	; 7
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	98 69       	ori	r25, 0x98	; 152
 572:	20 e1       	ldi	r18, 0x10	; 16
 574:	62 9f       	mul	r22, r18
 576:	b0 01       	movw	r22, r0
 578:	11 24       	eor	r1, r1
 57a:	77 27       	eor	r23, r23
 57c:	86 2b       	or	r24, r22
 57e:	97 2b       	or	r25, r23
 580:	0e 94 2c 02 	call	0x458	; 0x458 <RF_Transmit>
 584:	08 95       	ret

00000586 <__vector_1>:
uint8_t RF_Data[(RF_DataLength + 10)]; // +10 FOR THE REST OF THE FRAME

//----------------------------------------------------------------------//
//-------------------------------ISR------------------------------------//
ISR(INT0_vect)
{	
 586:	1f 92       	push	r1
 588:	0f 92       	push	r0
 58a:	0f b6       	in	r0, 0x3f	; 63
 58c:	0f 92       	push	r0
 58e:	11 24       	eor	r1, r1
 590:	2f 93       	push	r18
 592:	3f 93       	push	r19
 594:	4f 93       	push	r20
 596:	5f 93       	push	r21
 598:	6f 93       	push	r22
 59a:	7f 93       	push	r23
 59c:	8f 93       	push	r24
 59e:	9f 93       	push	r25
 5a0:	af 93       	push	r26
 5a2:	bf 93       	push	r27
 5a4:	cf 93       	push	r28
 5a6:	ef 93       	push	r30
 5a8:	ff 93       	push	r31
	if(RF_status.Rx)
 5aa:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <RF_status>
 5ae:	80 ff       	sbrs	r24, 0
 5b0:	3d c0       	rjmp	.+122    	; 0x62c <__vector_1+0xa6>
	{
		if(RF_Index < RF_DataLength)
 5b2:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <__data_end>
 5b6:	84 36       	cpi	r24, 0x64	; 100
 5b8:	d8 f4       	brcc	.+54     	; 0x5f0 <__vector_1+0x6a>
		{
			RF_Data[RF_Index++] = RF_Transmit(0xB000) & 0x00FF;
 5ba:	c0 91 bc 01 	lds	r28, 0x01BC	; 0x8001bc <__data_end>
 5be:	81 e0       	ldi	r24, 0x01	; 1
 5c0:	8c 0f       	add	r24, r28
 5c2:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <__data_end>
 5c6:	80 e0       	ldi	r24, 0x00	; 0
 5c8:	90 eb       	ldi	r25, 0xB0	; 176
 5ca:	0e 94 2c 02 	call	0x458	; 0x458 <RF_Transmit>
 5ce:	ec 2f       	mov	r30, r28
 5d0:	f0 e0       	ldi	r31, 0x00	; 0
 5d2:	e7 5c       	subi	r30, 0xC7	; 199
 5d4:	fd 4f       	sbci	r31, 0xFD	; 253
 5d6:	80 83       	st	Z, r24
			RF_Transmit(0x8208);
			RF_status.Rx = 0;
			RF_status.New = 1; //FRAME NOT RIGHT
			return;
		}
		if(RF_Index >= (RF_Data[0] + 3))
 5d8:	20 91 bc 01 	lds	r18, 0x01BC	; 0x8001bc <__data_end>
 5dc:	30 e0       	ldi	r19, 0x00	; 0
 5de:	80 91 39 02 	lds	r24, 0x0239	; 0x800239 <RF_Data>
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	03 96       	adiw	r24, 0x03	; 3
 5e6:	28 17       	cp	r18, r24
 5e8:	39 07       	cpc	r19, r25
 5ea:	0c f4       	brge	.+2      	; 0x5ee <__vector_1+0x68>
 5ec:	40 c0       	rjmp	.+128    	; 0x66e <__vector_1+0xe8>
 5ee:	0f c0       	rjmp	.+30     	; 0x60e <__vector_1+0x88>
		{
			RF_Data[RF_Index++] = RF_Transmit(0xB000) & 0x00FF;
		}
		else
		{
			RF_Transmit(0x8208);
 5f0:	88 e0       	ldi	r24, 0x08	; 8
 5f2:	92 e8       	ldi	r25, 0x82	; 130
 5f4:	0e 94 2c 02 	call	0x458	; 0x458 <RF_Transmit>
			RF_status.Rx = 0;
 5f8:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <RF_status>
 5fc:	8e 7f       	andi	r24, 0xFE	; 254
 5fe:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <RF_status>
			RF_status.New = 1; //FRAME NOT RIGHT
 602:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <RF_status>
 606:	84 60       	ori	r24, 0x04	; 4
 608:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <RF_status>
			return;
 60c:	30 c0       	rjmp	.+96     	; 0x66e <__vector_1+0xe8>
		}
		if(RF_Index >= (RF_Data[0] + 3))
		{
			RF_Transmit(0x8208);
 60e:	88 e0       	ldi	r24, 0x08	; 8
 610:	92 e8       	ldi	r25, 0x82	; 130
 612:	0e 94 2c 02 	call	0x458	; 0x458 <RF_Transmit>
			RF_status.Rx = 0;
 616:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <RF_status>
 61a:	8e 7f       	andi	r24, 0xFE	; 254
 61c:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <RF_status>
			RF_status.New = 1; //FRAME IS RIGHT
 620:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <RF_status>
 624:	84 60       	ori	r24, 0x04	; 4
 626:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <RF_status>
 62a:	21 c0       	rjmp	.+66     	; 0x66e <__vector_1+0xe8>
		}
	}
	else if(RF_status.Tx)
 62c:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <RF_status>
 630:	81 ff       	sbrs	r24, 1
 632:	1d c0       	rjmp	.+58     	; 0x66e <__vector_1+0xe8>
	{
		RF_Transmit(0xB800 | RF_Data[RF_Index]);
 634:	e0 91 bc 01 	lds	r30, 0x01BC	; 0x8001bc <__data_end>
 638:	f0 e0       	ldi	r31, 0x00	; 0
 63a:	e7 5c       	subi	r30, 0xC7	; 199
 63c:	fd 4f       	sbci	r31, 0xFD	; 253
 63e:	80 81       	ld	r24, Z
 640:	90 e0       	ldi	r25, 0x00	; 0
 642:	98 6b       	ori	r25, 0xB8	; 184
 644:	0e 94 2c 02 	call	0x458	; 0x458 <RF_Transmit>
		if(!RF_Index)
 648:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <__data_end>
 64c:	81 11       	cpse	r24, r1
 64e:	0a c0       	rjmp	.+20     	; 0x664 <__vector_1+0xde>
		{
			RF_status.Tx = 0;
 650:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <RF_status>
 654:	8d 7f       	andi	r24, 0xFD	; 253
 656:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <RF_status>
			RF_Transmit(0x8208); //TX OFF
 65a:	88 e0       	ldi	r24, 0x08	; 8
 65c:	92 e8       	ldi	r25, 0x82	; 130
 65e:	0e 94 2c 02 	call	0x458	; 0x458 <RF_Transmit>
 662:	05 c0       	rjmp	.+10     	; 0x66e <__vector_1+0xe8>
		}
		else
		{	
			RF_Index--;
 664:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <__data_end>
 668:	81 50       	subi	r24, 0x01	; 1
 66a:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <__data_end>
		}
	}
}
 66e:	ff 91       	pop	r31
 670:	ef 91       	pop	r30
 672:	cf 91       	pop	r28
 674:	bf 91       	pop	r27
 676:	af 91       	pop	r26
 678:	9f 91       	pop	r25
 67a:	8f 91       	pop	r24
 67c:	7f 91       	pop	r23
 67e:	6f 91       	pop	r22
 680:	5f 91       	pop	r21
 682:	4f 91       	pop	r20
 684:	3f 91       	pop	r19
 686:	2f 91       	pop	r18
 688:	0f 90       	pop	r0
 68a:	0f be       	out	0x3f, r0	; 63
 68c:	0f 90       	pop	r0
 68e:	1f 90       	pop	r1
 690:	18 95       	reti

00000692 <RF_RxStart>:
//-----------------------------DATA RECEIVE-----------------------------//
uint8_t RF_RxStart(void)
{
	if(RF_status.New)
 692:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <RF_status>
 696:	82 fd       	sbrc	r24, 2
 698:	1d c0       	rjmp	.+58     	; 0x6d4 <RF_RxStart+0x42>
		return 1;		//BUFFER NOT EMPTY YET
	if(RF_status.Tx)
 69a:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <RF_status>
 69e:	81 fd       	sbrc	r24, 1
 6a0:	1b c0       	rjmp	.+54     	; 0x6d8 <RF_RxStart+0x46>
		return 2;		//TRANSMITION IN PROGRESS
	if(RF_status.Rx)
 6a2:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <RF_status>
 6a6:	80 fd       	sbrc	r24, 0
 6a8:	19 c0       	rjmp	.+50     	; 0x6dc <RF_RxStart+0x4a>
		return 3;		//RECEIVING IN PROGRESS

	RF_Transmit(0x82C8); //RX ON
 6aa:	88 ec       	ldi	r24, 0xC8	; 200
 6ac:	92 e8       	ldi	r25, 0x82	; 130
 6ae:	0e 94 2c 02 	call	0x458	; 0x458 <RF_Transmit>

	//FIFO RESET
	RF_Transmit(0xCA81);
 6b2:	81 e8       	ldi	r24, 0x81	; 129
 6b4:	9a ec       	ldi	r25, 0xCA	; 202
 6b6:	0e 94 2c 02 	call	0x458	; 0x458 <RF_Transmit>
	RF_Transmit(0xCA83);
 6ba:	83 e8       	ldi	r24, 0x83	; 131
 6bc:	9a ec       	ldi	r25, 0xCA	; 202
 6be:	0e 94 2c 02 	call	0x458	; 0x458 <RF_Transmit>

	RF_Index = 0;
 6c2:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <__data_end>
	RF_status.Rx = 1;
 6c6:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <RF_status>
 6ca:	81 60       	ori	r24, 0x01	; 1
 6cc:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <RF_status>

	return 0;			//EVERYTING OK
 6d0:	80 e0       	ldi	r24, 0x00	; 0
 6d2:	08 95       	ret
}
//-----------------------------DATA RECEIVE-----------------------------//
uint8_t RF_RxStart(void)
{
	if(RF_status.New)
		return 1;		//BUFFER NOT EMPTY YET
 6d4:	81 e0       	ldi	r24, 0x01	; 1
 6d6:	08 95       	ret
	if(RF_status.Tx)
		return 2;		//TRANSMITION IN PROGRESS
 6d8:	82 e0       	ldi	r24, 0x02	; 2
 6da:	08 95       	ret
	if(RF_status.Rx)
		return 3;		//RECEIVING IN PROGRESS
 6dc:	83 e0       	ldi	r24, 0x03	; 3

	RF_Index = 0;
	RF_status.Rx = 1;

	return 0;			//EVERYTING OK
}
 6de:	08 95       	ret

000006e0 <RF_RxFinish>:
 *	OR (ERRORS)
 *	255 - receiving in progress
 *	254 - previous frame was not read
*/
uint8_t RF_RxFinish(char* data)
{
 6e0:	cf 92       	push	r12
 6e2:	df 92       	push	r13
 6e4:	ef 92       	push	r14
 6e6:	ff 92       	push	r15
 6e8:	0f 93       	push	r16
 6ea:	1f 93       	push	r17
 6ec:	cf 93       	push	r28
 6ee:	df 93       	push	r29
 6f0:	ec 01       	movw	r28, r24
	uint16_t crc;
	uint16_t crc_checksum = 0;
	uint8_t size = RF_Data[0];
 6f2:	10 91 39 02 	lds	r17, 0x0239	; 0x800239 <RF_Data>

	if(RF_status.Rx)
 6f6:	90 91 38 02 	lds	r25, 0x0238	; 0x800238 <RF_status>
 6fa:	90 fd       	sbrc	r25, 0
 6fc:	4d c0       	rjmp	.+154    	; 0x798 <RF_RxFinish+0xb8>
		return 255;
	if(!RF_status.New)
 6fe:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <RF_status>
 702:	82 ff       	sbrs	r24, 2
 704:	4b c0       	rjmp	.+150    	; 0x79c <RF_RxFinish+0xbc>
		return 254;

	if(size > RF_DataLength)
 706:	15 36       	cpi	r17, 0x65	; 101
 708:	58 f4       	brcc	.+22     	; 0x720 <RF_RxFinish+0x40>
		data[0] = 0;
		RF_status.New = 0;
		return 0; //FRAME SIZE NOT RIGHT
	}
	uint8_t i;
	for(i = 0; i < (size + 1); i++)
 70a:	e1 2e       	mov	r14, r17
 70c:	f1 2c       	mov	r15, r1
 70e:	c7 01       	movw	r24, r14
 710:	01 96       	adiw	r24, 0x01	; 1
 712:	6c 01       	movw	r12, r24
 714:	20 e0       	ldi	r18, 0x00	; 0
 716:	30 e0       	ldi	r19, 0x00	; 0
 718:	00 e0       	ldi	r16, 0x00	; 0
 71a:	80 e0       	ldi	r24, 0x00	; 0
 71c:	90 e0       	ldi	r25, 0x00	; 0
 71e:	08 c0       	rjmp	.+16     	; 0x730 <RF_RxFinish+0x50>
	if(!RF_status.New)
		return 254;

	if(size > RF_DataLength)
	{
		data[0] = 0;
 720:	18 82       	st	Y, r1
		RF_status.New = 0;
 722:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <RF_status>
 726:	8b 7f       	andi	r24, 0xFB	; 251
 728:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <RF_status>
		return 0; //FRAME SIZE NOT RIGHT
 72c:	80 e0       	ldi	r24, 0x00	; 0
 72e:	39 c0       	rjmp	.+114    	; 0x7a2 <RF_RxFinish+0xc2>
	}
	uint8_t i;
	for(i = 0; i < (size + 1); i++)
	{
		crc_checksum = UpdateChecksum(crc_checksum, RF_Data[i]);
 730:	f9 01       	movw	r30, r18
 732:	e7 5c       	subi	r30, 0xC7	; 199
 734:	fd 4f       	sbci	r31, 0xFD	; 253
 736:	60 81       	ld	r22, Z
 738:	0e 94 45 02 	call	0x48a	; 0x48a <UpdateChecksum>
		data[0] = 0;
		RF_status.New = 0;
		return 0; //FRAME SIZE NOT RIGHT
	}
	uint8_t i;
	for(i = 0; i < (size + 1); i++)
 73c:	0f 5f       	subi	r16, 0xFF	; 255
 73e:	20 2f       	mov	r18, r16
 740:	30 e0       	ldi	r19, 0x00	; 0
 742:	2c 15       	cp	r18, r12
 744:	3d 05       	cpc	r19, r13
 746:	a4 f3       	brlt	.-24     	; 0x730 <RF_RxFinish+0x50>
	{
		crc_checksum = UpdateChecksum(crc_checksum, RF_Data[i]);
	}

	crc = RF_Data[i++];
 748:	f9 01       	movw	r30, r18
 74a:	e7 5c       	subi	r30, 0xC7	; 199
 74c:	fd 4f       	sbci	r31, 0xFD	; 253
 74e:	20 81       	ld	r18, Z
 750:	0f 5f       	subi	r16, 0xFF	; 255
	crc |= RF_Data[i] << 8;
 752:	e0 2f       	mov	r30, r16
 754:	f0 e0       	ldi	r31, 0x00	; 0
 756:	e7 5c       	subi	r30, 0xC7	; 199
 758:	fd 4f       	sbci	r31, 0xFD	; 253
 75a:	40 81       	ld	r20, Z
 75c:	30 e0       	ldi	r19, 0x00	; 0
 75e:	34 2b       	or	r19, r20
	RF_status.New = 0;
 760:	40 91 38 02 	lds	r20, 0x0238	; 0x800238 <RF_status>
 764:	4b 7f       	andi	r20, 0xFB	; 251
 766:	40 93 38 02 	sts	0x0238, r20	; 0x800238 <RF_status>
	
	if(crc != crc_checksum)
 76a:	28 17       	cp	r18, r24
 76c:	39 07       	cpc	r19, r25
 76e:	c1 f4       	brne	.+48     	; 0x7a0 <RF_RxFinish+0xc0>
		return 0; //DATA NOT RIGHT - DIFFERENT CHECKSUMS
	else
	{
		for(int i = 0; i < size; i++)
 770:	1e 14       	cp	r1, r14
 772:	1f 04       	cpc	r1, r15
 774:	64 f4       	brge	.+24     	; 0x78e <RF_RxFinish+0xae>
 776:	ea e3       	ldi	r30, 0x3A	; 58
 778:	f2 e0       	ldi	r31, 0x02	; 2
 77a:	de 01       	movw	r26, r28
 77c:	21 2f       	mov	r18, r17
 77e:	30 e0       	ldi	r19, 0x00	; 0
 780:	26 5c       	subi	r18, 0xC6	; 198
 782:	3d 4f       	sbci	r19, 0xFD	; 253
		{
			data[i] = RF_Data[i+1];
 784:	91 91       	ld	r25, Z+
 786:	9d 93       	st	X+, r25
	
	if(crc != crc_checksum)
		return 0; //DATA NOT RIGHT - DIFFERENT CHECKSUMS
	else
	{
		for(int i = 0; i < size; i++)
 788:	e2 17       	cp	r30, r18
 78a:	f3 07       	cpc	r31, r19
 78c:	d9 f7       	brne	.-10     	; 0x784 <RF_RxFinish+0xa4>
		{
			data[i] = RF_Data[i+1];
		}
		data[size] = 0; //ENDING FRAME WITH 0
 78e:	c1 0f       	add	r28, r17
 790:	d1 1d       	adc	r29, r1
 792:	18 82       	st	Y, r1
		return size; //SIZE OF RECEIVED FRAME IN BYTES
 794:	81 2f       	mov	r24, r17
 796:	05 c0       	rjmp	.+10     	; 0x7a2 <RF_RxFinish+0xc2>
	uint16_t crc;
	uint16_t crc_checksum = 0;
	uint8_t size = RF_Data[0];

	if(RF_status.Rx)
		return 255;
 798:	8f ef       	ldi	r24, 0xFF	; 255
 79a:	03 c0       	rjmp	.+6      	; 0x7a2 <RF_RxFinish+0xc2>
	if(!RF_status.New)
		return 254;
 79c:	8e ef       	ldi	r24, 0xFE	; 254
 79e:	01 c0       	rjmp	.+2      	; 0x7a2 <RF_RxFinish+0xc2>
	crc = RF_Data[i++];
	crc |= RF_Data[i] << 8;
	RF_status.New = 0;
	
	if(crc != crc_checksum)
		return 0; //DATA NOT RIGHT - DIFFERENT CHECKSUMS
 7a0:	80 e0       	ldi	r24, 0x00	; 0
			data[i] = RF_Data[i+1];
		}
		data[size] = 0; //ENDING FRAME WITH 0
		return size; //SIZE OF RECEIVED FRAME IN BYTES
	}
}
 7a2:	df 91       	pop	r29
 7a4:	cf 91       	pop	r28
 7a6:	1f 91       	pop	r17
 7a8:	0f 91       	pop	r16
 7aa:	ff 90       	pop	r15
 7ac:	ef 90       	pop	r14
 7ae:	df 90       	pop	r13
 7b0:	cf 90       	pop	r12
 7b2:	08 95       	ret

000007b4 <UART_Initlialise>:
char UART_ReceiveChar(void)
{
	while(!(UCSR0A & (1<<RXC0))); //EMPTY LOOP - WAITING UNTILL DATA IS RECEIVED

	return UDR0;
}
 7b4:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 7b8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 7bc:	88 e9       	ldi	r24, 0x98	; 152
 7be:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 7c2:	86 e0       	ldi	r24, 0x06	; 6
 7c4:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 7c8:	08 95       	ret

000007ca <UART_SendChar>:
 7ca:	e0 ec       	ldi	r30, 0xC0	; 192
 7cc:	f0 e0       	ldi	r31, 0x00	; 0
 7ce:	90 81       	ld	r25, Z
 7d0:	95 ff       	sbrs	r25, 5
 7d2:	fd cf       	rjmp	.-6      	; 0x7ce <UART_SendChar+0x4>
 7d4:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 7d8:	08 95       	ret

000007da <UART_SendString>:
 7da:	cf 93       	push	r28
 7dc:	df 93       	push	r29
 7de:	ec 01       	movw	r28, r24
 7e0:	88 81       	ld	r24, Y
 7e2:	88 23       	and	r24, r24
 7e4:	31 f0       	breq	.+12     	; 0x7f2 <UART_SendString+0x18>
 7e6:	21 96       	adiw	r28, 0x01	; 1
 7e8:	0e 94 e5 03 	call	0x7ca	; 0x7ca <UART_SendChar>
 7ec:	89 91       	ld	r24, Y+
 7ee:	81 11       	cpse	r24, r1
 7f0:	fb cf       	rjmp	.-10     	; 0x7e8 <UART_SendString+0xe>
 7f2:	df 91       	pop	r29
 7f4:	cf 91       	pop	r28
 7f6:	08 95       	ret

000007f8 <__vector_18>:
ISR(USART_RX_vect)
{
 7f8:	1f 92       	push	r1
 7fa:	0f 92       	push	r0
 7fc:	0f b6       	in	r0, 0x3f	; 63
 7fe:	0f 92       	push	r0
 800:	11 24       	eor	r1, r1
 802:	8f 93       	push	r24
 804:	ef 93       	push	r30
 806:	ff 93       	push	r31
	uint8_t receivedByte = UDR0;
 808:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	buffer[bufferIndex] = receivedByte;
 80c:	e0 91 bd 01 	lds	r30, 0x01BD	; 0x8001bd <bufferIndex>
 810:	f0 e0       	ldi	r31, 0x00	; 0
 812:	e9 55       	subi	r30, 0x59	; 89
 814:	fd 4f       	sbci	r31, 0xFD	; 253
 816:	80 83       	st	Z, r24
	if(receivedByte == '\n')
 818:	8a 30       	cpi	r24, 0x0A	; 10
 81a:	09 f0       	breq	.+2      	; 0x81e <__vector_18+0x26>
 81c:	49 c0       	rjmp	.+146    	; 0x8b0 <__vector_18+0xb8>
	{
		if(buffer[0] == 'O' && buffer[1] == 'K')
 81e:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <buffer>
 822:	8f 34       	cpi	r24, 0x4F	; 79
 824:	51 f4       	brne	.+20     	; 0x83a <__vector_18+0x42>
 826:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <buffer+0x1>
 82a:	8b 34       	cpi	r24, 0x4B	; 75
 82c:	31 f4       	brne	.+12     	; 0x83a <__vector_18+0x42>
		{
			ESP_Response.OK = 1;
 82e:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
 832:	81 60       	ori	r24, 0x01	; 1
 834:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ESP_Response>
 838:	38 c0       	rjmp	.+112    	; 0x8aa <__vector_18+0xb2>
		}
		else if(buffer[0] == 'E' && buffer[1] == 'R' && buffer[4] == 'R')
 83a:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <buffer>
 83e:	85 34       	cpi	r24, 0x45	; 69
 840:	71 f4       	brne	.+28     	; 0x85e <__vector_18+0x66>
 842:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <buffer+0x1>
 846:	82 35       	cpi	r24, 0x52	; 82
 848:	51 f4       	brne	.+20     	; 0x85e <__vector_18+0x66>
 84a:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <buffer+0x4>
 84e:	82 35       	cpi	r24, 0x52	; 82
 850:	31 f4       	brne	.+12     	; 0x85e <__vector_18+0x66>
		{
			ESP_Response.ERROR = 1;
 852:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
 856:	82 60       	ori	r24, 0x02	; 2
 858:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ESP_Response>
 85c:	26 c0       	rjmp	.+76     	; 0x8aa <__vector_18+0xb2>
		}
		else if(buffer[1] == ',' && buffer[3] == 'O')
 85e:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <buffer+0x1>
 862:	8c 32       	cpi	r24, 0x2C	; 44
 864:	51 f4       	brne	.+20     	; 0x87a <__vector_18+0x82>
 866:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <buffer+0x3>
 86a:	8f 34       	cpi	r24, 0x4F	; 79
 86c:	31 f4       	brne	.+12     	; 0x87a <__vector_18+0x82>
		{
			ESP_Connections++;
 86e:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <ESP_Connections>
 872:	8f 5f       	subi	r24, 0xFF	; 255
 874:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <ESP_Connections>
 878:	18 c0       	rjmp	.+48     	; 0x8aa <__vector_18+0xb2>
		}
		else if(buffer[1] == ',' && buffer[3] == 'L')
 87a:	80 91 a8 02 	lds	r24, 0x02A8	; 0x8002a8 <buffer+0x1>
 87e:	8c 32       	cpi	r24, 0x2C	; 44
 880:	51 f4       	brne	.+20     	; 0x896 <__vector_18+0x9e>
 882:	80 91 aa 02 	lds	r24, 0x02AA	; 0x8002aa <buffer+0x3>
 886:	8c 34       	cpi	r24, 0x4C	; 76
 888:	31 f4       	brne	.+12     	; 0x896 <__vector_18+0x9e>
		{
			ESP_Connections--;
 88a:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <ESP_Connections>
 88e:	81 50       	subi	r24, 0x01	; 1
 890:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <ESP_Connections>
 894:	0a c0       	rjmp	.+20     	; 0x8aa <__vector_18+0xb2>
		}
		else if(buffer[0] == 'S' && buffer[5] == 'O')
 896:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <buffer>
 89a:	83 35       	cpi	r24, 0x53	; 83
 89c:	31 f4       	brne	.+12     	; 0x8aa <__vector_18+0xb2>
 89e:	80 91 ac 02 	lds	r24, 0x02AC	; 0x8002ac <buffer+0x5>
 8a2:	8f 34       	cpi	r24, 0x4F	; 79
 8a4:	11 f4       	brne	.+4      	; 0x8aa <__vector_18+0xb2>
			ESP_Response.OK;
 8a6:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
		bufferIndex = 0;
 8aa:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <bufferIndex>
 8ae:	13 c0       	rjmp	.+38     	; 0x8d6 <__vector_18+0xde>
	}
	else if(receivedByte == ' ')
 8b0:	80 32       	cpi	r24, 0x20	; 32
 8b2:	61 f4       	brne	.+24     	; 0x8cc <__vector_18+0xd4>
	{
		if(buffer[0] == '>')
 8b4:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <buffer>
 8b8:	8e 33       	cpi	r24, 0x3E	; 62
 8ba:	69 f4       	brne	.+26     	; 0x8d6 <__vector_18+0xde>
		{
			ESP_Response.INPUT = 1;
 8bc:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <ESP_Response>
 8c0:	84 60       	ori	r24, 0x04	; 4
 8c2:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <ESP_Response>
			bufferIndex = 0;
 8c6:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <bufferIndex>
 8ca:	05 c0       	rjmp	.+10     	; 0x8d6 <__vector_18+0xde>
		}	
	}
	else
	{
		bufferIndex++;
 8cc:	80 91 bd 01 	lds	r24, 0x01BD	; 0x8001bd <bufferIndex>
 8d0:	8f 5f       	subi	r24, 0xFF	; 255
 8d2:	80 93 bd 01 	sts	0x01BD, r24	; 0x8001bd <bufferIndex>
	}
 8d6:	ff 91       	pop	r31
 8d8:	ef 91       	pop	r30
 8da:	8f 91       	pop	r24
 8dc:	0f 90       	pop	r0
 8de:	0f be       	out	0x3f, r0	; 63
 8e0:	0f 90       	pop	r0
 8e2:	1f 90       	pop	r1
 8e4:	18 95       	reti

000008e6 <__udivmodsi4>:
 8e6:	a1 e2       	ldi	r26, 0x21	; 33
 8e8:	1a 2e       	mov	r1, r26
 8ea:	aa 1b       	sub	r26, r26
 8ec:	bb 1b       	sub	r27, r27
 8ee:	fd 01       	movw	r30, r26
 8f0:	0d c0       	rjmp	.+26     	; 0x90c <__udivmodsi4_ep>

000008f2 <__udivmodsi4_loop>:
 8f2:	aa 1f       	adc	r26, r26
 8f4:	bb 1f       	adc	r27, r27
 8f6:	ee 1f       	adc	r30, r30
 8f8:	ff 1f       	adc	r31, r31
 8fa:	a2 17       	cp	r26, r18
 8fc:	b3 07       	cpc	r27, r19
 8fe:	e4 07       	cpc	r30, r20
 900:	f5 07       	cpc	r31, r21
 902:	20 f0       	brcs	.+8      	; 0x90c <__udivmodsi4_ep>
 904:	a2 1b       	sub	r26, r18
 906:	b3 0b       	sbc	r27, r19
 908:	e4 0b       	sbc	r30, r20
 90a:	f5 0b       	sbc	r31, r21

0000090c <__udivmodsi4_ep>:
 90c:	66 1f       	adc	r22, r22
 90e:	77 1f       	adc	r23, r23
 910:	88 1f       	adc	r24, r24
 912:	99 1f       	adc	r25, r25
 914:	1a 94       	dec	r1
 916:	69 f7       	brne	.-38     	; 0x8f2 <__udivmodsi4_loop>
 918:	60 95       	com	r22
 91a:	70 95       	com	r23
 91c:	80 95       	com	r24
 91e:	90 95       	com	r25
 920:	9b 01       	movw	r18, r22
 922:	ac 01       	movw	r20, r24
 924:	bd 01       	movw	r22, r26
 926:	cf 01       	movw	r24, r30
 928:	08 95       	ret

0000092a <__divmodsi4>:
 92a:	05 2e       	mov	r0, r21
 92c:	97 fb       	bst	r25, 7
 92e:	1e f4       	brtc	.+6      	; 0x936 <__divmodsi4+0xc>
 930:	00 94       	com	r0
 932:	0e 94 ac 04 	call	0x958	; 0x958 <__negsi2>
 936:	57 fd       	sbrc	r21, 7
 938:	07 d0       	rcall	.+14     	; 0x948 <__divmodsi4_neg2>
 93a:	0e 94 73 04 	call	0x8e6	; 0x8e6 <__udivmodsi4>
 93e:	07 fc       	sbrc	r0, 7
 940:	03 d0       	rcall	.+6      	; 0x948 <__divmodsi4_neg2>
 942:	4e f4       	brtc	.+18     	; 0x956 <__divmodsi4_exit>
 944:	0c 94 ac 04 	jmp	0x958	; 0x958 <__negsi2>

00000948 <__divmodsi4_neg2>:
 948:	50 95       	com	r21
 94a:	40 95       	com	r20
 94c:	30 95       	com	r19
 94e:	21 95       	neg	r18
 950:	3f 4f       	sbci	r19, 0xFF	; 255
 952:	4f 4f       	sbci	r20, 0xFF	; 255
 954:	5f 4f       	sbci	r21, 0xFF	; 255

00000956 <__divmodsi4_exit>:
 956:	08 95       	ret

00000958 <__negsi2>:
 958:	90 95       	com	r25
 95a:	80 95       	com	r24
 95c:	70 95       	com	r23
 95e:	61 95       	neg	r22
 960:	7f 4f       	sbci	r23, 0xFF	; 255
 962:	8f 4f       	sbci	r24, 0xFF	; 255
 964:	9f 4f       	sbci	r25, 0xFF	; 255
 966:	08 95       	ret

00000968 <sprintf>:
 968:	ae e0       	ldi	r26, 0x0E	; 14
 96a:	b0 e0       	ldi	r27, 0x00	; 0
 96c:	ea eb       	ldi	r30, 0xBA	; 186
 96e:	f4 e0       	ldi	r31, 0x04	; 4
 970:	0c 94 63 07 	jmp	0xec6	; 0xec6 <__prologue_saves__+0x1c>
 974:	0d 89       	ldd	r16, Y+21	; 0x15
 976:	1e 89       	ldd	r17, Y+22	; 0x16
 978:	86 e0       	ldi	r24, 0x06	; 6
 97a:	8c 83       	std	Y+4, r24	; 0x04
 97c:	1a 83       	std	Y+2, r17	; 0x02
 97e:	09 83       	std	Y+1, r16	; 0x01
 980:	8f ef       	ldi	r24, 0xFF	; 255
 982:	9f e7       	ldi	r25, 0x7F	; 127
 984:	9e 83       	std	Y+6, r25	; 0x06
 986:	8d 83       	std	Y+5, r24	; 0x05
 988:	ae 01       	movw	r20, r28
 98a:	47 5e       	subi	r20, 0xE7	; 231
 98c:	5f 4f       	sbci	r21, 0xFF	; 255
 98e:	6f 89       	ldd	r22, Y+23	; 0x17
 990:	78 8d       	ldd	r23, Y+24	; 0x18
 992:	ce 01       	movw	r24, r28
 994:	01 96       	adiw	r24, 0x01	; 1
 996:	0e 94 d7 04 	call	0x9ae	; 0x9ae <vfprintf>
 99a:	2f 81       	ldd	r18, Y+7	; 0x07
 99c:	38 85       	ldd	r19, Y+8	; 0x08
 99e:	f8 01       	movw	r30, r16
 9a0:	e2 0f       	add	r30, r18
 9a2:	f3 1f       	adc	r31, r19
 9a4:	10 82       	st	Z, r1
 9a6:	2e 96       	adiw	r28, 0x0e	; 14
 9a8:	e4 e0       	ldi	r30, 0x04	; 4
 9aa:	0c 94 7f 07 	jmp	0xefe	; 0xefe <__epilogue_restores__+0x1c>

000009ae <vfprintf>:
 9ae:	ac e0       	ldi	r26, 0x0C	; 12
 9b0:	b0 e0       	ldi	r27, 0x00	; 0
 9b2:	ed ed       	ldi	r30, 0xDD	; 221
 9b4:	f4 e0       	ldi	r31, 0x04	; 4
 9b6:	0c 94 55 07 	jmp	0xeaa	; 0xeaa <__prologue_saves__>
 9ba:	7c 01       	movw	r14, r24
 9bc:	6b 01       	movw	r12, r22
 9be:	8a 01       	movw	r16, r20
 9c0:	fc 01       	movw	r30, r24
 9c2:	17 82       	std	Z+7, r1	; 0x07
 9c4:	16 82       	std	Z+6, r1	; 0x06
 9c6:	83 81       	ldd	r24, Z+3	; 0x03
 9c8:	81 ff       	sbrs	r24, 1
 9ca:	bd c1       	rjmp	.+890    	; 0xd46 <vfprintf+0x398>
 9cc:	ce 01       	movw	r24, r28
 9ce:	01 96       	adiw	r24, 0x01	; 1
 9d0:	4c 01       	movw	r8, r24
 9d2:	f7 01       	movw	r30, r14
 9d4:	93 81       	ldd	r25, Z+3	; 0x03
 9d6:	f6 01       	movw	r30, r12
 9d8:	93 fd       	sbrc	r25, 3
 9da:	85 91       	lpm	r24, Z+
 9dc:	93 ff       	sbrs	r25, 3
 9de:	81 91       	ld	r24, Z+
 9e0:	6f 01       	movw	r12, r30
 9e2:	88 23       	and	r24, r24
 9e4:	09 f4       	brne	.+2      	; 0x9e8 <vfprintf+0x3a>
 9e6:	ab c1       	rjmp	.+854    	; 0xd3e <vfprintf+0x390>
 9e8:	85 32       	cpi	r24, 0x25	; 37
 9ea:	39 f4       	brne	.+14     	; 0x9fa <vfprintf+0x4c>
 9ec:	93 fd       	sbrc	r25, 3
 9ee:	85 91       	lpm	r24, Z+
 9f0:	93 ff       	sbrs	r25, 3
 9f2:	81 91       	ld	r24, Z+
 9f4:	6f 01       	movw	r12, r30
 9f6:	85 32       	cpi	r24, 0x25	; 37
 9f8:	29 f4       	brne	.+10     	; 0xa04 <vfprintf+0x56>
 9fa:	b7 01       	movw	r22, r14
 9fc:	90 e0       	ldi	r25, 0x00	; 0
 9fe:	0e 94 bf 06 	call	0xd7e	; 0xd7e <fputc>
 a02:	e7 cf       	rjmp	.-50     	; 0x9d2 <vfprintf+0x24>
 a04:	51 2c       	mov	r5, r1
 a06:	31 2c       	mov	r3, r1
 a08:	20 e0       	ldi	r18, 0x00	; 0
 a0a:	20 32       	cpi	r18, 0x20	; 32
 a0c:	a0 f4       	brcc	.+40     	; 0xa36 <vfprintf+0x88>
 a0e:	8b 32       	cpi	r24, 0x2B	; 43
 a10:	69 f0       	breq	.+26     	; 0xa2c <vfprintf+0x7e>
 a12:	30 f4       	brcc	.+12     	; 0xa20 <vfprintf+0x72>
 a14:	80 32       	cpi	r24, 0x20	; 32
 a16:	59 f0       	breq	.+22     	; 0xa2e <vfprintf+0x80>
 a18:	83 32       	cpi	r24, 0x23	; 35
 a1a:	69 f4       	brne	.+26     	; 0xa36 <vfprintf+0x88>
 a1c:	20 61       	ori	r18, 0x10	; 16
 a1e:	2c c0       	rjmp	.+88     	; 0xa78 <vfprintf+0xca>
 a20:	8d 32       	cpi	r24, 0x2D	; 45
 a22:	39 f0       	breq	.+14     	; 0xa32 <vfprintf+0x84>
 a24:	80 33       	cpi	r24, 0x30	; 48
 a26:	39 f4       	brne	.+14     	; 0xa36 <vfprintf+0x88>
 a28:	21 60       	ori	r18, 0x01	; 1
 a2a:	26 c0       	rjmp	.+76     	; 0xa78 <vfprintf+0xca>
 a2c:	22 60       	ori	r18, 0x02	; 2
 a2e:	24 60       	ori	r18, 0x04	; 4
 a30:	23 c0       	rjmp	.+70     	; 0xa78 <vfprintf+0xca>
 a32:	28 60       	ori	r18, 0x08	; 8
 a34:	21 c0       	rjmp	.+66     	; 0xa78 <vfprintf+0xca>
 a36:	27 fd       	sbrc	r18, 7
 a38:	27 c0       	rjmp	.+78     	; 0xa88 <vfprintf+0xda>
 a3a:	30 ed       	ldi	r19, 0xD0	; 208
 a3c:	38 0f       	add	r19, r24
 a3e:	3a 30       	cpi	r19, 0x0A	; 10
 a40:	78 f4       	brcc	.+30     	; 0xa60 <vfprintf+0xb2>
 a42:	26 ff       	sbrs	r18, 6
 a44:	06 c0       	rjmp	.+12     	; 0xa52 <vfprintf+0xa4>
 a46:	fa e0       	ldi	r31, 0x0A	; 10
 a48:	5f 9e       	mul	r5, r31
 a4a:	30 0d       	add	r19, r0
 a4c:	11 24       	eor	r1, r1
 a4e:	53 2e       	mov	r5, r19
 a50:	13 c0       	rjmp	.+38     	; 0xa78 <vfprintf+0xca>
 a52:	8a e0       	ldi	r24, 0x0A	; 10
 a54:	38 9e       	mul	r3, r24
 a56:	30 0d       	add	r19, r0
 a58:	11 24       	eor	r1, r1
 a5a:	33 2e       	mov	r3, r19
 a5c:	20 62       	ori	r18, 0x20	; 32
 a5e:	0c c0       	rjmp	.+24     	; 0xa78 <vfprintf+0xca>
 a60:	8e 32       	cpi	r24, 0x2E	; 46
 a62:	21 f4       	brne	.+8      	; 0xa6c <vfprintf+0xbe>
 a64:	26 fd       	sbrc	r18, 6
 a66:	6b c1       	rjmp	.+726    	; 0xd3e <vfprintf+0x390>
 a68:	20 64       	ori	r18, 0x40	; 64
 a6a:	06 c0       	rjmp	.+12     	; 0xa78 <vfprintf+0xca>
 a6c:	8c 36       	cpi	r24, 0x6C	; 108
 a6e:	11 f4       	brne	.+4      	; 0xa74 <vfprintf+0xc6>
 a70:	20 68       	ori	r18, 0x80	; 128
 a72:	02 c0       	rjmp	.+4      	; 0xa78 <vfprintf+0xca>
 a74:	88 36       	cpi	r24, 0x68	; 104
 a76:	41 f4       	brne	.+16     	; 0xa88 <vfprintf+0xda>
 a78:	f6 01       	movw	r30, r12
 a7a:	93 fd       	sbrc	r25, 3
 a7c:	85 91       	lpm	r24, Z+
 a7e:	93 ff       	sbrs	r25, 3
 a80:	81 91       	ld	r24, Z+
 a82:	6f 01       	movw	r12, r30
 a84:	81 11       	cpse	r24, r1
 a86:	c1 cf       	rjmp	.-126    	; 0xa0a <vfprintf+0x5c>
 a88:	98 2f       	mov	r25, r24
 a8a:	9f 7d       	andi	r25, 0xDF	; 223
 a8c:	95 54       	subi	r25, 0x45	; 69
 a8e:	93 30       	cpi	r25, 0x03	; 3
 a90:	28 f4       	brcc	.+10     	; 0xa9c <vfprintf+0xee>
 a92:	0c 5f       	subi	r16, 0xFC	; 252
 a94:	1f 4f       	sbci	r17, 0xFF	; 255
 a96:	ff e3       	ldi	r31, 0x3F	; 63
 a98:	f9 83       	std	Y+1, r31	; 0x01
 a9a:	0d c0       	rjmp	.+26     	; 0xab6 <vfprintf+0x108>
 a9c:	83 36       	cpi	r24, 0x63	; 99
 a9e:	31 f0       	breq	.+12     	; 0xaac <vfprintf+0xfe>
 aa0:	83 37       	cpi	r24, 0x73	; 115
 aa2:	71 f0       	breq	.+28     	; 0xac0 <vfprintf+0x112>
 aa4:	83 35       	cpi	r24, 0x53	; 83
 aa6:	09 f0       	breq	.+2      	; 0xaaa <vfprintf+0xfc>
 aa8:	5b c0       	rjmp	.+182    	; 0xb60 <vfprintf+0x1b2>
 aaa:	22 c0       	rjmp	.+68     	; 0xaf0 <vfprintf+0x142>
 aac:	f8 01       	movw	r30, r16
 aae:	80 81       	ld	r24, Z
 ab0:	89 83       	std	Y+1, r24	; 0x01
 ab2:	0e 5f       	subi	r16, 0xFE	; 254
 ab4:	1f 4f       	sbci	r17, 0xFF	; 255
 ab6:	44 24       	eor	r4, r4
 ab8:	43 94       	inc	r4
 aba:	51 2c       	mov	r5, r1
 abc:	54 01       	movw	r10, r8
 abe:	15 c0       	rjmp	.+42     	; 0xaea <vfprintf+0x13c>
 ac0:	38 01       	movw	r6, r16
 ac2:	f2 e0       	ldi	r31, 0x02	; 2
 ac4:	6f 0e       	add	r6, r31
 ac6:	71 1c       	adc	r7, r1
 ac8:	f8 01       	movw	r30, r16
 aca:	a0 80       	ld	r10, Z
 acc:	b1 80       	ldd	r11, Z+1	; 0x01
 ace:	26 ff       	sbrs	r18, 6
 ad0:	03 c0       	rjmp	.+6      	; 0xad8 <vfprintf+0x12a>
 ad2:	65 2d       	mov	r22, r5
 ad4:	70 e0       	ldi	r23, 0x00	; 0
 ad6:	02 c0       	rjmp	.+4      	; 0xadc <vfprintf+0x12e>
 ad8:	6f ef       	ldi	r22, 0xFF	; 255
 ada:	7f ef       	ldi	r23, 0xFF	; 255
 adc:	c5 01       	movw	r24, r10
 ade:	2c 87       	std	Y+12, r18	; 0x0c
 ae0:	0e 94 b4 06 	call	0xd68	; 0xd68 <strnlen>
 ae4:	2c 01       	movw	r4, r24
 ae6:	83 01       	movw	r16, r6
 ae8:	2c 85       	ldd	r18, Y+12	; 0x0c
 aea:	2f 77       	andi	r18, 0x7F	; 127
 aec:	22 2e       	mov	r2, r18
 aee:	17 c0       	rjmp	.+46     	; 0xb1e <vfprintf+0x170>
 af0:	38 01       	movw	r6, r16
 af2:	f2 e0       	ldi	r31, 0x02	; 2
 af4:	6f 0e       	add	r6, r31
 af6:	71 1c       	adc	r7, r1
 af8:	f8 01       	movw	r30, r16
 afa:	a0 80       	ld	r10, Z
 afc:	b1 80       	ldd	r11, Z+1	; 0x01
 afe:	26 ff       	sbrs	r18, 6
 b00:	03 c0       	rjmp	.+6      	; 0xb08 <vfprintf+0x15a>
 b02:	65 2d       	mov	r22, r5
 b04:	70 e0       	ldi	r23, 0x00	; 0
 b06:	02 c0       	rjmp	.+4      	; 0xb0c <vfprintf+0x15e>
 b08:	6f ef       	ldi	r22, 0xFF	; 255
 b0a:	7f ef       	ldi	r23, 0xFF	; 255
 b0c:	c5 01       	movw	r24, r10
 b0e:	2c 87       	std	Y+12, r18	; 0x0c
 b10:	0e 94 a9 06 	call	0xd52	; 0xd52 <strnlen_P>
 b14:	2c 01       	movw	r4, r24
 b16:	2c 85       	ldd	r18, Y+12	; 0x0c
 b18:	20 68       	ori	r18, 0x80	; 128
 b1a:	22 2e       	mov	r2, r18
 b1c:	83 01       	movw	r16, r6
 b1e:	23 fc       	sbrc	r2, 3
 b20:	1b c0       	rjmp	.+54     	; 0xb58 <vfprintf+0x1aa>
 b22:	83 2d       	mov	r24, r3
 b24:	90 e0       	ldi	r25, 0x00	; 0
 b26:	48 16       	cp	r4, r24
 b28:	59 06       	cpc	r5, r25
 b2a:	b0 f4       	brcc	.+44     	; 0xb58 <vfprintf+0x1aa>
 b2c:	b7 01       	movw	r22, r14
 b2e:	80 e2       	ldi	r24, 0x20	; 32
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	0e 94 bf 06 	call	0xd7e	; 0xd7e <fputc>
 b36:	3a 94       	dec	r3
 b38:	f4 cf       	rjmp	.-24     	; 0xb22 <vfprintf+0x174>
 b3a:	f5 01       	movw	r30, r10
 b3c:	27 fc       	sbrc	r2, 7
 b3e:	85 91       	lpm	r24, Z+
 b40:	27 fe       	sbrs	r2, 7
 b42:	81 91       	ld	r24, Z+
 b44:	5f 01       	movw	r10, r30
 b46:	b7 01       	movw	r22, r14
 b48:	90 e0       	ldi	r25, 0x00	; 0
 b4a:	0e 94 bf 06 	call	0xd7e	; 0xd7e <fputc>
 b4e:	31 10       	cpse	r3, r1
 b50:	3a 94       	dec	r3
 b52:	f1 e0       	ldi	r31, 0x01	; 1
 b54:	4f 1a       	sub	r4, r31
 b56:	51 08       	sbc	r5, r1
 b58:	41 14       	cp	r4, r1
 b5a:	51 04       	cpc	r5, r1
 b5c:	71 f7       	brne	.-36     	; 0xb3a <vfprintf+0x18c>
 b5e:	e5 c0       	rjmp	.+458    	; 0xd2a <vfprintf+0x37c>
 b60:	84 36       	cpi	r24, 0x64	; 100
 b62:	11 f0       	breq	.+4      	; 0xb68 <vfprintf+0x1ba>
 b64:	89 36       	cpi	r24, 0x69	; 105
 b66:	39 f5       	brne	.+78     	; 0xbb6 <vfprintf+0x208>
 b68:	f8 01       	movw	r30, r16
 b6a:	27 ff       	sbrs	r18, 7
 b6c:	07 c0       	rjmp	.+14     	; 0xb7c <vfprintf+0x1ce>
 b6e:	60 81       	ld	r22, Z
 b70:	71 81       	ldd	r23, Z+1	; 0x01
 b72:	82 81       	ldd	r24, Z+2	; 0x02
 b74:	93 81       	ldd	r25, Z+3	; 0x03
 b76:	0c 5f       	subi	r16, 0xFC	; 252
 b78:	1f 4f       	sbci	r17, 0xFF	; 255
 b7a:	08 c0       	rjmp	.+16     	; 0xb8c <vfprintf+0x1de>
 b7c:	60 81       	ld	r22, Z
 b7e:	71 81       	ldd	r23, Z+1	; 0x01
 b80:	07 2e       	mov	r0, r23
 b82:	00 0c       	add	r0, r0
 b84:	88 0b       	sbc	r24, r24
 b86:	99 0b       	sbc	r25, r25
 b88:	0e 5f       	subi	r16, 0xFE	; 254
 b8a:	1f 4f       	sbci	r17, 0xFF	; 255
 b8c:	2f 76       	andi	r18, 0x6F	; 111
 b8e:	72 2e       	mov	r7, r18
 b90:	97 ff       	sbrs	r25, 7
 b92:	09 c0       	rjmp	.+18     	; 0xba6 <vfprintf+0x1f8>
 b94:	90 95       	com	r25
 b96:	80 95       	com	r24
 b98:	70 95       	com	r23
 b9a:	61 95       	neg	r22
 b9c:	7f 4f       	sbci	r23, 0xFF	; 255
 b9e:	8f 4f       	sbci	r24, 0xFF	; 255
 ba0:	9f 4f       	sbci	r25, 0xFF	; 255
 ba2:	20 68       	ori	r18, 0x80	; 128
 ba4:	72 2e       	mov	r7, r18
 ba6:	2a e0       	ldi	r18, 0x0A	; 10
 ba8:	30 e0       	ldi	r19, 0x00	; 0
 baa:	a4 01       	movw	r20, r8
 bac:	0e 94 f7 06 	call	0xdee	; 0xdee <__ultoa_invert>
 bb0:	a8 2e       	mov	r10, r24
 bb2:	a8 18       	sub	r10, r8
 bb4:	44 c0       	rjmp	.+136    	; 0xc3e <vfprintf+0x290>
 bb6:	85 37       	cpi	r24, 0x75	; 117
 bb8:	29 f4       	brne	.+10     	; 0xbc4 <vfprintf+0x216>
 bba:	2f 7e       	andi	r18, 0xEF	; 239
 bbc:	b2 2e       	mov	r11, r18
 bbe:	2a e0       	ldi	r18, 0x0A	; 10
 bc0:	30 e0       	ldi	r19, 0x00	; 0
 bc2:	25 c0       	rjmp	.+74     	; 0xc0e <vfprintf+0x260>
 bc4:	f2 2f       	mov	r31, r18
 bc6:	f9 7f       	andi	r31, 0xF9	; 249
 bc8:	bf 2e       	mov	r11, r31
 bca:	8f 36       	cpi	r24, 0x6F	; 111
 bcc:	c1 f0       	breq	.+48     	; 0xbfe <vfprintf+0x250>
 bce:	18 f4       	brcc	.+6      	; 0xbd6 <vfprintf+0x228>
 bd0:	88 35       	cpi	r24, 0x58	; 88
 bd2:	79 f0       	breq	.+30     	; 0xbf2 <vfprintf+0x244>
 bd4:	b4 c0       	rjmp	.+360    	; 0xd3e <vfprintf+0x390>
 bd6:	80 37       	cpi	r24, 0x70	; 112
 bd8:	19 f0       	breq	.+6      	; 0xbe0 <vfprintf+0x232>
 bda:	88 37       	cpi	r24, 0x78	; 120
 bdc:	21 f0       	breq	.+8      	; 0xbe6 <vfprintf+0x238>
 bde:	af c0       	rjmp	.+350    	; 0xd3e <vfprintf+0x390>
 be0:	2f 2f       	mov	r18, r31
 be2:	20 61       	ori	r18, 0x10	; 16
 be4:	b2 2e       	mov	r11, r18
 be6:	b4 fe       	sbrs	r11, 4
 be8:	0d c0       	rjmp	.+26     	; 0xc04 <vfprintf+0x256>
 bea:	8b 2d       	mov	r24, r11
 bec:	84 60       	ori	r24, 0x04	; 4
 bee:	b8 2e       	mov	r11, r24
 bf0:	09 c0       	rjmp	.+18     	; 0xc04 <vfprintf+0x256>
 bf2:	24 ff       	sbrs	r18, 4
 bf4:	0a c0       	rjmp	.+20     	; 0xc0a <vfprintf+0x25c>
 bf6:	9f 2f       	mov	r25, r31
 bf8:	96 60       	ori	r25, 0x06	; 6
 bfa:	b9 2e       	mov	r11, r25
 bfc:	06 c0       	rjmp	.+12     	; 0xc0a <vfprintf+0x25c>
 bfe:	28 e0       	ldi	r18, 0x08	; 8
 c00:	30 e0       	ldi	r19, 0x00	; 0
 c02:	05 c0       	rjmp	.+10     	; 0xc0e <vfprintf+0x260>
 c04:	20 e1       	ldi	r18, 0x10	; 16
 c06:	30 e0       	ldi	r19, 0x00	; 0
 c08:	02 c0       	rjmp	.+4      	; 0xc0e <vfprintf+0x260>
 c0a:	20 e1       	ldi	r18, 0x10	; 16
 c0c:	32 e0       	ldi	r19, 0x02	; 2
 c0e:	f8 01       	movw	r30, r16
 c10:	b7 fe       	sbrs	r11, 7
 c12:	07 c0       	rjmp	.+14     	; 0xc22 <vfprintf+0x274>
 c14:	60 81       	ld	r22, Z
 c16:	71 81       	ldd	r23, Z+1	; 0x01
 c18:	82 81       	ldd	r24, Z+2	; 0x02
 c1a:	93 81       	ldd	r25, Z+3	; 0x03
 c1c:	0c 5f       	subi	r16, 0xFC	; 252
 c1e:	1f 4f       	sbci	r17, 0xFF	; 255
 c20:	06 c0       	rjmp	.+12     	; 0xc2e <vfprintf+0x280>
 c22:	60 81       	ld	r22, Z
 c24:	71 81       	ldd	r23, Z+1	; 0x01
 c26:	80 e0       	ldi	r24, 0x00	; 0
 c28:	90 e0       	ldi	r25, 0x00	; 0
 c2a:	0e 5f       	subi	r16, 0xFE	; 254
 c2c:	1f 4f       	sbci	r17, 0xFF	; 255
 c2e:	a4 01       	movw	r20, r8
 c30:	0e 94 f7 06 	call	0xdee	; 0xdee <__ultoa_invert>
 c34:	a8 2e       	mov	r10, r24
 c36:	a8 18       	sub	r10, r8
 c38:	fb 2d       	mov	r31, r11
 c3a:	ff 77       	andi	r31, 0x7F	; 127
 c3c:	7f 2e       	mov	r7, r31
 c3e:	76 fe       	sbrs	r7, 6
 c40:	0b c0       	rjmp	.+22     	; 0xc58 <vfprintf+0x2aa>
 c42:	37 2d       	mov	r19, r7
 c44:	3e 7f       	andi	r19, 0xFE	; 254
 c46:	a5 14       	cp	r10, r5
 c48:	50 f4       	brcc	.+20     	; 0xc5e <vfprintf+0x2b0>
 c4a:	74 fe       	sbrs	r7, 4
 c4c:	0a c0       	rjmp	.+20     	; 0xc62 <vfprintf+0x2b4>
 c4e:	72 fc       	sbrc	r7, 2
 c50:	08 c0       	rjmp	.+16     	; 0xc62 <vfprintf+0x2b4>
 c52:	37 2d       	mov	r19, r7
 c54:	3e 7e       	andi	r19, 0xEE	; 238
 c56:	05 c0       	rjmp	.+10     	; 0xc62 <vfprintf+0x2b4>
 c58:	ba 2c       	mov	r11, r10
 c5a:	37 2d       	mov	r19, r7
 c5c:	03 c0       	rjmp	.+6      	; 0xc64 <vfprintf+0x2b6>
 c5e:	ba 2c       	mov	r11, r10
 c60:	01 c0       	rjmp	.+2      	; 0xc64 <vfprintf+0x2b6>
 c62:	b5 2c       	mov	r11, r5
 c64:	34 ff       	sbrs	r19, 4
 c66:	0d c0       	rjmp	.+26     	; 0xc82 <vfprintf+0x2d4>
 c68:	fe 01       	movw	r30, r28
 c6a:	ea 0d       	add	r30, r10
 c6c:	f1 1d       	adc	r31, r1
 c6e:	80 81       	ld	r24, Z
 c70:	80 33       	cpi	r24, 0x30	; 48
 c72:	11 f4       	brne	.+4      	; 0xc78 <vfprintf+0x2ca>
 c74:	39 7e       	andi	r19, 0xE9	; 233
 c76:	09 c0       	rjmp	.+18     	; 0xc8a <vfprintf+0x2dc>
 c78:	32 ff       	sbrs	r19, 2
 c7a:	06 c0       	rjmp	.+12     	; 0xc88 <vfprintf+0x2da>
 c7c:	b3 94       	inc	r11
 c7e:	b3 94       	inc	r11
 c80:	04 c0       	rjmp	.+8      	; 0xc8a <vfprintf+0x2dc>
 c82:	83 2f       	mov	r24, r19
 c84:	86 78       	andi	r24, 0x86	; 134
 c86:	09 f0       	breq	.+2      	; 0xc8a <vfprintf+0x2dc>
 c88:	b3 94       	inc	r11
 c8a:	33 fd       	sbrc	r19, 3
 c8c:	13 c0       	rjmp	.+38     	; 0xcb4 <vfprintf+0x306>
 c8e:	30 ff       	sbrs	r19, 0
 c90:	06 c0       	rjmp	.+12     	; 0xc9e <vfprintf+0x2f0>
 c92:	5a 2c       	mov	r5, r10
 c94:	b3 14       	cp	r11, r3
 c96:	18 f4       	brcc	.+6      	; 0xc9e <vfprintf+0x2f0>
 c98:	53 0c       	add	r5, r3
 c9a:	5b 18       	sub	r5, r11
 c9c:	b3 2c       	mov	r11, r3
 c9e:	b3 14       	cp	r11, r3
 ca0:	68 f4       	brcc	.+26     	; 0xcbc <vfprintf+0x30e>
 ca2:	b7 01       	movw	r22, r14
 ca4:	80 e2       	ldi	r24, 0x20	; 32
 ca6:	90 e0       	ldi	r25, 0x00	; 0
 ca8:	3c 87       	std	Y+12, r19	; 0x0c
 caa:	0e 94 bf 06 	call	0xd7e	; 0xd7e <fputc>
 cae:	b3 94       	inc	r11
 cb0:	3c 85       	ldd	r19, Y+12	; 0x0c
 cb2:	f5 cf       	rjmp	.-22     	; 0xc9e <vfprintf+0x2f0>
 cb4:	b3 14       	cp	r11, r3
 cb6:	10 f4       	brcc	.+4      	; 0xcbc <vfprintf+0x30e>
 cb8:	3b 18       	sub	r3, r11
 cba:	01 c0       	rjmp	.+2      	; 0xcbe <vfprintf+0x310>
 cbc:	31 2c       	mov	r3, r1
 cbe:	34 ff       	sbrs	r19, 4
 cc0:	12 c0       	rjmp	.+36     	; 0xce6 <vfprintf+0x338>
 cc2:	b7 01       	movw	r22, r14
 cc4:	80 e3       	ldi	r24, 0x30	; 48
 cc6:	90 e0       	ldi	r25, 0x00	; 0
 cc8:	3c 87       	std	Y+12, r19	; 0x0c
 cca:	0e 94 bf 06 	call	0xd7e	; 0xd7e <fputc>
 cce:	3c 85       	ldd	r19, Y+12	; 0x0c
 cd0:	32 ff       	sbrs	r19, 2
 cd2:	17 c0       	rjmp	.+46     	; 0xd02 <vfprintf+0x354>
 cd4:	31 fd       	sbrc	r19, 1
 cd6:	03 c0       	rjmp	.+6      	; 0xcde <vfprintf+0x330>
 cd8:	88 e7       	ldi	r24, 0x78	; 120
 cda:	90 e0       	ldi	r25, 0x00	; 0
 cdc:	02 c0       	rjmp	.+4      	; 0xce2 <vfprintf+0x334>
 cde:	88 e5       	ldi	r24, 0x58	; 88
 ce0:	90 e0       	ldi	r25, 0x00	; 0
 ce2:	b7 01       	movw	r22, r14
 ce4:	0c c0       	rjmp	.+24     	; 0xcfe <vfprintf+0x350>
 ce6:	83 2f       	mov	r24, r19
 ce8:	86 78       	andi	r24, 0x86	; 134
 cea:	59 f0       	breq	.+22     	; 0xd02 <vfprintf+0x354>
 cec:	31 ff       	sbrs	r19, 1
 cee:	02 c0       	rjmp	.+4      	; 0xcf4 <vfprintf+0x346>
 cf0:	8b e2       	ldi	r24, 0x2B	; 43
 cf2:	01 c0       	rjmp	.+2      	; 0xcf6 <vfprintf+0x348>
 cf4:	80 e2       	ldi	r24, 0x20	; 32
 cf6:	37 fd       	sbrc	r19, 7
 cf8:	8d e2       	ldi	r24, 0x2D	; 45
 cfa:	b7 01       	movw	r22, r14
 cfc:	90 e0       	ldi	r25, 0x00	; 0
 cfe:	0e 94 bf 06 	call	0xd7e	; 0xd7e <fputc>
 d02:	a5 14       	cp	r10, r5
 d04:	38 f4       	brcc	.+14     	; 0xd14 <vfprintf+0x366>
 d06:	b7 01       	movw	r22, r14
 d08:	80 e3       	ldi	r24, 0x30	; 48
 d0a:	90 e0       	ldi	r25, 0x00	; 0
 d0c:	0e 94 bf 06 	call	0xd7e	; 0xd7e <fputc>
 d10:	5a 94       	dec	r5
 d12:	f7 cf       	rjmp	.-18     	; 0xd02 <vfprintf+0x354>
 d14:	aa 94       	dec	r10
 d16:	f4 01       	movw	r30, r8
 d18:	ea 0d       	add	r30, r10
 d1a:	f1 1d       	adc	r31, r1
 d1c:	80 81       	ld	r24, Z
 d1e:	b7 01       	movw	r22, r14
 d20:	90 e0       	ldi	r25, 0x00	; 0
 d22:	0e 94 bf 06 	call	0xd7e	; 0xd7e <fputc>
 d26:	a1 10       	cpse	r10, r1
 d28:	f5 cf       	rjmp	.-22     	; 0xd14 <vfprintf+0x366>
 d2a:	33 20       	and	r3, r3
 d2c:	09 f4       	brne	.+2      	; 0xd30 <vfprintf+0x382>
 d2e:	51 ce       	rjmp	.-862    	; 0x9d2 <vfprintf+0x24>
 d30:	b7 01       	movw	r22, r14
 d32:	80 e2       	ldi	r24, 0x20	; 32
 d34:	90 e0       	ldi	r25, 0x00	; 0
 d36:	0e 94 bf 06 	call	0xd7e	; 0xd7e <fputc>
 d3a:	3a 94       	dec	r3
 d3c:	f6 cf       	rjmp	.-20     	; 0xd2a <vfprintf+0x37c>
 d3e:	f7 01       	movw	r30, r14
 d40:	86 81       	ldd	r24, Z+6	; 0x06
 d42:	97 81       	ldd	r25, Z+7	; 0x07
 d44:	02 c0       	rjmp	.+4      	; 0xd4a <vfprintf+0x39c>
 d46:	8f ef       	ldi	r24, 0xFF	; 255
 d48:	9f ef       	ldi	r25, 0xFF	; 255
 d4a:	2c 96       	adiw	r28, 0x0c	; 12
 d4c:	e2 e1       	ldi	r30, 0x12	; 18
 d4e:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__epilogue_restores__>

00000d52 <strnlen_P>:
 d52:	fc 01       	movw	r30, r24
 d54:	05 90       	lpm	r0, Z+
 d56:	61 50       	subi	r22, 0x01	; 1
 d58:	70 40       	sbci	r23, 0x00	; 0
 d5a:	01 10       	cpse	r0, r1
 d5c:	d8 f7       	brcc	.-10     	; 0xd54 <strnlen_P+0x2>
 d5e:	80 95       	com	r24
 d60:	90 95       	com	r25
 d62:	8e 0f       	add	r24, r30
 d64:	9f 1f       	adc	r25, r31
 d66:	08 95       	ret

00000d68 <strnlen>:
 d68:	fc 01       	movw	r30, r24
 d6a:	61 50       	subi	r22, 0x01	; 1
 d6c:	70 40       	sbci	r23, 0x00	; 0
 d6e:	01 90       	ld	r0, Z+
 d70:	01 10       	cpse	r0, r1
 d72:	d8 f7       	brcc	.-10     	; 0xd6a <strnlen+0x2>
 d74:	80 95       	com	r24
 d76:	90 95       	com	r25
 d78:	8e 0f       	add	r24, r30
 d7a:	9f 1f       	adc	r25, r31
 d7c:	08 95       	ret

00000d7e <fputc>:
 d7e:	0f 93       	push	r16
 d80:	1f 93       	push	r17
 d82:	cf 93       	push	r28
 d84:	df 93       	push	r29
 d86:	fb 01       	movw	r30, r22
 d88:	23 81       	ldd	r18, Z+3	; 0x03
 d8a:	21 fd       	sbrc	r18, 1
 d8c:	03 c0       	rjmp	.+6      	; 0xd94 <fputc+0x16>
 d8e:	8f ef       	ldi	r24, 0xFF	; 255
 d90:	9f ef       	ldi	r25, 0xFF	; 255
 d92:	28 c0       	rjmp	.+80     	; 0xde4 <fputc+0x66>
 d94:	22 ff       	sbrs	r18, 2
 d96:	16 c0       	rjmp	.+44     	; 0xdc4 <fputc+0x46>
 d98:	46 81       	ldd	r20, Z+6	; 0x06
 d9a:	57 81       	ldd	r21, Z+7	; 0x07
 d9c:	24 81       	ldd	r18, Z+4	; 0x04
 d9e:	35 81       	ldd	r19, Z+5	; 0x05
 da0:	42 17       	cp	r20, r18
 da2:	53 07       	cpc	r21, r19
 da4:	44 f4       	brge	.+16     	; 0xdb6 <fputc+0x38>
 da6:	a0 81       	ld	r26, Z
 da8:	b1 81       	ldd	r27, Z+1	; 0x01
 daa:	9d 01       	movw	r18, r26
 dac:	2f 5f       	subi	r18, 0xFF	; 255
 dae:	3f 4f       	sbci	r19, 0xFF	; 255
 db0:	31 83       	std	Z+1, r19	; 0x01
 db2:	20 83       	st	Z, r18
 db4:	8c 93       	st	X, r24
 db6:	26 81       	ldd	r18, Z+6	; 0x06
 db8:	37 81       	ldd	r19, Z+7	; 0x07
 dba:	2f 5f       	subi	r18, 0xFF	; 255
 dbc:	3f 4f       	sbci	r19, 0xFF	; 255
 dbe:	37 83       	std	Z+7, r19	; 0x07
 dc0:	26 83       	std	Z+6, r18	; 0x06
 dc2:	10 c0       	rjmp	.+32     	; 0xde4 <fputc+0x66>
 dc4:	eb 01       	movw	r28, r22
 dc6:	09 2f       	mov	r16, r25
 dc8:	18 2f       	mov	r17, r24
 dca:	00 84       	ldd	r0, Z+8	; 0x08
 dcc:	f1 85       	ldd	r31, Z+9	; 0x09
 dce:	e0 2d       	mov	r30, r0
 dd0:	09 95       	icall
 dd2:	89 2b       	or	r24, r25
 dd4:	e1 f6       	brne	.-72     	; 0xd8e <fputc+0x10>
 dd6:	8e 81       	ldd	r24, Y+6	; 0x06
 dd8:	9f 81       	ldd	r25, Y+7	; 0x07
 dda:	01 96       	adiw	r24, 0x01	; 1
 ddc:	9f 83       	std	Y+7, r25	; 0x07
 dde:	8e 83       	std	Y+6, r24	; 0x06
 de0:	81 2f       	mov	r24, r17
 de2:	90 2f       	mov	r25, r16
 de4:	df 91       	pop	r29
 de6:	cf 91       	pop	r28
 de8:	1f 91       	pop	r17
 dea:	0f 91       	pop	r16
 dec:	08 95       	ret

00000dee <__ultoa_invert>:
 dee:	fa 01       	movw	r30, r20
 df0:	aa 27       	eor	r26, r26
 df2:	28 30       	cpi	r18, 0x08	; 8
 df4:	51 f1       	breq	.+84     	; 0xe4a <__ultoa_invert+0x5c>
 df6:	20 31       	cpi	r18, 0x10	; 16
 df8:	81 f1       	breq	.+96     	; 0xe5a <__ultoa_invert+0x6c>
 dfa:	e8 94       	clt
 dfc:	6f 93       	push	r22
 dfe:	6e 7f       	andi	r22, 0xFE	; 254
 e00:	6e 5f       	subi	r22, 0xFE	; 254
 e02:	7f 4f       	sbci	r23, 0xFF	; 255
 e04:	8f 4f       	sbci	r24, 0xFF	; 255
 e06:	9f 4f       	sbci	r25, 0xFF	; 255
 e08:	af 4f       	sbci	r26, 0xFF	; 255
 e0a:	b1 e0       	ldi	r27, 0x01	; 1
 e0c:	3e d0       	rcall	.+124    	; 0xe8a <__ultoa_invert+0x9c>
 e0e:	b4 e0       	ldi	r27, 0x04	; 4
 e10:	3c d0       	rcall	.+120    	; 0xe8a <__ultoa_invert+0x9c>
 e12:	67 0f       	add	r22, r23
 e14:	78 1f       	adc	r23, r24
 e16:	89 1f       	adc	r24, r25
 e18:	9a 1f       	adc	r25, r26
 e1a:	a1 1d       	adc	r26, r1
 e1c:	68 0f       	add	r22, r24
 e1e:	79 1f       	adc	r23, r25
 e20:	8a 1f       	adc	r24, r26
 e22:	91 1d       	adc	r25, r1
 e24:	a1 1d       	adc	r26, r1
 e26:	6a 0f       	add	r22, r26
 e28:	71 1d       	adc	r23, r1
 e2a:	81 1d       	adc	r24, r1
 e2c:	91 1d       	adc	r25, r1
 e2e:	a1 1d       	adc	r26, r1
 e30:	20 d0       	rcall	.+64     	; 0xe72 <__ultoa_invert+0x84>
 e32:	09 f4       	brne	.+2      	; 0xe36 <__ultoa_invert+0x48>
 e34:	68 94       	set
 e36:	3f 91       	pop	r19
 e38:	2a e0       	ldi	r18, 0x0A	; 10
 e3a:	26 9f       	mul	r18, r22
 e3c:	11 24       	eor	r1, r1
 e3e:	30 19       	sub	r19, r0
 e40:	30 5d       	subi	r19, 0xD0	; 208
 e42:	31 93       	st	Z+, r19
 e44:	de f6       	brtc	.-74     	; 0xdfc <__ultoa_invert+0xe>
 e46:	cf 01       	movw	r24, r30
 e48:	08 95       	ret
 e4a:	46 2f       	mov	r20, r22
 e4c:	47 70       	andi	r20, 0x07	; 7
 e4e:	40 5d       	subi	r20, 0xD0	; 208
 e50:	41 93       	st	Z+, r20
 e52:	b3 e0       	ldi	r27, 0x03	; 3
 e54:	0f d0       	rcall	.+30     	; 0xe74 <__ultoa_invert+0x86>
 e56:	c9 f7       	brne	.-14     	; 0xe4a <__ultoa_invert+0x5c>
 e58:	f6 cf       	rjmp	.-20     	; 0xe46 <__ultoa_invert+0x58>
 e5a:	46 2f       	mov	r20, r22
 e5c:	4f 70       	andi	r20, 0x0F	; 15
 e5e:	40 5d       	subi	r20, 0xD0	; 208
 e60:	4a 33       	cpi	r20, 0x3A	; 58
 e62:	18 f0       	brcs	.+6      	; 0xe6a <__ultoa_invert+0x7c>
 e64:	49 5d       	subi	r20, 0xD9	; 217
 e66:	31 fd       	sbrc	r19, 1
 e68:	40 52       	subi	r20, 0x20	; 32
 e6a:	41 93       	st	Z+, r20
 e6c:	02 d0       	rcall	.+4      	; 0xe72 <__ultoa_invert+0x84>
 e6e:	a9 f7       	brne	.-22     	; 0xe5a <__ultoa_invert+0x6c>
 e70:	ea cf       	rjmp	.-44     	; 0xe46 <__ultoa_invert+0x58>
 e72:	b4 e0       	ldi	r27, 0x04	; 4
 e74:	a6 95       	lsr	r26
 e76:	97 95       	ror	r25
 e78:	87 95       	ror	r24
 e7a:	77 95       	ror	r23
 e7c:	67 95       	ror	r22
 e7e:	ba 95       	dec	r27
 e80:	c9 f7       	brne	.-14     	; 0xe74 <__ultoa_invert+0x86>
 e82:	00 97       	sbiw	r24, 0x00	; 0
 e84:	61 05       	cpc	r22, r1
 e86:	71 05       	cpc	r23, r1
 e88:	08 95       	ret
 e8a:	9b 01       	movw	r18, r22
 e8c:	ac 01       	movw	r20, r24
 e8e:	0a 2e       	mov	r0, r26
 e90:	06 94       	lsr	r0
 e92:	57 95       	ror	r21
 e94:	47 95       	ror	r20
 e96:	37 95       	ror	r19
 e98:	27 95       	ror	r18
 e9a:	ba 95       	dec	r27
 e9c:	c9 f7       	brne	.-14     	; 0xe90 <__ultoa_invert+0xa2>
 e9e:	62 0f       	add	r22, r18
 ea0:	73 1f       	adc	r23, r19
 ea2:	84 1f       	adc	r24, r20
 ea4:	95 1f       	adc	r25, r21
 ea6:	a0 1d       	adc	r26, r0
 ea8:	08 95       	ret

00000eaa <__prologue_saves__>:
 eaa:	2f 92       	push	r2
 eac:	3f 92       	push	r3
 eae:	4f 92       	push	r4
 eb0:	5f 92       	push	r5
 eb2:	6f 92       	push	r6
 eb4:	7f 92       	push	r7
 eb6:	8f 92       	push	r8
 eb8:	9f 92       	push	r9
 eba:	af 92       	push	r10
 ebc:	bf 92       	push	r11
 ebe:	cf 92       	push	r12
 ec0:	df 92       	push	r13
 ec2:	ef 92       	push	r14
 ec4:	ff 92       	push	r15
 ec6:	0f 93       	push	r16
 ec8:	1f 93       	push	r17
 eca:	cf 93       	push	r28
 ecc:	df 93       	push	r29
 ece:	cd b7       	in	r28, 0x3d	; 61
 ed0:	de b7       	in	r29, 0x3e	; 62
 ed2:	ca 1b       	sub	r28, r26
 ed4:	db 0b       	sbc	r29, r27
 ed6:	0f b6       	in	r0, 0x3f	; 63
 ed8:	f8 94       	cli
 eda:	de bf       	out	0x3e, r29	; 62
 edc:	0f be       	out	0x3f, r0	; 63
 ede:	cd bf       	out	0x3d, r28	; 61
 ee0:	09 94       	ijmp

00000ee2 <__epilogue_restores__>:
 ee2:	2a 88       	ldd	r2, Y+18	; 0x12
 ee4:	39 88       	ldd	r3, Y+17	; 0x11
 ee6:	48 88       	ldd	r4, Y+16	; 0x10
 ee8:	5f 84       	ldd	r5, Y+15	; 0x0f
 eea:	6e 84       	ldd	r6, Y+14	; 0x0e
 eec:	7d 84       	ldd	r7, Y+13	; 0x0d
 eee:	8c 84       	ldd	r8, Y+12	; 0x0c
 ef0:	9b 84       	ldd	r9, Y+11	; 0x0b
 ef2:	aa 84       	ldd	r10, Y+10	; 0x0a
 ef4:	b9 84       	ldd	r11, Y+9	; 0x09
 ef6:	c8 84       	ldd	r12, Y+8	; 0x08
 ef8:	df 80       	ldd	r13, Y+7	; 0x07
 efa:	ee 80       	ldd	r14, Y+6	; 0x06
 efc:	fd 80       	ldd	r15, Y+5	; 0x05
 efe:	0c 81       	ldd	r16, Y+4	; 0x04
 f00:	1b 81       	ldd	r17, Y+3	; 0x03
 f02:	aa 81       	ldd	r26, Y+2	; 0x02
 f04:	b9 81       	ldd	r27, Y+1	; 0x01
 f06:	ce 0f       	add	r28, r30
 f08:	d1 1d       	adc	r29, r1
 f0a:	0f b6       	in	r0, 0x3f	; 63
 f0c:	f8 94       	cli
 f0e:	de bf       	out	0x3e, r29	; 62
 f10:	0f be       	out	0x3f, r0	; 63
 f12:	cd bf       	out	0x3d, r28	; 61
 f14:	ed 01       	movw	r28, r26
 f16:	08 95       	ret

00000f18 <_exit>:
 f18:	f8 94       	cli

00000f1a <__stop_program>:
 f1a:	ff cf       	rjmp	.-2      	; 0xf1a <__stop_program>
