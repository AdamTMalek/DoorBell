
Receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c2  00800100  00000f5e  00000ff2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000014f  008001c2  008001c2  000010b4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001110  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001150  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014d9  00000000  00000000  00001298  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000884  00000000  00000000  00002771  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d9a  00000000  00000000  00002ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  00003d90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000472  00000000  00000000  000040d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ae6  00000000  00000000  00004542  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00005028  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 12 02 	jmp	0x424	; 0x424 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 1d 04 	jmp	0x83a	; 0x83a <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e5       	ldi	r30, 0x5E	; 94
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 3c       	cpi	r26, 0xC2	; 194
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a2 ec       	ldi	r26, 0xC2	; 194
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9d 01 	call	0x33a	; 0x33a <main>
  9e:	0c 94 ad 07 	jmp	0xf5a	; 0xf5a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ESP_AT>:
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
	ESP_Response.ERROR = 0;
	ESP_Response.INPUT = 0;
  a6:	80 e0       	ldi	r24, 0x00	; 0
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	0e 94 0e 04 	call	0x81c	; 0x81c <UART_SendString>
  ae:	08 95       	ret

000000b0 <WaitForResponse>:
}
void WaitForResponse(void)
{
	while(ESP_Response.OK == 0 &&
  b0:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
  b4:	80 fd       	sbrc	r24, 0
  b6:	08 c0       	rjmp	.+16     	; 0xc8 <WaitForResponse+0x18>
		  ESP_Response.ERROR == 0 &&
  b8:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
	ESP_Response.ERROR = 0;
	ESP_Response.INPUT = 0;
}
void WaitForResponse(void)
{
	while(ESP_Response.OK == 0 &&
  bc:	81 fd       	sbrc	r24, 1
  be:	04 c0       	rjmp	.+8      	; 0xc8 <WaitForResponse+0x18>
		  ESP_Response.ERROR == 0 &&
		  ESP_Response.INPUT == 0);
  c0:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
	ESP_Response.INPUT = 0;
}
void WaitForResponse(void)
{
	while(ESP_Response.OK == 0 &&
		  ESP_Response.ERROR == 0 &&
  c4:	82 ff       	sbrs	r24, 2
  c6:	f4 cf       	rjmp	.-24     	; 0xb0 <WaitForResponse>
  c8:	08 95       	ret

000000ca <ESP_Initialize>:
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
  ca:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <ESP_Response>
	ESP_Response.ERROR = 0;
  d4:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
  d8:	8d 7f       	andi	r24, 0xFD	; 253
  da:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <ESP_Response>
	ESP_Response.INPUT = 0;
  de:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
  e2:	8b 7f       	andi	r24, 0xFB	; 251
  e4:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <ESP_Response>
/************************************************************************/
uint8_t ESP_Initialize(void)
{
	/*--- Checking communication between microcontroller and ESP ---*/
	ResetResponse();
	bufferIndex = 0;
  e8:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <bufferIndex>
	ESP_AT();
  ec:	0e 94 53 00 	call	0xa6	; 0xa6 <ESP_AT>
	WaitForResponse();
  f0:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
  f4:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
  f8:	8e 7f       	andi	r24, 0xFE	; 254
  fa:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <ESP_Response>
	ESP_Response.ERROR = 0;
  fe:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
 102:	8d 7f       	andi	r24, 0xFD	; 253
 104:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <ESP_Response>
	ESP_Response.INPUT = 0;
 108:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
 10c:	8b 7f       	andi	r24, 0xFB	; 251
 10e:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <ESP_Response>

	/*--- ECHO ---*/
#if ESP_ECHO == 0
	UART_SendString("ATE0\r\n");
#else
	UART_SendString("ATE1\r\n");
 112:	8e e0       	ldi	r24, 0x0E	; 14
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	0e 94 0e 04 	call	0x81c	; 0x81c <UART_SendString>
#endif
	WaitForResponse();
 11a:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
 11e:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
 122:	8e 7f       	andi	r24, 0xFE	; 254
 124:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <ESP_Response>
	ESP_Response.ERROR = 0;
 128:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
 12c:	8d 7f       	andi	r24, 0xFD	; 253
 12e:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <ESP_Response>
	ESP_Response.INPUT = 0;
 132:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
 136:	8b 7f       	andi	r24, 0xFB	; 251
 138:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <ESP_Response>
	WaitForResponse();
	ResetResponse();

	/*--- MODE ---*/
#if ESP_WIFIMODE == 1
	UART_SendString("AT+CWMODE=1\r\n"); //STATION MODE
 13c:	85 e1       	ldi	r24, 0x15	; 21
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	0e 94 0e 04 	call	0x81c	; 0x81c <UART_SendString>
#elif ESP_WIFIMODE == 2
	UART_SendString("AT+CWMODE=2\r\n"); //ACCESS POINT MODE
#elif ESP_WIFIMODE == 3
	UART_SendString("AT+CWMODE=3\r\n"); //STATON + ACCESS POINT MODE
#endif
	WaitForResponse();
 144:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
 148:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
 14c:	8e 7f       	andi	r24, 0xFE	; 254
 14e:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <ESP_Response>
	ESP_Response.ERROR = 0;
 152:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
 156:	8d 7f       	andi	r24, 0xFD	; 253
 158:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <ESP_Response>
	ESP_Response.INPUT = 0;
 15c:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
 160:	8b 7f       	andi	r24, 0xFB	; 251
 162:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <ESP_Response>
	WaitForResponse();
	ResetResponse();

	/*--- CONNECTING TO WIFI ---*/
#if ESP_WIFIMODE == 1 || ESP_WIFIMODE  == 3
	ESP_Response.ERROR = 0;
 166:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
 16a:	8d 7f       	andi	r24, 0xFD	; 253
 16c:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <ESP_Response>
	
	UART_SendString("AT+CWJAP=\"");
 170:	83 e2       	ldi	r24, 0x23	; 35
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	0e 94 0e 04 	call	0x81c	; 0x81c <UART_SendString>
	UART_SendString(ESP_APNAME);
 178:	81 e3       	ldi	r24, 0x31	; 49
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	0e 94 0e 04 	call	0x81c	; 0x81c <UART_SendString>
	UART_SendString("\",\"");
 180:	80 e5       	ldi	r24, 0x50	; 80
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	0e 94 0e 04 	call	0x81c	; 0x81c <UART_SendString>
	UART_SendString(ESP_APPASSWORD);
 188:	81 e3       	ldi	r24, 0x31	; 49
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	0e 94 0e 04 	call	0x81c	; 0x81c <UART_SendString>
	UART_SendString("\"\r\n");
 190:	8e e2       	ldi	r24, 0x2E	; 46
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	0e 94 0e 04 	call	0x81c	; 0x81c <UART_SendString>
	WaitForResponse();
 198:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	if(ESP_Response.ERROR == 1)
 19c:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
 1a0:	81 ff       	sbrs	r24, 1
 1a2:	07 c0       	rjmp	.+14     	; 0x1b2 <ESP_Initialize+0xe8>
	{
		ESP_Response.ERROR = 0;
 1a4:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
 1a8:	8d 7f       	andi	r24, 0xFD	; 253
 1aa:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <ESP_Response>
		return 2;
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	08 95       	ret
	}
	else
	{
		ESP_Response.OK = 0;
 1b2:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
 1b6:	8e 7f       	andi	r24, 0xFE	; 254
 1b8:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <ESP_Response>
	WaitForResponse();
	ResetResponse();

#endif /* ESP_WIFIMODE == 2 || ESP_WIFIMODE == 3 */
#if ESP_CONNECTIONTYPE == 1 //UDP
	UART_SendString("AT+CIPMUX=0\r\n");
 1bc:	82 e3       	ldi	r24, 0x32	; 50
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	0e 94 0e 04 	call	0x81c	; 0x81c <UART_SendString>
	WaitForResponse();
 1c4:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
 1c8:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
 1cc:	8e 7f       	andi	r24, 0xFE	; 254
 1ce:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <ESP_Response>
	ESP_Response.ERROR = 0;
 1d2:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
 1d6:	8d 7f       	andi	r24, 0xFD	; 253
 1d8:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <ESP_Response>
	ESP_Response.INPUT = 0;
 1dc:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
 1e0:	8b 7f       	andi	r24, 0xFB	; 251
 1e2:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <ESP_Response>
#endif /* ESP_WIFIMODE == 2 || ESP_WIFIMODE == 3 */
#if ESP_CONNECTIONTYPE == 1 //UDP
	UART_SendString("AT+CIPMUX=0\r\n");
	WaitForResponse();
	ResetResponse();
	UART_SendString("AT+CIPSTART=\"UDP\",\"");
 1e6:	80 e4       	ldi	r24, 0x40	; 64
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	0e 94 0e 04 	call	0x81c	; 0x81c <UART_SendString>
	UART_SendString(ESP_IP);
 1ee:	84 e5       	ldi	r24, 0x54	; 84
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 0e 04 	call	0x81c	; 0x81c <UART_SendString>
	UART_SendString("\",");
 1f6:	82 e6       	ldi	r24, 0x62	; 98
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	0e 94 0e 04 	call	0x81c	; 0x81c <UART_SendString>
	UART_SendString(ESP_PORT);
 1fe:	85 e6       	ldi	r24, 0x65	; 101
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	0e 94 0e 04 	call	0x81c	; 0x81c <UART_SendString>
	UART_SendString("\r\n");
 206:	8f e2       	ldi	r24, 0x2F	; 47
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	0e 94 0e 04 	call	0x81c	; 0x81c <UART_SendString>
	WaitForResponse();
 20e:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	if(ESP_Response.ERROR)
 212:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
 216:	81 ff       	sbrs	r24, 1
 218:	11 c0       	rjmp	.+34     	; 0x23c <ESP_Initialize+0x172>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
 21a:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
 21e:	8e 7f       	andi	r24, 0xFE	; 254
 220:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <ESP_Response>
	ESP_Response.ERROR = 0;
 224:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
 228:	8d 7f       	andi	r24, 0xFD	; 253
 22a:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <ESP_Response>
	ESP_Response.INPUT = 0;
 22e:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
 232:	8b 7f       	andi	r24, 0xFB	; 251
 234:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <ESP_Response>
	UART_SendString("\r\n");
	WaitForResponse();
	if(ESP_Response.ERROR)
	{
		ResetResponse();
		return 1;
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	08 95       	ret
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
 23c:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
 240:	8e 7f       	andi	r24, 0xFE	; 254
 242:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <ESP_Response>
	ESP_Response.ERROR = 0;
 246:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
 24a:	8d 7f       	andi	r24, 0xFD	; 253
 24c:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <ESP_Response>
	ESP_Response.INPUT = 0;
 250:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
 254:	8b 7f       	andi	r24, 0xFB	; 251
 256:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <ESP_Response>
#else
	UART_SendString("AT+CIPDINFO=1\r\n");
	WaitForResponse();
	ResetResponse();
#endif
	return 0;
 25a:	80 e0       	ldi	r24, 0x00	; 0
}
 25c:	08 95       	ret

0000025e <ESP_Send>:
}
/************************************************************************/
/*                               SENDING                                */
/************************************************************************/
uint8_t ESP_Send(char* data, char* connectionID)
{
 25e:	ef 92       	push	r14
 260:	ff 92       	push	r15
 262:	0f 93       	push	r16
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	00 d0       	rcall	.+0      	; 0x26c <ESP_Send+0xe>
 26c:	00 d0       	rcall	.+0      	; 0x26e <ESP_Send+0x10>
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
 272:	9c 01       	movw	r18, r24
	if(ESP_Connections == 0) //If there are no connections...
 274:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <ESP_Connections>
 278:	99 23       	and	r25, r25
 27a:	09 f4       	brne	.+2      	; 0x27e <ESP_Send+0x20>
 27c:	52 c0       	rjmp	.+164    	; 0x322 <ESP_Send+0xc4>
 27e:	89 01       	movw	r16, r18
		return 1; //Return 1 - error

	//Length of data
	uint16_t size = strlen(data);
 280:	f9 01       	movw	r30, r18
 282:	01 90       	ld	r0, Z+
 284:	00 20       	and	r0, r0
 286:	e9 f7       	brne	.-6      	; 0x282 <ESP_Send+0x24>
 288:	31 97       	sbiw	r30, 0x01	; 1
 28a:	e2 1b       	sub	r30, r18
 28c:	f3 0b       	sbc	r31, r19
	char length[4];
	sprintf(length, "%d", size);
 28e:	ff 93       	push	r31
 290:	ef 93       	push	r30
 292:	8a e6       	ldi	r24, 0x6A	; 106
 294:	91 e0       	ldi	r25, 0x01	; 1
 296:	9f 93       	push	r25
 298:	8f 93       	push	r24
 29a:	ce 01       	movw	r24, r28
 29c:	01 96       	adiw	r24, 0x01	; 1
 29e:	7c 01       	movw	r14, r24
 2a0:	9f 93       	push	r25
 2a2:	8f 93       	push	r24
 2a4:	0e 94 d5 04 	call	0x9aa	; 0x9aa <sprintf>

	UART_SendString("AT+CIPSEND=");
 2a8:	8d e6       	ldi	r24, 0x6D	; 109
 2aa:	91 e0       	ldi	r25, 0x01	; 1
 2ac:	0e 94 0e 04 	call	0x81c	; 0x81c <UART_SendString>
#if ESP_CONNECTIONTYPE == 2
	UART_SendString(connectionID);
	UART_SendString(",");
#endif
	UART_SendString(length);
 2b0:	c7 01       	movw	r24, r14
 2b2:	0e 94 0e 04 	call	0x81c	; 0x81c <UART_SendString>
	UART_SendString("\r\n");
 2b6:	8f e2       	ldi	r24, 0x2F	; 47
 2b8:	91 e0       	ldi	r25, 0x01	; 1
 2ba:	0e 94 0e 04 	call	0x81c	; 0x81c <UART_SendString>
	while(!ESP_Response.INPUT && !ESP_Response.ERROR);
 2be:	0f 90       	pop	r0
 2c0:	0f 90       	pop	r0
 2c2:	0f 90       	pop	r0
 2c4:	0f 90       	pop	r0
 2c6:	0f 90       	pop	r0
 2c8:	0f 90       	pop	r0
 2ca:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <ESP_Response>
 2ce:	92 fd       	sbrc	r25, 2
 2d0:	04 c0       	rjmp	.+8      	; 0x2da <ESP_Send+0x7c>
 2d2:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <ESP_Response>
 2d6:	91 ff       	sbrs	r25, 1
 2d8:	f8 cf       	rjmp	.-16     	; 0x2ca <ESP_Send+0x6c>
	if(ESP_Response.INPUT == 1)
 2da:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
 2de:	82 ff       	sbrs	r24, 2
 2e0:	04 c0       	rjmp	.+8      	; 0x2ea <ESP_Send+0x8c>
	{
		UART_SendString(data);
 2e2:	c8 01       	movw	r24, r16
 2e4:	0e 94 0e 04 	call	0x81c	; 0x81c <UART_SendString>
 2e8:	0b c0       	rjmp	.+22     	; 0x300 <ESP_Send+0xa2>
	}
	else if(ESP_Response.ERROR) 
 2ea:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
 2ee:	81 ff       	sbrs	r24, 1
 2f0:	07 c0       	rjmp	.+14     	; 0x300 <ESP_Send+0xa2>
	{
		ESP_Response.ERROR = 0;
 2f2:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
 2f6:	8d 7f       	andi	r24, 0xFD	; 253
 2f8:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <ESP_Response>
		return 1;
 2fc:	81 e0       	ldi	r24, 0x01	; 1
 2fe:	12 c0       	rjmp	.+36     	; 0x324 <ESP_Send+0xc6>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
 300:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
 304:	8e 7f       	andi	r24, 0xFE	; 254
 306:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <ESP_Response>
	ESP_Response.ERROR = 0;
 30a:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
 30e:	8d 7f       	andi	r24, 0xFD	; 253
 310:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <ESP_Response>
	ESP_Response.INPUT = 0;
 314:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
 318:	8b 7f       	andi	r24, 0xFB	; 251
 31a:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <ESP_Response>
#if ESP_CONNECTIONTYPE == 2
	UART_SendString("AT+CIPCLOSE=0\r\n");
	WaitForResponse();
#endif
	ResetResponse();
	return 0;
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	01 c0       	rjmp	.+2      	; 0x324 <ESP_Send+0xc6>
/*                               SENDING                                */
/************************************************************************/
uint8_t ESP_Send(char* data, char* connectionID)
{
	if(ESP_Connections == 0) //If there are no connections...
		return 1; //Return 1 - error
 322:	81 e0       	ldi	r24, 0x01	; 1
	UART_SendString("AT+CIPCLOSE=0\r\n");
	WaitForResponse();
#endif
	ResetResponse();
	return 0;
}
 324:	0f 90       	pop	r0
 326:	0f 90       	pop	r0
 328:	0f 90       	pop	r0
 32a:	0f 90       	pop	r0
 32c:	df 91       	pop	r29
 32e:	cf 91       	pop	r28
 330:	1f 91       	pop	r17
 332:	0f 91       	pop	r16
 334:	ff 90       	pop	r15
 336:	ef 90       	pop	r14
 338:	08 95       	ret

0000033a <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 33a:	2f ef       	ldi	r18, 0xFF	; 255
 33c:	3f ef       	ldi	r19, 0xFF	; 255
 33e:	8c e2       	ldi	r24, 0x2C	; 44
 340:	21 50       	subi	r18, 0x01	; 1
 342:	30 40       	sbci	r19, 0x00	; 0
 344:	80 40       	sbci	r24, 0x00	; 0
 346:	e1 f7       	brne	.-8      	; 0x340 <main+0x6>
 348:	00 c0       	rjmp	.+0      	; 0x34a <main+0x10>
 34a:	00 00       	nop
char data[120]; //Data received by RF12
int main(void)
{
	_delay_ms(1000);
	// --- LED --- //
	DDRB = (1<<LED0);
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	84 b9       	out	0x04, r24	; 4

	// --- TIMER --- //
	TCCR1B = (1<<CS12) | (1<<CS10); // clk/1024 prescaler
 350:	95 e0       	ldi	r25, 0x05	; 5
 352:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 = (1<<TOIE1); //Overflow interrupt enable
 356:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

	// --- RF12 --- //
	RF_Initialize();
 35a:	0e 94 24 02 	call	0x448	; 0x448 <RF_Initialize>
	RF_SetRange(RANGE_433MHZ);
 35e:	80 e1       	ldi	r24, 0x10	; 16
 360:	0e 94 7f 02 	call	0x4fe	; 0x4fe <RF_SetRange>
	RF_SetFrequency(RFFREQ433(432.74));
 364:	88 ee       	ldi	r24, 0xE8	; 232
 366:	93 e0       	ldi	r25, 0x03	; 3
 368:	0e 94 9c 02 	call	0x538	; 0x538 <RF_SetFrequency>
	RF_SetBaudRate(9600);
 36c:	80 e8       	ldi	r24, 0x80	; 128
 36e:	95 e2       	ldi	r25, 0x25	; 37
 370:	0e 94 ac 02 	call	0x558	; 0x558 <RF_SetBaudRate>
	RF_SetBandwith(RxBW200, LNA_6, RSSI_79);
 374:	44 e0       	ldi	r20, 0x04	; 4
 376:	61 e0       	ldi	r22, 0x01	; 1
 378:	84 e0       	ldi	r24, 0x04	; 4
 37a:	0e 94 85 02 	call	0x50a	; 0x50a <RF_SetBandwith>
	RF_SetPower(PWRdB_0, TxBW120);
 37e:	67 e0       	ldi	r22, 0x07	; 7
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	0e 94 d7 02 	call	0x5ae	; 0x5ae <RF_SetPower>
	RF_DisableWakeUpTimer();
 386:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <RF_DisableWakeUpTimer>
	RF_Transmit(0x0000);
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	0e 94 4d 02 	call	0x49a	; 0x49a <RF_Transmit>
	RF_Transmit(0xCC77);
 392:	87 e7       	ldi	r24, 0x77	; 119
 394:	9c ec       	ldi	r25, 0xCC	; 204
 396:	0e 94 4d 02 	call	0x49a	; 0x49a <RF_Transmit>
	uint8_t ret = 0;

	sei();
 39a:	78 94       	sei

	// --- UART --- //
	UART_Initlialise(UBRR);
 39c:	87 e0       	ldi	r24, 0x07	; 7
 39e:	90 e0       	ldi	r25, 0x00	; 0
 3a0:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <UART_Initlialise>
 3a4:	9f ef       	ldi	r25, 0xFF	; 255
 3a6:	2f e7       	ldi	r18, 0x7F	; 127
 3a8:	36 e1       	ldi	r19, 0x16	; 22
 3aa:	91 50       	subi	r25, 0x01	; 1
 3ac:	20 40       	sbci	r18, 0x00	; 0
 3ae:	30 40       	sbci	r19, 0x00	; 0
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <main+0x70>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <main+0x7a>
 3b4:	00 00       	nop
	_delay_ms(500);
	ESP_Initialize();
 3b6:	0e 94 65 00 	call	0xca	; 0xca <ESP_Initialize>
	UART_SendString("AT+CIFSR\r\n");
 3ba:	88 ea       	ldi	r24, 0xA8	; 168
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	0e 94 0e 04 	call	0x81c	; 0x81c <UART_SendString>
	WaitForResponse();
 3c2:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	while (1)
	{
		ESP_Send("Halo","0");
 3c6:	68 e6       	ldi	r22, 0x68	; 104
 3c8:	71 e0       	ldi	r23, 0x01	; 1
 3ca:	83 eb       	ldi	r24, 0xB3	; 179
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	0e 94 2f 01 	call	0x25e	; 0x25e <ESP_Send>
 3d2:	8f ef       	ldi	r24, 0xFF	; 255
 3d4:	9f ef       	ldi	r25, 0xFF	; 255
 3d6:	26 e7       	ldi	r18, 0x76	; 118
 3d8:	31 e0       	ldi	r19, 0x01	; 1
 3da:	81 50       	subi	r24, 0x01	; 1
 3dc:	90 40       	sbci	r25, 0x00	; 0
 3de:	20 40       	sbci	r18, 0x00	; 0
 3e0:	30 40       	sbci	r19, 0x00	; 0
 3e2:	d9 f7       	brne	.-10     	; 0x3da <main+0xa0>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <main+0xac>
 3e6:	00 00       	nop
		_delay_ms(10000);
	// --- RF12 RECEIVING DATA --- //
#if RF_UseIRQ == 1
	if(!(RF_status.status & 0x07))
 3e8:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <RF_status>
 3ec:	87 70       	andi	r24, 0x07	; 7
 3ee:	11 f4       	brne	.+4      	; 0x3f4 <main+0xba>
	{
		RF_RxStart();
 3f0:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <RF_RxStart>
	}
	if(RF_status.New)
 3f4:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <RF_status>
 3f8:	82 ff       	sbrs	r24, 2
 3fa:	e5 cf       	rjmp	.-54     	; 0x3c6 <main+0x8c>
	{
		ret = RF_RxFinish(data);
 3fc:	86 ec       	ldi	r24, 0xC6	; 198
 3fe:	91 e0       	ldi	r25, 0x01	; 1
 400:	0e 94 91 03 	call	0x722	; 0x722 <RF_RxFinish>

		if(data > 0 && ret < 254)
 404:	8e 3f       	cpi	r24, 0xFE	; 254
 406:	38 f4       	brcc	.+14     	; 0x416 <__FUSE_REGION_LENGTH__+0x16>
		{
			UART_SendString(data);
 408:	86 ec       	ldi	r24, 0xC6	; 198
 40a:	91 e0       	ldi	r25, 0x01	; 1
 40c:	0e 94 0e 04 	call	0x81c	; 0x81c <UART_SendString>
			data[16] = 0;
 410:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <data+0x10>
 414:	d8 cf       	rjmp	.-80     	; 0x3c6 <main+0x8c>
		}
		else if(!ret)
 416:	81 11       	cpse	r24, r1
 418:	d6 cf       	rjmp	.-84     	; 0x3c6 <main+0x8c>
		{
			UART_SendString("CRC ERROR");
 41a:	88 eb       	ldi	r24, 0xB8	; 184
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	0e 94 0e 04 	call	0x81c	; 0x81c <UART_SendString>
 422:	d1 cf       	rjmp	.-94     	; 0x3c6 <main+0x8c>

00000424 <__vector_13>:
#endif
	}
}
// --- "ALIVE" LED INTERRUPT --- //
ISR(TIMER1_OVF_vect) //4.5s on 14MHz clock
{
 424:	1f 92       	push	r1
 426:	0f 92       	push	r0
 428:	0f b6       	in	r0, 0x3f	; 63
 42a:	0f 92       	push	r0
 42c:	11 24       	eor	r1, r1
 42e:	8f 93       	push	r24
 430:	9f 93       	push	r25
	PORTB ^= (1<<LED0);
 432:	95 b1       	in	r25, 0x05	; 5
 434:	81 e0       	ldi	r24, 0x01	; 1
 436:	89 27       	eor	r24, r25
 438:	85 b9       	out	0x05, r24	; 5
 43a:	9f 91       	pop	r25
 43c:	8f 91       	pop	r24
 43e:	0f 90       	pop	r0
 440:	0f be       	out	0x3f, r0	; 63
 442:	0f 90       	pop	r0
 444:	1f 90       	pop	r1
 446:	18 95       	reti

00000448 <RF_Initialize>:
//-------------------------INITIALIZATION-------------------------------//
void RF_Initialize(void)
{
	//	INTIALZATION OF PINS
	
	RF_DDR |= (1<<SDI) | (1<<SCK) | (1<<CS);
 448:	84 b1       	in	r24, 0x04	; 4
 44a:	8c 62       	ori	r24, 0x2C	; 44
 44c:	84 b9       	out	0x04, r24	; 4
	RF_DDR &= ~(1<<SDO);
 44e:	24 98       	cbi	0x04, 4	; 4
	
	RF_PORT |= (1<<CS);
 450:	2a 9a       	sbi	0x05, 2	; 5
	//SPCR = (1<<SPE) | (1<<MSTR); //SCK - Fosc/128

#if RF_UseIRQ == 1
	RF_PORT |= (1<<SDO);
 452:	2c 9a       	sbi	0x05, 4	; 5
 454:	2f ef       	ldi	r18, 0xFF	; 255
 456:	8f e7       	ldi	r24, 0x7F	; 127
 458:	94 e0       	ldi	r25, 0x04	; 4
 45a:	21 50       	subi	r18, 0x01	; 1
 45c:	80 40       	sbci	r24, 0x00	; 0
 45e:	90 40       	sbci	r25, 0x00	; 0
 460:	e1 f7       	brne	.-8      	; 0x45a <RF_Initialize+0x12>
 462:	00 c0       	rjmp	.+0      	; 0x464 <RF_Initialize+0x1c>
 464:	00 00       	nop
#endif

	_delay_ms(100); //WAITING FOR MODULE TO RESET

#if RF_UseIRQ == 1
	RF_status.Rx = 0;
 466:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <RF_status>
 46a:	8e 7f       	andi	r24, 0xFE	; 254
 46c:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <RF_status>
	RF_status.Tx = 0;
 470:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <RF_status>
 474:	8d 7f       	andi	r24, 0xFD	; 253
 476:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <RF_status>
	RF_status.New = 0;
 47a:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <RF_status>
 47e:	8b 7f       	andi	r24, 0xFB	; 251
 480:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <RF_status>

	RF_IRQDDR &= ~(1<<IRQ);
 484:	52 98       	cbi	0x0a, 2	; 10
	//LOW STATE ON INT0 WILL GENERATE AN INTERRUPT
	EICRA &= ~(1<<ISC01);
 486:	e9 e6       	ldi	r30, 0x69	; 105
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 81       	ld	r24, Z
 48c:	8d 7f       	andi	r24, 0xFD	; 253
 48e:	80 83       	st	Z, r24
	EICRA &= ~(1<<ISC00);
 490:	80 81       	ld	r24, Z
 492:	8e 7f       	andi	r24, 0xFE	; 254
 494:	80 83       	st	Z, r24

	EIMSK |= (1<<INT0);
 496:	e8 9a       	sbi	0x1d, 0	; 29
 498:	08 95       	ret

0000049a <RF_Transmit>:
#endif
}

//----------------------------TRANSMITION-------------------------------//
uint16_t RF_Transmit(uint16_t data)
{
 49a:	ac 01       	movw	r20, r24
	uint16_t ret_val = 0;
	uint8_t i;

	RF_PORT &= ~(1<<CS);
 49c:	2a 98       	cbi	0x05, 2	; 5
 49e:	90 e1       	ldi	r25, 0x10	; 16
}

//----------------------------TRANSMITION-------------------------------//
uint16_t RF_Transmit(uint16_t data)
{
	uint16_t ret_val = 0;
 4a0:	20 e0       	ldi	r18, 0x00	; 0
 4a2:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;

	RF_PORT &= ~(1<<CS);
	for (i=0; i<16; i++)
	{
		if (data & 0x8000) RF_PORT |= (1<<SDI);
 4a4:	55 23       	and	r21, r21
 4a6:	14 f4       	brge	.+4      	; 0x4ac <RF_Transmit+0x12>
 4a8:	2b 9a       	sbi	0x05, 3	; 5
 4aa:	01 c0       	rjmp	.+2      	; 0x4ae <RF_Transmit+0x14>
		else RF_PORT &= ~(1<<SDI);
 4ac:	2b 98       	cbi	0x05, 3	; 5

		ret_val <<= 1;
 4ae:	22 0f       	add	r18, r18
 4b0:	33 1f       	adc	r19, r19
		if (RF_PIN&(1<<SDO)) ret_val |= 1;
 4b2:	1c 99       	sbic	0x03, 4	; 3
 4b4:	21 60       	ori	r18, 0x01	; 1
		RF_PORT |= (1<<SCK);
 4b6:	2d 9a       	sbi	0x05, 5	; 5
		data <<= 1;
 4b8:	44 0f       	add	r20, r20
 4ba:	55 1f       	adc	r21, r21
		asm("nop");
 4bc:	00 00       	nop
		asm("nop");
 4be:	00 00       	nop
		RF_PORT &= ~(1<<SCK);
 4c0:	2d 98       	cbi	0x05, 5	; 5
 4c2:	91 50       	subi	r25, 0x01	; 1
{
	uint16_t ret_val = 0;
	uint8_t i;

	RF_PORT &= ~(1<<CS);
	for (i=0; i<16; i++)
 4c4:	79 f7       	brne	.-34     	; 0x4a4 <RF_Transmit+0xa>
		data <<= 1;
		asm("nop");
		asm("nop");
		RF_PORT &= ~(1<<SCK);
	}
	RF_PORT |= (1<<CS);
 4c6:	2a 9a       	sbi	0x05, 2	; 5

	RF_PORT |= (1<<CS);

	return response;
	*/
}
 4c8:	c9 01       	movw	r24, r18
 4ca:	08 95       	ret

000004cc <UpdateChecksum>:
//--------------------CALCULATING CHECKSUM (CRC16)--------------------------//
uint16_t UpdateChecksum(uint16_t checksum, uint8_t data)
{
	uint16_t tmp = (data<<8);
 4cc:	70 e0       	ldi	r23, 0x00	; 0
 4ce:	76 2f       	mov	r23, r22
 4d0:	66 27       	eor	r22, r22
 4d2:	28 e0       	ldi	r18, 0x08	; 8
 4d4:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i < 8; i++)
	{
		if((checksum ^ tmp) & 0x8000)
 4d6:	ab 01       	movw	r20, r22
 4d8:	48 27       	eor	r20, r24
 4da:	59 27       	eor	r21, r25
 4dc:	55 23       	and	r21, r21
 4de:	3c f4       	brge	.+14     	; 0x4ee <UpdateChecksum+0x22>
			checksum = (checksum<<1) ^ 0x1021;
 4e0:	88 0f       	add	r24, r24
 4e2:	99 1f       	adc	r25, r25
 4e4:	41 e2       	ldi	r20, 0x21	; 33
 4e6:	84 27       	eor	r24, r20
 4e8:	40 e1       	ldi	r20, 0x10	; 16
 4ea:	94 27       	eor	r25, r20
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <UpdateChecksum+0x26>
		else
			checksum = (checksum<<1);
 4ee:	88 0f       	add	r24, r24
 4f0:	99 1f       	adc	r25, r25
		tmp = tmp << 1;
 4f2:	66 0f       	add	r22, r22
 4f4:	77 1f       	adc	r23, r23
 4f6:	21 50       	subi	r18, 0x01	; 1
 4f8:	31 09       	sbc	r19, r1
}
//--------------------CALCULATING CHECKSUM (CRC16)--------------------------//
uint16_t UpdateChecksum(uint16_t checksum, uint8_t data)
{
	uint16_t tmp = (data<<8);
	for(int i = 0; i < 8; i++)
 4fa:	69 f7       	brne	.-38     	; 0x4d6 <UpdateChecksum+0xa>
		else
			checksum = (checksum<<1);
		tmp = tmp << 1;
	}
	return checksum;
}
 4fc:	08 95       	ret

000004fe <RF_SetRange>:
//--------------------RANGE BAUDRATE AND FREQUENCY----------------------//
void RF_SetRange(enum RANGE range)
{
	RF_Transmit(0x80C7 | range); //ENABLE FIFO, SET RANGE
 4fe:	90 e0       	ldi	r25, 0x00	; 0
 500:	87 6c       	ori	r24, 0xC7	; 199
 502:	90 68       	ori	r25, 0x80	; 128
 504:	0e 94 4d 02 	call	0x49a	; 0x49a <RF_Transmit>
 508:	08 95       	ret

0000050a <RF_SetBandwith>:
}
void RF_SetBandwith(uint8_t bandwidth, uint8_t gain, uint8_t drssi)
{
	RF_Transmit(0x9000 | ((bandwidth & 7) << 5) | ((gain & 3) << 3) | (drssi & 7));
 50a:	47 70       	andi	r20, 0x07	; 7
 50c:	50 e0       	ldi	r21, 0x00	; 0
 50e:	50 69       	ori	r21, 0x90	; 144
 510:	63 70       	andi	r22, 0x03	; 3
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	66 0f       	add	r22, r22
 516:	77 1f       	adc	r23, r23
 518:	66 0f       	add	r22, r22
 51a:	77 1f       	adc	r23, r23
 51c:	66 0f       	add	r22, r22
 51e:	77 1f       	adc	r23, r23
 520:	46 2b       	or	r20, r22
 522:	57 2b       	or	r21, r23
 524:	20 e2       	ldi	r18, 0x20	; 32
 526:	82 9f       	mul	r24, r18
 528:	c0 01       	movw	r24, r0
 52a:	11 24       	eor	r1, r1
 52c:	99 27       	eor	r25, r25
 52e:	84 2b       	or	r24, r20
 530:	95 2b       	or	r25, r21
 532:	0e 94 4d 02 	call	0x49a	; 0x49a <RF_Transmit>
 536:	08 95       	ret

00000538 <RF_SetFrequency>:
}
void RF_SetFrequency(uint16_t frequency)
{
	if(frequency < 96)
 538:	80 36       	cpi	r24, 0x60	; 96
 53a:	91 05       	cpc	r25, r1
 53c:	38 f0       	brcs	.+14     	; 0x54c <RF_SetFrequency+0x14>
 53e:	80 34       	cpi	r24, 0x40	; 64
 540:	2f e0       	ldi	r18, 0x0F	; 15
 542:	92 07       	cpc	r25, r18
 544:	28 f0       	brcs	.+10     	; 0x550 <RF_SetFrequency+0x18>
 546:	8f e3       	ldi	r24, 0x3F	; 63
 548:	9f e0       	ldi	r25, 0x0F	; 15
 54a:	02 c0       	rjmp	.+4      	; 0x550 <RF_SetFrequency+0x18>
		frequency = 96;
 54c:	80 e6       	ldi	r24, 0x60	; 96
 54e:	90 e0       	ldi	r25, 0x00	; 0
	else if (frequency > 3903)
		frequency = 3903;
	RF_Transmit(0xA000 | frequency);
 550:	90 6a       	ori	r25, 0xA0	; 160
 552:	0e 94 4d 02 	call	0x49a	; 0x49a <RF_Transmit>
 556:	08 95       	ret

00000558 <RF_SetBaudRate>:
}
void RF_SetBaudRate(uint16_t baud)
{
	if(baud<663)
 558:	87 39       	cpi	r24, 0x97	; 151
 55a:	22 e0       	ldi	r18, 0x02	; 2
 55c:	92 07       	cpc	r25, r18
 55e:	08 f1       	brcs	.+66     	; 0x5a2 <RF_SetBaudRate+0x4a>
 560:	9c 01       	movw	r18, r24
		return;
	if(baud<5400)
 562:	28 31       	cpi	r18, 0x18	; 24
 564:	85 e1       	ldi	r24, 0x15	; 21
 566:	38 07       	cpc	r19, r24
 568:	78 f4       	brcc	.+30     	; 0x588 <RF_SetBaudRate+0x30>
		RF_Transmit(0xC680 | ((43104/baud)-1));
 56a:	40 e0       	ldi	r20, 0x00	; 0
 56c:	50 e0       	ldi	r21, 0x00	; 0
 56e:	60 e6       	ldi	r22, 0x60	; 96
 570:	78 ea       	ldi	r23, 0xA8	; 168
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	0e 94 b6 04 	call	0x96c	; 0x96c <__divmodsi4>
 57a:	c9 01       	movw	r24, r18
 57c:	01 97       	sbiw	r24, 0x01	; 1
 57e:	80 68       	ori	r24, 0x80	; 128
 580:	96 6c       	ori	r25, 0xC6	; 198
 582:	0e 94 4d 02 	call	0x49a	; 0x49a <RF_Transmit>
 586:	08 95       	ret
	else
		RF_Transmit(0xC600 | ((344828UL/baud)-1));		
 588:	40 e0       	ldi	r20, 0x00	; 0
 58a:	50 e0       	ldi	r21, 0x00	; 0
 58c:	6c ef       	ldi	r22, 0xFC	; 252
 58e:	72 e4       	ldi	r23, 0x42	; 66
 590:	85 e0       	ldi	r24, 0x05	; 5
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	0e 94 94 04 	call	0x928	; 0x928 <__udivmodsi4>
 598:	c9 01       	movw	r24, r18
 59a:	01 97       	sbiw	r24, 0x01	; 1
 59c:	96 6c       	ori	r25, 0xC6	; 198
 59e:	0e 94 4d 02 	call	0x49a	; 0x49a <RF_Transmit>
 5a2:	08 95       	ret

000005a4 <RF_DisableWakeUpTimer>:
}
//----------------------WAKE UP TIMER DISABLING-------------------------//
void RF_DisableWakeUpTimer(void)
{
	RF_Transmit(0xE000);
 5a4:	80 e0       	ldi	r24, 0x00	; 0
 5a6:	90 ee       	ldi	r25, 0xE0	; 224
 5a8:	0e 94 4d 02 	call	0x49a	; 0x49a <RF_Transmit>
 5ac:	08 95       	ret

000005ae <RF_SetPower>:
}
//---------------------------POWER SETTING------------------------------//
void RF_SetPower(uint8_t power, uint8_t mod)
{
	RF_Transmit(0x9800 | (power & 7) | ((mod & 15)<<4));
 5ae:	87 70       	andi	r24, 0x07	; 7
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	98 69       	ori	r25, 0x98	; 152
 5b4:	20 e1       	ldi	r18, 0x10	; 16
 5b6:	62 9f       	mul	r22, r18
 5b8:	b0 01       	movw	r22, r0
 5ba:	11 24       	eor	r1, r1
 5bc:	77 27       	eor	r23, r23
 5be:	86 2b       	or	r24, r22
 5c0:	97 2b       	or	r25, r23
 5c2:	0e 94 4d 02 	call	0x49a	; 0x49a <RF_Transmit>
 5c6:	08 95       	ret

000005c8 <__vector_1>:
uint8_t RF_Data[(RF_DataLength + 10)]; // +10 FOR THE REST OF THE FRAME

//----------------------------------------------------------------------//
//-------------------------------ISR------------------------------------//
ISR(INT0_vect)
{	
 5c8:	1f 92       	push	r1
 5ca:	0f 92       	push	r0
 5cc:	0f b6       	in	r0, 0x3f	; 63
 5ce:	0f 92       	push	r0
 5d0:	11 24       	eor	r1, r1
 5d2:	2f 93       	push	r18
 5d4:	3f 93       	push	r19
 5d6:	4f 93       	push	r20
 5d8:	5f 93       	push	r21
 5da:	6f 93       	push	r22
 5dc:	7f 93       	push	r23
 5de:	8f 93       	push	r24
 5e0:	9f 93       	push	r25
 5e2:	af 93       	push	r26
 5e4:	bf 93       	push	r27
 5e6:	cf 93       	push	r28
 5e8:	ef 93       	push	r30
 5ea:	ff 93       	push	r31
	if(RF_status.Rx)
 5ec:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <RF_status>
 5f0:	80 ff       	sbrs	r24, 0
 5f2:	3d c0       	rjmp	.+122    	; 0x66e <__vector_1+0xa6>
	{
		if(RF_Index < RF_DataLength)
 5f4:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <__data_end>
 5f8:	84 36       	cpi	r24, 0x64	; 100
 5fa:	d8 f4       	brcc	.+54     	; 0x632 <__vector_1+0x6a>
		{
			RF_Data[RF_Index++] = RF_Transmit(0xB000) & 0x00FF;
 5fc:	c0 91 c2 01 	lds	r28, 0x01C2	; 0x8001c2 <__data_end>
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	8c 0f       	add	r24, r28
 604:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <__data_end>
 608:	80 e0       	ldi	r24, 0x00	; 0
 60a:	90 eb       	ldi	r25, 0xB0	; 176
 60c:	0e 94 4d 02 	call	0x49a	; 0x49a <RF_Transmit>
 610:	ec 2f       	mov	r30, r28
 612:	f0 e0       	ldi	r31, 0x00	; 0
 614:	e1 5c       	subi	r30, 0xC1	; 193
 616:	fd 4f       	sbci	r31, 0xFD	; 253
 618:	80 83       	st	Z, r24
			RF_Transmit(0x8208);
			RF_status.Rx = 0;
			RF_status.New = 1; //FRAME NOT RIGHT
			return;
		}
		if(RF_Index >= (RF_Data[0] + 3))
 61a:	20 91 c2 01 	lds	r18, 0x01C2	; 0x8001c2 <__data_end>
 61e:	30 e0       	ldi	r19, 0x00	; 0
 620:	80 91 3f 02 	lds	r24, 0x023F	; 0x80023f <RF_Data>
 624:	90 e0       	ldi	r25, 0x00	; 0
 626:	03 96       	adiw	r24, 0x03	; 3
 628:	28 17       	cp	r18, r24
 62a:	39 07       	cpc	r19, r25
 62c:	0c f4       	brge	.+2      	; 0x630 <__vector_1+0x68>
 62e:	40 c0       	rjmp	.+128    	; 0x6b0 <__vector_1+0xe8>
 630:	0f c0       	rjmp	.+30     	; 0x650 <__vector_1+0x88>
		{
			RF_Data[RF_Index++] = RF_Transmit(0xB000) & 0x00FF;
		}
		else
		{
			RF_Transmit(0x8208);
 632:	88 e0       	ldi	r24, 0x08	; 8
 634:	92 e8       	ldi	r25, 0x82	; 130
 636:	0e 94 4d 02 	call	0x49a	; 0x49a <RF_Transmit>
			RF_status.Rx = 0;
 63a:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <RF_status>
 63e:	8e 7f       	andi	r24, 0xFE	; 254
 640:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <RF_status>
			RF_status.New = 1; //FRAME NOT RIGHT
 644:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <RF_status>
 648:	84 60       	ori	r24, 0x04	; 4
 64a:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <RF_status>
			return;
 64e:	30 c0       	rjmp	.+96     	; 0x6b0 <__vector_1+0xe8>
		}
		if(RF_Index >= (RF_Data[0] + 3))
		{
			RF_Transmit(0x8208);
 650:	88 e0       	ldi	r24, 0x08	; 8
 652:	92 e8       	ldi	r25, 0x82	; 130
 654:	0e 94 4d 02 	call	0x49a	; 0x49a <RF_Transmit>
			RF_status.Rx = 0;
 658:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <RF_status>
 65c:	8e 7f       	andi	r24, 0xFE	; 254
 65e:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <RF_status>
			RF_status.New = 1; //FRAME IS RIGHT
 662:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <RF_status>
 666:	84 60       	ori	r24, 0x04	; 4
 668:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <RF_status>
 66c:	21 c0       	rjmp	.+66     	; 0x6b0 <__vector_1+0xe8>
		}
	}
	else if(RF_status.Tx)
 66e:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <RF_status>
 672:	81 ff       	sbrs	r24, 1
 674:	1d c0       	rjmp	.+58     	; 0x6b0 <__vector_1+0xe8>
	{
		RF_Transmit(0xB800 | RF_Data[RF_Index]);
 676:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <__data_end>
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	e1 5c       	subi	r30, 0xC1	; 193
 67e:	fd 4f       	sbci	r31, 0xFD	; 253
 680:	80 81       	ld	r24, Z
 682:	90 e0       	ldi	r25, 0x00	; 0
 684:	98 6b       	ori	r25, 0xB8	; 184
 686:	0e 94 4d 02 	call	0x49a	; 0x49a <RF_Transmit>
		if(!RF_Index)
 68a:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <__data_end>
 68e:	81 11       	cpse	r24, r1
 690:	0a c0       	rjmp	.+20     	; 0x6a6 <__vector_1+0xde>
		{
			RF_status.Tx = 0;
 692:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <RF_status>
 696:	8d 7f       	andi	r24, 0xFD	; 253
 698:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <RF_status>
			RF_Transmit(0x8208); //TX OFF
 69c:	88 e0       	ldi	r24, 0x08	; 8
 69e:	92 e8       	ldi	r25, 0x82	; 130
 6a0:	0e 94 4d 02 	call	0x49a	; 0x49a <RF_Transmit>
 6a4:	05 c0       	rjmp	.+10     	; 0x6b0 <__vector_1+0xe8>
		}
		else
		{	
			RF_Index--;
 6a6:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <__data_end>
 6aa:	81 50       	subi	r24, 0x01	; 1
 6ac:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <__data_end>
		}
	}
}
 6b0:	ff 91       	pop	r31
 6b2:	ef 91       	pop	r30
 6b4:	cf 91       	pop	r28
 6b6:	bf 91       	pop	r27
 6b8:	af 91       	pop	r26
 6ba:	9f 91       	pop	r25
 6bc:	8f 91       	pop	r24
 6be:	7f 91       	pop	r23
 6c0:	6f 91       	pop	r22
 6c2:	5f 91       	pop	r21
 6c4:	4f 91       	pop	r20
 6c6:	3f 91       	pop	r19
 6c8:	2f 91       	pop	r18
 6ca:	0f 90       	pop	r0
 6cc:	0f be       	out	0x3f, r0	; 63
 6ce:	0f 90       	pop	r0
 6d0:	1f 90       	pop	r1
 6d2:	18 95       	reti

000006d4 <RF_RxStart>:
//-----------------------------DATA RECEIVE-----------------------------//
uint8_t RF_RxStart(void)
{
	if(RF_status.New)
 6d4:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <RF_status>
 6d8:	82 fd       	sbrc	r24, 2
 6da:	1d c0       	rjmp	.+58     	; 0x716 <RF_RxStart+0x42>
		return 1;		//BUFFER NOT EMPTY YET
	if(RF_status.Tx)
 6dc:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <RF_status>
 6e0:	81 fd       	sbrc	r24, 1
 6e2:	1b c0       	rjmp	.+54     	; 0x71a <RF_RxStart+0x46>
		return 2;		//TRANSMITION IN PROGRESS
	if(RF_status.Rx)
 6e4:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <RF_status>
 6e8:	80 fd       	sbrc	r24, 0
 6ea:	19 c0       	rjmp	.+50     	; 0x71e <RF_RxStart+0x4a>
		return 3;		//RECEIVING IN PROGRESS

	RF_Transmit(0x82C8); //RX ON
 6ec:	88 ec       	ldi	r24, 0xC8	; 200
 6ee:	92 e8       	ldi	r25, 0x82	; 130
 6f0:	0e 94 4d 02 	call	0x49a	; 0x49a <RF_Transmit>

	//FIFO RESET
	RF_Transmit(0xCA81);
 6f4:	81 e8       	ldi	r24, 0x81	; 129
 6f6:	9a ec       	ldi	r25, 0xCA	; 202
 6f8:	0e 94 4d 02 	call	0x49a	; 0x49a <RF_Transmit>
	RF_Transmit(0xCA83);
 6fc:	83 e8       	ldi	r24, 0x83	; 131
 6fe:	9a ec       	ldi	r25, 0xCA	; 202
 700:	0e 94 4d 02 	call	0x49a	; 0x49a <RF_Transmit>

	RF_Index = 0;
 704:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <__data_end>
	RF_status.Rx = 1;
 708:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <RF_status>
 70c:	81 60       	ori	r24, 0x01	; 1
 70e:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <RF_status>

	return 0;			//EVERYTING OK
 712:	80 e0       	ldi	r24, 0x00	; 0
 714:	08 95       	ret
}
//-----------------------------DATA RECEIVE-----------------------------//
uint8_t RF_RxStart(void)
{
	if(RF_status.New)
		return 1;		//BUFFER NOT EMPTY YET
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	08 95       	ret
	if(RF_status.Tx)
		return 2;		//TRANSMITION IN PROGRESS
 71a:	82 e0       	ldi	r24, 0x02	; 2
 71c:	08 95       	ret
	if(RF_status.Rx)
		return 3;		//RECEIVING IN PROGRESS
 71e:	83 e0       	ldi	r24, 0x03	; 3

	RF_Index = 0;
	RF_status.Rx = 1;

	return 0;			//EVERYTING OK
}
 720:	08 95       	ret

00000722 <RF_RxFinish>:
 *	OR (ERRORS)
 *	255 - receiving in progress
 *	254 - previous frame was not read
*/
uint8_t RF_RxFinish(char* data)
{
 722:	cf 92       	push	r12
 724:	df 92       	push	r13
 726:	ef 92       	push	r14
 728:	ff 92       	push	r15
 72a:	0f 93       	push	r16
 72c:	1f 93       	push	r17
 72e:	cf 93       	push	r28
 730:	df 93       	push	r29
 732:	ec 01       	movw	r28, r24
	uint16_t crc;
	uint16_t crc_checksum = 0;
	uint8_t size = RF_Data[0];
 734:	10 91 3f 02 	lds	r17, 0x023F	; 0x80023f <RF_Data>

	if(RF_status.Rx)
 738:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <RF_status>
 73c:	90 fd       	sbrc	r25, 0
 73e:	4d c0       	rjmp	.+154    	; 0x7da <RF_RxFinish+0xb8>
		return 255;
	if(!RF_status.New)
 740:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <RF_status>
 744:	82 ff       	sbrs	r24, 2
 746:	4b c0       	rjmp	.+150    	; 0x7de <RF_RxFinish+0xbc>
		return 254;

	if(size > RF_DataLength)
 748:	15 36       	cpi	r17, 0x65	; 101
 74a:	58 f4       	brcc	.+22     	; 0x762 <RF_RxFinish+0x40>
		data[0] = 0;
		RF_status.New = 0;
		return 0; //FRAME SIZE NOT RIGHT
	}
	uint8_t i;
	for(i = 0; i < (size + 1); i++)
 74c:	e1 2e       	mov	r14, r17
 74e:	f1 2c       	mov	r15, r1
 750:	c7 01       	movw	r24, r14
 752:	01 96       	adiw	r24, 0x01	; 1
 754:	6c 01       	movw	r12, r24
 756:	20 e0       	ldi	r18, 0x00	; 0
 758:	30 e0       	ldi	r19, 0x00	; 0
 75a:	00 e0       	ldi	r16, 0x00	; 0
 75c:	80 e0       	ldi	r24, 0x00	; 0
 75e:	90 e0       	ldi	r25, 0x00	; 0
 760:	08 c0       	rjmp	.+16     	; 0x772 <RF_RxFinish+0x50>
	if(!RF_status.New)
		return 254;

	if(size > RF_DataLength)
	{
		data[0] = 0;
 762:	18 82       	st	Y, r1
		RF_status.New = 0;
 764:	80 91 3e 02 	lds	r24, 0x023E	; 0x80023e <RF_status>
 768:	8b 7f       	andi	r24, 0xFB	; 251
 76a:	80 93 3e 02 	sts	0x023E, r24	; 0x80023e <RF_status>
		return 0; //FRAME SIZE NOT RIGHT
 76e:	80 e0       	ldi	r24, 0x00	; 0
 770:	39 c0       	rjmp	.+114    	; 0x7e4 <RF_RxFinish+0xc2>
	}
	uint8_t i;
	for(i = 0; i < (size + 1); i++)
	{
		crc_checksum = UpdateChecksum(crc_checksum, RF_Data[i]);
 772:	f9 01       	movw	r30, r18
 774:	e1 5c       	subi	r30, 0xC1	; 193
 776:	fd 4f       	sbci	r31, 0xFD	; 253
 778:	60 81       	ld	r22, Z
 77a:	0e 94 66 02 	call	0x4cc	; 0x4cc <UpdateChecksum>
		data[0] = 0;
		RF_status.New = 0;
		return 0; //FRAME SIZE NOT RIGHT
	}
	uint8_t i;
	for(i = 0; i < (size + 1); i++)
 77e:	0f 5f       	subi	r16, 0xFF	; 255
 780:	20 2f       	mov	r18, r16
 782:	30 e0       	ldi	r19, 0x00	; 0
 784:	2c 15       	cp	r18, r12
 786:	3d 05       	cpc	r19, r13
 788:	a4 f3       	brlt	.-24     	; 0x772 <RF_RxFinish+0x50>
	{
		crc_checksum = UpdateChecksum(crc_checksum, RF_Data[i]);
	}

	crc = RF_Data[i++];
 78a:	f9 01       	movw	r30, r18
 78c:	e1 5c       	subi	r30, 0xC1	; 193
 78e:	fd 4f       	sbci	r31, 0xFD	; 253
 790:	20 81       	ld	r18, Z
 792:	0f 5f       	subi	r16, 0xFF	; 255
	crc |= RF_Data[i] << 8;
 794:	e0 2f       	mov	r30, r16
 796:	f0 e0       	ldi	r31, 0x00	; 0
 798:	e1 5c       	subi	r30, 0xC1	; 193
 79a:	fd 4f       	sbci	r31, 0xFD	; 253
 79c:	40 81       	ld	r20, Z
 79e:	30 e0       	ldi	r19, 0x00	; 0
 7a0:	34 2b       	or	r19, r20
	RF_status.New = 0;
 7a2:	40 91 3e 02 	lds	r20, 0x023E	; 0x80023e <RF_status>
 7a6:	4b 7f       	andi	r20, 0xFB	; 251
 7a8:	40 93 3e 02 	sts	0x023E, r20	; 0x80023e <RF_status>
	
	if(crc != crc_checksum)
 7ac:	28 17       	cp	r18, r24
 7ae:	39 07       	cpc	r19, r25
 7b0:	c1 f4       	brne	.+48     	; 0x7e2 <RF_RxFinish+0xc0>
		return 0; //DATA NOT RIGHT - DIFFERENT CHECKSUMS
	else
	{
		for(int i = 0; i < size; i++)
 7b2:	1e 14       	cp	r1, r14
 7b4:	1f 04       	cpc	r1, r15
 7b6:	64 f4       	brge	.+24     	; 0x7d0 <RF_RxFinish+0xae>
 7b8:	e0 e4       	ldi	r30, 0x40	; 64
 7ba:	f2 e0       	ldi	r31, 0x02	; 2
 7bc:	de 01       	movw	r26, r28
 7be:	21 2f       	mov	r18, r17
 7c0:	30 e0       	ldi	r19, 0x00	; 0
 7c2:	20 5c       	subi	r18, 0xC0	; 192
 7c4:	3d 4f       	sbci	r19, 0xFD	; 253
		{
			data[i] = RF_Data[i+1];
 7c6:	91 91       	ld	r25, Z+
 7c8:	9d 93       	st	X+, r25
	
	if(crc != crc_checksum)
		return 0; //DATA NOT RIGHT - DIFFERENT CHECKSUMS
	else
	{
		for(int i = 0; i < size; i++)
 7ca:	e2 17       	cp	r30, r18
 7cc:	f3 07       	cpc	r31, r19
 7ce:	d9 f7       	brne	.-10     	; 0x7c6 <RF_RxFinish+0xa4>
		{
			data[i] = RF_Data[i+1];
		}
		data[size] = 0; //ENDING FRAME WITH 0
 7d0:	c1 0f       	add	r28, r17
 7d2:	d1 1d       	adc	r29, r1
 7d4:	18 82       	st	Y, r1
		return size; //SIZE OF RECEIVED FRAME IN BYTES
 7d6:	81 2f       	mov	r24, r17
 7d8:	05 c0       	rjmp	.+10     	; 0x7e4 <RF_RxFinish+0xc2>
	uint16_t crc;
	uint16_t crc_checksum = 0;
	uint8_t size = RF_Data[0];

	if(RF_status.Rx)
		return 255;
 7da:	8f ef       	ldi	r24, 0xFF	; 255
 7dc:	03 c0       	rjmp	.+6      	; 0x7e4 <RF_RxFinish+0xc2>
	if(!RF_status.New)
		return 254;
 7de:	8e ef       	ldi	r24, 0xFE	; 254
 7e0:	01 c0       	rjmp	.+2      	; 0x7e4 <RF_RxFinish+0xc2>
	crc = RF_Data[i++];
	crc |= RF_Data[i] << 8;
	RF_status.New = 0;
	
	if(crc != crc_checksum)
		return 0; //DATA NOT RIGHT - DIFFERENT CHECKSUMS
 7e2:	80 e0       	ldi	r24, 0x00	; 0
			data[i] = RF_Data[i+1];
		}
		data[size] = 0; //ENDING FRAME WITH 0
		return size; //SIZE OF RECEIVED FRAME IN BYTES
	}
}
 7e4:	df 91       	pop	r29
 7e6:	cf 91       	pop	r28
 7e8:	1f 91       	pop	r17
 7ea:	0f 91       	pop	r16
 7ec:	ff 90       	pop	r15
 7ee:	ef 90       	pop	r14
 7f0:	df 90       	pop	r13
 7f2:	cf 90       	pop	r12
 7f4:	08 95       	ret

000007f6 <UART_Initlialise>:
char UART_ReceiveChar(void)
{
	while(!(UCSR0A & (1<<RXC0))); //EMPTY LOOP - WAITING UNTILL DATA IS RECEIVED

	return UDR0;
}
 7f6:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 7fa:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 7fe:	88 e9       	ldi	r24, 0x98	; 152
 800:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 804:	86 e0       	ldi	r24, 0x06	; 6
 806:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 80a:	08 95       	ret

0000080c <UART_SendChar>:
 80c:	e0 ec       	ldi	r30, 0xC0	; 192
 80e:	f0 e0       	ldi	r31, 0x00	; 0
 810:	90 81       	ld	r25, Z
 812:	95 ff       	sbrs	r25, 5
 814:	fd cf       	rjmp	.-6      	; 0x810 <UART_SendChar+0x4>
 816:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 81a:	08 95       	ret

0000081c <UART_SendString>:
 81c:	cf 93       	push	r28
 81e:	df 93       	push	r29
 820:	ec 01       	movw	r28, r24
 822:	88 81       	ld	r24, Y
 824:	88 23       	and	r24, r24
 826:	31 f0       	breq	.+12     	; 0x834 <UART_SendString+0x18>
 828:	21 96       	adiw	r28, 0x01	; 1
 82a:	0e 94 06 04 	call	0x80c	; 0x80c <UART_SendChar>
 82e:	89 91       	ld	r24, Y+
 830:	81 11       	cpse	r24, r1
 832:	fb cf       	rjmp	.-10     	; 0x82a <UART_SendString+0xe>
 834:	df 91       	pop	r29
 836:	cf 91       	pop	r28
 838:	08 95       	ret

0000083a <__vector_18>:
ISR(USART_RX_vect)
{
 83a:	1f 92       	push	r1
 83c:	0f 92       	push	r0
 83e:	0f b6       	in	r0, 0x3f	; 63
 840:	0f 92       	push	r0
 842:	11 24       	eor	r1, r1
 844:	8f 93       	push	r24
 846:	ef 93       	push	r30
 848:	ff 93       	push	r31
	uint8_t receivedByte = UDR0;
 84a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	buffer[bufferIndex] = receivedByte;
 84e:	e0 91 c3 01 	lds	r30, 0x01C3	; 0x8001c3 <bufferIndex>
 852:	f0 e0       	ldi	r31, 0x00	; 0
 854:	e3 55       	subi	r30, 0x53	; 83
 856:	fd 4f       	sbci	r31, 0xFD	; 253
 858:	80 83       	st	Z, r24
	if(receivedByte == '\n')
 85a:	8a 30       	cpi	r24, 0x0A	; 10
 85c:	09 f0       	breq	.+2      	; 0x860 <__vector_18+0x26>
 85e:	49 c0       	rjmp	.+146    	; 0x8f2 <__vector_18+0xb8>
	{
		if(buffer[0] == 'O' && buffer[1] == 'K')
 860:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <buffer>
 864:	8f 34       	cpi	r24, 0x4F	; 79
 866:	51 f4       	brne	.+20     	; 0x87c <__vector_18+0x42>
 868:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <buffer+0x1>
 86c:	8b 34       	cpi	r24, 0x4B	; 75
 86e:	31 f4       	brne	.+12     	; 0x87c <__vector_18+0x42>
		{
			ESP_Response.OK = 1;
 870:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
 874:	81 60       	ori	r24, 0x01	; 1
 876:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <ESP_Response>
 87a:	38 c0       	rjmp	.+112    	; 0x8ec <__vector_18+0xb2>
		}
		else if(buffer[0] == 'E' && buffer[1] == 'R' && buffer[4] == 'R')
 87c:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <buffer>
 880:	85 34       	cpi	r24, 0x45	; 69
 882:	71 f4       	brne	.+28     	; 0x8a0 <__vector_18+0x66>
 884:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <buffer+0x1>
 888:	82 35       	cpi	r24, 0x52	; 82
 88a:	51 f4       	brne	.+20     	; 0x8a0 <__vector_18+0x66>
 88c:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <buffer+0x4>
 890:	82 35       	cpi	r24, 0x52	; 82
 892:	31 f4       	brne	.+12     	; 0x8a0 <__vector_18+0x66>
		{
			ESP_Response.ERROR = 1;
 894:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
 898:	82 60       	ori	r24, 0x02	; 2
 89a:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <ESP_Response>
 89e:	26 c0       	rjmp	.+76     	; 0x8ec <__vector_18+0xb2>
		}
		else if(buffer[1] == ',' && buffer[3] == 'O')
 8a0:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <buffer+0x1>
 8a4:	8c 32       	cpi	r24, 0x2C	; 44
 8a6:	51 f4       	brne	.+20     	; 0x8bc <__vector_18+0x82>
 8a8:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <buffer+0x3>
 8ac:	8f 34       	cpi	r24, 0x4F	; 79
 8ae:	31 f4       	brne	.+12     	; 0x8bc <__vector_18+0x82>
		{
			ESP_Connections++;
 8b0:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <ESP_Connections>
 8b4:	8f 5f       	subi	r24, 0xFF	; 255
 8b6:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <ESP_Connections>
 8ba:	18 c0       	rjmp	.+48     	; 0x8ec <__vector_18+0xb2>
		}
		else if(buffer[1] == ',' && buffer[3] == 'L')
 8bc:	80 91 ae 02 	lds	r24, 0x02AE	; 0x8002ae <buffer+0x1>
 8c0:	8c 32       	cpi	r24, 0x2C	; 44
 8c2:	51 f4       	brne	.+20     	; 0x8d8 <__vector_18+0x9e>
 8c4:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <buffer+0x3>
 8c8:	8c 34       	cpi	r24, 0x4C	; 76
 8ca:	31 f4       	brne	.+12     	; 0x8d8 <__vector_18+0x9e>
		{
			ESP_Connections--;
 8cc:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <ESP_Connections>
 8d0:	81 50       	subi	r24, 0x01	; 1
 8d2:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <ESP_Connections>
 8d6:	0a c0       	rjmp	.+20     	; 0x8ec <__vector_18+0xb2>
		}
		else if(buffer[0] == 'S' && buffer[5] == 'O')
 8d8:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <buffer>
 8dc:	83 35       	cpi	r24, 0x53	; 83
 8de:	31 f4       	brne	.+12     	; 0x8ec <__vector_18+0xb2>
 8e0:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <buffer+0x5>
 8e4:	8f 34       	cpi	r24, 0x4F	; 79
 8e6:	11 f4       	brne	.+4      	; 0x8ec <__vector_18+0xb2>
			ESP_Response.OK;
 8e8:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
		bufferIndex = 0;
 8ec:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <bufferIndex>
 8f0:	13 c0       	rjmp	.+38     	; 0x918 <__stack+0x19>
	}
	else if(receivedByte == ' ')
 8f2:	80 32       	cpi	r24, 0x20	; 32
 8f4:	61 f4       	brne	.+24     	; 0x90e <__stack+0xf>
	{
		if(buffer[0] == '>')
 8f6:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <buffer>
 8fa:	8e 33       	cpi	r24, 0x3E	; 62
 8fc:	69 f4       	brne	.+26     	; 0x918 <__stack+0x19>
		{
			ESP_Response.INPUT = 1;
 8fe:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <ESP_Response>
 902:	84 60       	ori	r24, 0x04	; 4
 904:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <ESP_Response>
			bufferIndex = 0;
 908:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <bufferIndex>
 90c:	05 c0       	rjmp	.+10     	; 0x918 <__stack+0x19>
		}	
	}
	else
	{
		bufferIndex++;
 90e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <bufferIndex>
 912:	8f 5f       	subi	r24, 0xFF	; 255
 914:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <bufferIndex>
	}
 918:	ff 91       	pop	r31
 91a:	ef 91       	pop	r30
 91c:	8f 91       	pop	r24
 91e:	0f 90       	pop	r0
 920:	0f be       	out	0x3f, r0	; 63
 922:	0f 90       	pop	r0
 924:	1f 90       	pop	r1
 926:	18 95       	reti

00000928 <__udivmodsi4>:
 928:	a1 e2       	ldi	r26, 0x21	; 33
 92a:	1a 2e       	mov	r1, r26
 92c:	aa 1b       	sub	r26, r26
 92e:	bb 1b       	sub	r27, r27
 930:	fd 01       	movw	r30, r26
 932:	0d c0       	rjmp	.+26     	; 0x94e <__udivmodsi4_ep>

00000934 <__udivmodsi4_loop>:
 934:	aa 1f       	adc	r26, r26
 936:	bb 1f       	adc	r27, r27
 938:	ee 1f       	adc	r30, r30
 93a:	ff 1f       	adc	r31, r31
 93c:	a2 17       	cp	r26, r18
 93e:	b3 07       	cpc	r27, r19
 940:	e4 07       	cpc	r30, r20
 942:	f5 07       	cpc	r31, r21
 944:	20 f0       	brcs	.+8      	; 0x94e <__udivmodsi4_ep>
 946:	a2 1b       	sub	r26, r18
 948:	b3 0b       	sbc	r27, r19
 94a:	e4 0b       	sbc	r30, r20
 94c:	f5 0b       	sbc	r31, r21

0000094e <__udivmodsi4_ep>:
 94e:	66 1f       	adc	r22, r22
 950:	77 1f       	adc	r23, r23
 952:	88 1f       	adc	r24, r24
 954:	99 1f       	adc	r25, r25
 956:	1a 94       	dec	r1
 958:	69 f7       	brne	.-38     	; 0x934 <__udivmodsi4_loop>
 95a:	60 95       	com	r22
 95c:	70 95       	com	r23
 95e:	80 95       	com	r24
 960:	90 95       	com	r25
 962:	9b 01       	movw	r18, r22
 964:	ac 01       	movw	r20, r24
 966:	bd 01       	movw	r22, r26
 968:	cf 01       	movw	r24, r30
 96a:	08 95       	ret

0000096c <__divmodsi4>:
 96c:	05 2e       	mov	r0, r21
 96e:	97 fb       	bst	r25, 7
 970:	1e f4       	brtc	.+6      	; 0x978 <__divmodsi4+0xc>
 972:	00 94       	com	r0
 974:	0e 94 cd 04 	call	0x99a	; 0x99a <__negsi2>
 978:	57 fd       	sbrc	r21, 7
 97a:	07 d0       	rcall	.+14     	; 0x98a <__divmodsi4_neg2>
 97c:	0e 94 94 04 	call	0x928	; 0x928 <__udivmodsi4>
 980:	07 fc       	sbrc	r0, 7
 982:	03 d0       	rcall	.+6      	; 0x98a <__divmodsi4_neg2>
 984:	4e f4       	brtc	.+18     	; 0x998 <__divmodsi4_exit>
 986:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__negsi2>

0000098a <__divmodsi4_neg2>:
 98a:	50 95       	com	r21
 98c:	40 95       	com	r20
 98e:	30 95       	com	r19
 990:	21 95       	neg	r18
 992:	3f 4f       	sbci	r19, 0xFF	; 255
 994:	4f 4f       	sbci	r20, 0xFF	; 255
 996:	5f 4f       	sbci	r21, 0xFF	; 255

00000998 <__divmodsi4_exit>:
 998:	08 95       	ret

0000099a <__negsi2>:
 99a:	90 95       	com	r25
 99c:	80 95       	com	r24
 99e:	70 95       	com	r23
 9a0:	61 95       	neg	r22
 9a2:	7f 4f       	sbci	r23, 0xFF	; 255
 9a4:	8f 4f       	sbci	r24, 0xFF	; 255
 9a6:	9f 4f       	sbci	r25, 0xFF	; 255
 9a8:	08 95       	ret

000009aa <sprintf>:
 9aa:	ae e0       	ldi	r26, 0x0E	; 14
 9ac:	b0 e0       	ldi	r27, 0x00	; 0
 9ae:	eb ed       	ldi	r30, 0xDB	; 219
 9b0:	f4 e0       	ldi	r31, 0x04	; 4
 9b2:	0c 94 84 07 	jmp	0xf08	; 0xf08 <__prologue_saves__+0x1c>
 9b6:	0d 89       	ldd	r16, Y+21	; 0x15
 9b8:	1e 89       	ldd	r17, Y+22	; 0x16
 9ba:	86 e0       	ldi	r24, 0x06	; 6
 9bc:	8c 83       	std	Y+4, r24	; 0x04
 9be:	1a 83       	std	Y+2, r17	; 0x02
 9c0:	09 83       	std	Y+1, r16	; 0x01
 9c2:	8f ef       	ldi	r24, 0xFF	; 255
 9c4:	9f e7       	ldi	r25, 0x7F	; 127
 9c6:	9e 83       	std	Y+6, r25	; 0x06
 9c8:	8d 83       	std	Y+5, r24	; 0x05
 9ca:	ae 01       	movw	r20, r28
 9cc:	47 5e       	subi	r20, 0xE7	; 231
 9ce:	5f 4f       	sbci	r21, 0xFF	; 255
 9d0:	6f 89       	ldd	r22, Y+23	; 0x17
 9d2:	78 8d       	ldd	r23, Y+24	; 0x18
 9d4:	ce 01       	movw	r24, r28
 9d6:	01 96       	adiw	r24, 0x01	; 1
 9d8:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <vfprintf>
 9dc:	2f 81       	ldd	r18, Y+7	; 0x07
 9de:	38 85       	ldd	r19, Y+8	; 0x08
 9e0:	f8 01       	movw	r30, r16
 9e2:	e2 0f       	add	r30, r18
 9e4:	f3 1f       	adc	r31, r19
 9e6:	10 82       	st	Z, r1
 9e8:	2e 96       	adiw	r28, 0x0e	; 14
 9ea:	e4 e0       	ldi	r30, 0x04	; 4
 9ec:	0c 94 a0 07 	jmp	0xf40	; 0xf40 <__epilogue_restores__+0x1c>

000009f0 <vfprintf>:
 9f0:	ac e0       	ldi	r26, 0x0C	; 12
 9f2:	b0 e0       	ldi	r27, 0x00	; 0
 9f4:	ee ef       	ldi	r30, 0xFE	; 254
 9f6:	f4 e0       	ldi	r31, 0x04	; 4
 9f8:	0c 94 76 07 	jmp	0xeec	; 0xeec <__prologue_saves__>
 9fc:	7c 01       	movw	r14, r24
 9fe:	6b 01       	movw	r12, r22
 a00:	8a 01       	movw	r16, r20
 a02:	fc 01       	movw	r30, r24
 a04:	17 82       	std	Z+7, r1	; 0x07
 a06:	16 82       	std	Z+6, r1	; 0x06
 a08:	83 81       	ldd	r24, Z+3	; 0x03
 a0a:	81 ff       	sbrs	r24, 1
 a0c:	bd c1       	rjmp	.+890    	; 0xd88 <vfprintf+0x398>
 a0e:	ce 01       	movw	r24, r28
 a10:	01 96       	adiw	r24, 0x01	; 1
 a12:	4c 01       	movw	r8, r24
 a14:	f7 01       	movw	r30, r14
 a16:	93 81       	ldd	r25, Z+3	; 0x03
 a18:	f6 01       	movw	r30, r12
 a1a:	93 fd       	sbrc	r25, 3
 a1c:	85 91       	lpm	r24, Z+
 a1e:	93 ff       	sbrs	r25, 3
 a20:	81 91       	ld	r24, Z+
 a22:	6f 01       	movw	r12, r30
 a24:	88 23       	and	r24, r24
 a26:	09 f4       	brne	.+2      	; 0xa2a <vfprintf+0x3a>
 a28:	ab c1       	rjmp	.+854    	; 0xd80 <vfprintf+0x390>
 a2a:	85 32       	cpi	r24, 0x25	; 37
 a2c:	39 f4       	brne	.+14     	; 0xa3c <vfprintf+0x4c>
 a2e:	93 fd       	sbrc	r25, 3
 a30:	85 91       	lpm	r24, Z+
 a32:	93 ff       	sbrs	r25, 3
 a34:	81 91       	ld	r24, Z+
 a36:	6f 01       	movw	r12, r30
 a38:	85 32       	cpi	r24, 0x25	; 37
 a3a:	29 f4       	brne	.+10     	; 0xa46 <vfprintf+0x56>
 a3c:	b7 01       	movw	r22, r14
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <fputc>
 a44:	e7 cf       	rjmp	.-50     	; 0xa14 <vfprintf+0x24>
 a46:	51 2c       	mov	r5, r1
 a48:	31 2c       	mov	r3, r1
 a4a:	20 e0       	ldi	r18, 0x00	; 0
 a4c:	20 32       	cpi	r18, 0x20	; 32
 a4e:	a0 f4       	brcc	.+40     	; 0xa78 <vfprintf+0x88>
 a50:	8b 32       	cpi	r24, 0x2B	; 43
 a52:	69 f0       	breq	.+26     	; 0xa6e <vfprintf+0x7e>
 a54:	30 f4       	brcc	.+12     	; 0xa62 <vfprintf+0x72>
 a56:	80 32       	cpi	r24, 0x20	; 32
 a58:	59 f0       	breq	.+22     	; 0xa70 <vfprintf+0x80>
 a5a:	83 32       	cpi	r24, 0x23	; 35
 a5c:	69 f4       	brne	.+26     	; 0xa78 <vfprintf+0x88>
 a5e:	20 61       	ori	r18, 0x10	; 16
 a60:	2c c0       	rjmp	.+88     	; 0xaba <vfprintf+0xca>
 a62:	8d 32       	cpi	r24, 0x2D	; 45
 a64:	39 f0       	breq	.+14     	; 0xa74 <vfprintf+0x84>
 a66:	80 33       	cpi	r24, 0x30	; 48
 a68:	39 f4       	brne	.+14     	; 0xa78 <vfprintf+0x88>
 a6a:	21 60       	ori	r18, 0x01	; 1
 a6c:	26 c0       	rjmp	.+76     	; 0xaba <vfprintf+0xca>
 a6e:	22 60       	ori	r18, 0x02	; 2
 a70:	24 60       	ori	r18, 0x04	; 4
 a72:	23 c0       	rjmp	.+70     	; 0xaba <vfprintf+0xca>
 a74:	28 60       	ori	r18, 0x08	; 8
 a76:	21 c0       	rjmp	.+66     	; 0xaba <vfprintf+0xca>
 a78:	27 fd       	sbrc	r18, 7
 a7a:	27 c0       	rjmp	.+78     	; 0xaca <vfprintf+0xda>
 a7c:	30 ed       	ldi	r19, 0xD0	; 208
 a7e:	38 0f       	add	r19, r24
 a80:	3a 30       	cpi	r19, 0x0A	; 10
 a82:	78 f4       	brcc	.+30     	; 0xaa2 <vfprintf+0xb2>
 a84:	26 ff       	sbrs	r18, 6
 a86:	06 c0       	rjmp	.+12     	; 0xa94 <vfprintf+0xa4>
 a88:	fa e0       	ldi	r31, 0x0A	; 10
 a8a:	5f 9e       	mul	r5, r31
 a8c:	30 0d       	add	r19, r0
 a8e:	11 24       	eor	r1, r1
 a90:	53 2e       	mov	r5, r19
 a92:	13 c0       	rjmp	.+38     	; 0xaba <vfprintf+0xca>
 a94:	8a e0       	ldi	r24, 0x0A	; 10
 a96:	38 9e       	mul	r3, r24
 a98:	30 0d       	add	r19, r0
 a9a:	11 24       	eor	r1, r1
 a9c:	33 2e       	mov	r3, r19
 a9e:	20 62       	ori	r18, 0x20	; 32
 aa0:	0c c0       	rjmp	.+24     	; 0xaba <vfprintf+0xca>
 aa2:	8e 32       	cpi	r24, 0x2E	; 46
 aa4:	21 f4       	brne	.+8      	; 0xaae <vfprintf+0xbe>
 aa6:	26 fd       	sbrc	r18, 6
 aa8:	6b c1       	rjmp	.+726    	; 0xd80 <vfprintf+0x390>
 aaa:	20 64       	ori	r18, 0x40	; 64
 aac:	06 c0       	rjmp	.+12     	; 0xaba <vfprintf+0xca>
 aae:	8c 36       	cpi	r24, 0x6C	; 108
 ab0:	11 f4       	brne	.+4      	; 0xab6 <vfprintf+0xc6>
 ab2:	20 68       	ori	r18, 0x80	; 128
 ab4:	02 c0       	rjmp	.+4      	; 0xaba <vfprintf+0xca>
 ab6:	88 36       	cpi	r24, 0x68	; 104
 ab8:	41 f4       	brne	.+16     	; 0xaca <vfprintf+0xda>
 aba:	f6 01       	movw	r30, r12
 abc:	93 fd       	sbrc	r25, 3
 abe:	85 91       	lpm	r24, Z+
 ac0:	93 ff       	sbrs	r25, 3
 ac2:	81 91       	ld	r24, Z+
 ac4:	6f 01       	movw	r12, r30
 ac6:	81 11       	cpse	r24, r1
 ac8:	c1 cf       	rjmp	.-126    	; 0xa4c <vfprintf+0x5c>
 aca:	98 2f       	mov	r25, r24
 acc:	9f 7d       	andi	r25, 0xDF	; 223
 ace:	95 54       	subi	r25, 0x45	; 69
 ad0:	93 30       	cpi	r25, 0x03	; 3
 ad2:	28 f4       	brcc	.+10     	; 0xade <vfprintf+0xee>
 ad4:	0c 5f       	subi	r16, 0xFC	; 252
 ad6:	1f 4f       	sbci	r17, 0xFF	; 255
 ad8:	ff e3       	ldi	r31, 0x3F	; 63
 ada:	f9 83       	std	Y+1, r31	; 0x01
 adc:	0d c0       	rjmp	.+26     	; 0xaf8 <vfprintf+0x108>
 ade:	83 36       	cpi	r24, 0x63	; 99
 ae0:	31 f0       	breq	.+12     	; 0xaee <vfprintf+0xfe>
 ae2:	83 37       	cpi	r24, 0x73	; 115
 ae4:	71 f0       	breq	.+28     	; 0xb02 <vfprintf+0x112>
 ae6:	83 35       	cpi	r24, 0x53	; 83
 ae8:	09 f0       	breq	.+2      	; 0xaec <vfprintf+0xfc>
 aea:	5b c0       	rjmp	.+182    	; 0xba2 <vfprintf+0x1b2>
 aec:	22 c0       	rjmp	.+68     	; 0xb32 <vfprintf+0x142>
 aee:	f8 01       	movw	r30, r16
 af0:	80 81       	ld	r24, Z
 af2:	89 83       	std	Y+1, r24	; 0x01
 af4:	0e 5f       	subi	r16, 0xFE	; 254
 af6:	1f 4f       	sbci	r17, 0xFF	; 255
 af8:	44 24       	eor	r4, r4
 afa:	43 94       	inc	r4
 afc:	51 2c       	mov	r5, r1
 afe:	54 01       	movw	r10, r8
 b00:	15 c0       	rjmp	.+42     	; 0xb2c <vfprintf+0x13c>
 b02:	38 01       	movw	r6, r16
 b04:	f2 e0       	ldi	r31, 0x02	; 2
 b06:	6f 0e       	add	r6, r31
 b08:	71 1c       	adc	r7, r1
 b0a:	f8 01       	movw	r30, r16
 b0c:	a0 80       	ld	r10, Z
 b0e:	b1 80       	ldd	r11, Z+1	; 0x01
 b10:	26 ff       	sbrs	r18, 6
 b12:	03 c0       	rjmp	.+6      	; 0xb1a <vfprintf+0x12a>
 b14:	65 2d       	mov	r22, r5
 b16:	70 e0       	ldi	r23, 0x00	; 0
 b18:	02 c0       	rjmp	.+4      	; 0xb1e <vfprintf+0x12e>
 b1a:	6f ef       	ldi	r22, 0xFF	; 255
 b1c:	7f ef       	ldi	r23, 0xFF	; 255
 b1e:	c5 01       	movw	r24, r10
 b20:	2c 87       	std	Y+12, r18	; 0x0c
 b22:	0e 94 d5 06 	call	0xdaa	; 0xdaa <strnlen>
 b26:	2c 01       	movw	r4, r24
 b28:	83 01       	movw	r16, r6
 b2a:	2c 85       	ldd	r18, Y+12	; 0x0c
 b2c:	2f 77       	andi	r18, 0x7F	; 127
 b2e:	22 2e       	mov	r2, r18
 b30:	17 c0       	rjmp	.+46     	; 0xb60 <vfprintf+0x170>
 b32:	38 01       	movw	r6, r16
 b34:	f2 e0       	ldi	r31, 0x02	; 2
 b36:	6f 0e       	add	r6, r31
 b38:	71 1c       	adc	r7, r1
 b3a:	f8 01       	movw	r30, r16
 b3c:	a0 80       	ld	r10, Z
 b3e:	b1 80       	ldd	r11, Z+1	; 0x01
 b40:	26 ff       	sbrs	r18, 6
 b42:	03 c0       	rjmp	.+6      	; 0xb4a <vfprintf+0x15a>
 b44:	65 2d       	mov	r22, r5
 b46:	70 e0       	ldi	r23, 0x00	; 0
 b48:	02 c0       	rjmp	.+4      	; 0xb4e <vfprintf+0x15e>
 b4a:	6f ef       	ldi	r22, 0xFF	; 255
 b4c:	7f ef       	ldi	r23, 0xFF	; 255
 b4e:	c5 01       	movw	r24, r10
 b50:	2c 87       	std	Y+12, r18	; 0x0c
 b52:	0e 94 ca 06 	call	0xd94	; 0xd94 <strnlen_P>
 b56:	2c 01       	movw	r4, r24
 b58:	2c 85       	ldd	r18, Y+12	; 0x0c
 b5a:	20 68       	ori	r18, 0x80	; 128
 b5c:	22 2e       	mov	r2, r18
 b5e:	83 01       	movw	r16, r6
 b60:	23 fc       	sbrc	r2, 3
 b62:	1b c0       	rjmp	.+54     	; 0xb9a <vfprintf+0x1aa>
 b64:	83 2d       	mov	r24, r3
 b66:	90 e0       	ldi	r25, 0x00	; 0
 b68:	48 16       	cp	r4, r24
 b6a:	59 06       	cpc	r5, r25
 b6c:	b0 f4       	brcc	.+44     	; 0xb9a <vfprintf+0x1aa>
 b6e:	b7 01       	movw	r22, r14
 b70:	80 e2       	ldi	r24, 0x20	; 32
 b72:	90 e0       	ldi	r25, 0x00	; 0
 b74:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <fputc>
 b78:	3a 94       	dec	r3
 b7a:	f4 cf       	rjmp	.-24     	; 0xb64 <vfprintf+0x174>
 b7c:	f5 01       	movw	r30, r10
 b7e:	27 fc       	sbrc	r2, 7
 b80:	85 91       	lpm	r24, Z+
 b82:	27 fe       	sbrs	r2, 7
 b84:	81 91       	ld	r24, Z+
 b86:	5f 01       	movw	r10, r30
 b88:	b7 01       	movw	r22, r14
 b8a:	90 e0       	ldi	r25, 0x00	; 0
 b8c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <fputc>
 b90:	31 10       	cpse	r3, r1
 b92:	3a 94       	dec	r3
 b94:	f1 e0       	ldi	r31, 0x01	; 1
 b96:	4f 1a       	sub	r4, r31
 b98:	51 08       	sbc	r5, r1
 b9a:	41 14       	cp	r4, r1
 b9c:	51 04       	cpc	r5, r1
 b9e:	71 f7       	brne	.-36     	; 0xb7c <vfprintf+0x18c>
 ba0:	e5 c0       	rjmp	.+458    	; 0xd6c <vfprintf+0x37c>
 ba2:	84 36       	cpi	r24, 0x64	; 100
 ba4:	11 f0       	breq	.+4      	; 0xbaa <vfprintf+0x1ba>
 ba6:	89 36       	cpi	r24, 0x69	; 105
 ba8:	39 f5       	brne	.+78     	; 0xbf8 <vfprintf+0x208>
 baa:	f8 01       	movw	r30, r16
 bac:	27 ff       	sbrs	r18, 7
 bae:	07 c0       	rjmp	.+14     	; 0xbbe <vfprintf+0x1ce>
 bb0:	60 81       	ld	r22, Z
 bb2:	71 81       	ldd	r23, Z+1	; 0x01
 bb4:	82 81       	ldd	r24, Z+2	; 0x02
 bb6:	93 81       	ldd	r25, Z+3	; 0x03
 bb8:	0c 5f       	subi	r16, 0xFC	; 252
 bba:	1f 4f       	sbci	r17, 0xFF	; 255
 bbc:	08 c0       	rjmp	.+16     	; 0xbce <vfprintf+0x1de>
 bbe:	60 81       	ld	r22, Z
 bc0:	71 81       	ldd	r23, Z+1	; 0x01
 bc2:	07 2e       	mov	r0, r23
 bc4:	00 0c       	add	r0, r0
 bc6:	88 0b       	sbc	r24, r24
 bc8:	99 0b       	sbc	r25, r25
 bca:	0e 5f       	subi	r16, 0xFE	; 254
 bcc:	1f 4f       	sbci	r17, 0xFF	; 255
 bce:	2f 76       	andi	r18, 0x6F	; 111
 bd0:	72 2e       	mov	r7, r18
 bd2:	97 ff       	sbrs	r25, 7
 bd4:	09 c0       	rjmp	.+18     	; 0xbe8 <vfprintf+0x1f8>
 bd6:	90 95       	com	r25
 bd8:	80 95       	com	r24
 bda:	70 95       	com	r23
 bdc:	61 95       	neg	r22
 bde:	7f 4f       	sbci	r23, 0xFF	; 255
 be0:	8f 4f       	sbci	r24, 0xFF	; 255
 be2:	9f 4f       	sbci	r25, 0xFF	; 255
 be4:	20 68       	ori	r18, 0x80	; 128
 be6:	72 2e       	mov	r7, r18
 be8:	2a e0       	ldi	r18, 0x0A	; 10
 bea:	30 e0       	ldi	r19, 0x00	; 0
 bec:	a4 01       	movw	r20, r8
 bee:	0e 94 18 07 	call	0xe30	; 0xe30 <__ultoa_invert>
 bf2:	a8 2e       	mov	r10, r24
 bf4:	a8 18       	sub	r10, r8
 bf6:	44 c0       	rjmp	.+136    	; 0xc80 <vfprintf+0x290>
 bf8:	85 37       	cpi	r24, 0x75	; 117
 bfa:	29 f4       	brne	.+10     	; 0xc06 <vfprintf+0x216>
 bfc:	2f 7e       	andi	r18, 0xEF	; 239
 bfe:	b2 2e       	mov	r11, r18
 c00:	2a e0       	ldi	r18, 0x0A	; 10
 c02:	30 e0       	ldi	r19, 0x00	; 0
 c04:	25 c0       	rjmp	.+74     	; 0xc50 <vfprintf+0x260>
 c06:	f2 2f       	mov	r31, r18
 c08:	f9 7f       	andi	r31, 0xF9	; 249
 c0a:	bf 2e       	mov	r11, r31
 c0c:	8f 36       	cpi	r24, 0x6F	; 111
 c0e:	c1 f0       	breq	.+48     	; 0xc40 <vfprintf+0x250>
 c10:	18 f4       	brcc	.+6      	; 0xc18 <vfprintf+0x228>
 c12:	88 35       	cpi	r24, 0x58	; 88
 c14:	79 f0       	breq	.+30     	; 0xc34 <vfprintf+0x244>
 c16:	b4 c0       	rjmp	.+360    	; 0xd80 <vfprintf+0x390>
 c18:	80 37       	cpi	r24, 0x70	; 112
 c1a:	19 f0       	breq	.+6      	; 0xc22 <vfprintf+0x232>
 c1c:	88 37       	cpi	r24, 0x78	; 120
 c1e:	21 f0       	breq	.+8      	; 0xc28 <vfprintf+0x238>
 c20:	af c0       	rjmp	.+350    	; 0xd80 <vfprintf+0x390>
 c22:	2f 2f       	mov	r18, r31
 c24:	20 61       	ori	r18, 0x10	; 16
 c26:	b2 2e       	mov	r11, r18
 c28:	b4 fe       	sbrs	r11, 4
 c2a:	0d c0       	rjmp	.+26     	; 0xc46 <vfprintf+0x256>
 c2c:	8b 2d       	mov	r24, r11
 c2e:	84 60       	ori	r24, 0x04	; 4
 c30:	b8 2e       	mov	r11, r24
 c32:	09 c0       	rjmp	.+18     	; 0xc46 <vfprintf+0x256>
 c34:	24 ff       	sbrs	r18, 4
 c36:	0a c0       	rjmp	.+20     	; 0xc4c <vfprintf+0x25c>
 c38:	9f 2f       	mov	r25, r31
 c3a:	96 60       	ori	r25, 0x06	; 6
 c3c:	b9 2e       	mov	r11, r25
 c3e:	06 c0       	rjmp	.+12     	; 0xc4c <vfprintf+0x25c>
 c40:	28 e0       	ldi	r18, 0x08	; 8
 c42:	30 e0       	ldi	r19, 0x00	; 0
 c44:	05 c0       	rjmp	.+10     	; 0xc50 <vfprintf+0x260>
 c46:	20 e1       	ldi	r18, 0x10	; 16
 c48:	30 e0       	ldi	r19, 0x00	; 0
 c4a:	02 c0       	rjmp	.+4      	; 0xc50 <vfprintf+0x260>
 c4c:	20 e1       	ldi	r18, 0x10	; 16
 c4e:	32 e0       	ldi	r19, 0x02	; 2
 c50:	f8 01       	movw	r30, r16
 c52:	b7 fe       	sbrs	r11, 7
 c54:	07 c0       	rjmp	.+14     	; 0xc64 <vfprintf+0x274>
 c56:	60 81       	ld	r22, Z
 c58:	71 81       	ldd	r23, Z+1	; 0x01
 c5a:	82 81       	ldd	r24, Z+2	; 0x02
 c5c:	93 81       	ldd	r25, Z+3	; 0x03
 c5e:	0c 5f       	subi	r16, 0xFC	; 252
 c60:	1f 4f       	sbci	r17, 0xFF	; 255
 c62:	06 c0       	rjmp	.+12     	; 0xc70 <vfprintf+0x280>
 c64:	60 81       	ld	r22, Z
 c66:	71 81       	ldd	r23, Z+1	; 0x01
 c68:	80 e0       	ldi	r24, 0x00	; 0
 c6a:	90 e0       	ldi	r25, 0x00	; 0
 c6c:	0e 5f       	subi	r16, 0xFE	; 254
 c6e:	1f 4f       	sbci	r17, 0xFF	; 255
 c70:	a4 01       	movw	r20, r8
 c72:	0e 94 18 07 	call	0xe30	; 0xe30 <__ultoa_invert>
 c76:	a8 2e       	mov	r10, r24
 c78:	a8 18       	sub	r10, r8
 c7a:	fb 2d       	mov	r31, r11
 c7c:	ff 77       	andi	r31, 0x7F	; 127
 c7e:	7f 2e       	mov	r7, r31
 c80:	76 fe       	sbrs	r7, 6
 c82:	0b c0       	rjmp	.+22     	; 0xc9a <vfprintf+0x2aa>
 c84:	37 2d       	mov	r19, r7
 c86:	3e 7f       	andi	r19, 0xFE	; 254
 c88:	a5 14       	cp	r10, r5
 c8a:	50 f4       	brcc	.+20     	; 0xca0 <vfprintf+0x2b0>
 c8c:	74 fe       	sbrs	r7, 4
 c8e:	0a c0       	rjmp	.+20     	; 0xca4 <vfprintf+0x2b4>
 c90:	72 fc       	sbrc	r7, 2
 c92:	08 c0       	rjmp	.+16     	; 0xca4 <vfprintf+0x2b4>
 c94:	37 2d       	mov	r19, r7
 c96:	3e 7e       	andi	r19, 0xEE	; 238
 c98:	05 c0       	rjmp	.+10     	; 0xca4 <vfprintf+0x2b4>
 c9a:	ba 2c       	mov	r11, r10
 c9c:	37 2d       	mov	r19, r7
 c9e:	03 c0       	rjmp	.+6      	; 0xca6 <vfprintf+0x2b6>
 ca0:	ba 2c       	mov	r11, r10
 ca2:	01 c0       	rjmp	.+2      	; 0xca6 <vfprintf+0x2b6>
 ca4:	b5 2c       	mov	r11, r5
 ca6:	34 ff       	sbrs	r19, 4
 ca8:	0d c0       	rjmp	.+26     	; 0xcc4 <vfprintf+0x2d4>
 caa:	fe 01       	movw	r30, r28
 cac:	ea 0d       	add	r30, r10
 cae:	f1 1d       	adc	r31, r1
 cb0:	80 81       	ld	r24, Z
 cb2:	80 33       	cpi	r24, 0x30	; 48
 cb4:	11 f4       	brne	.+4      	; 0xcba <vfprintf+0x2ca>
 cb6:	39 7e       	andi	r19, 0xE9	; 233
 cb8:	09 c0       	rjmp	.+18     	; 0xccc <vfprintf+0x2dc>
 cba:	32 ff       	sbrs	r19, 2
 cbc:	06 c0       	rjmp	.+12     	; 0xcca <vfprintf+0x2da>
 cbe:	b3 94       	inc	r11
 cc0:	b3 94       	inc	r11
 cc2:	04 c0       	rjmp	.+8      	; 0xccc <vfprintf+0x2dc>
 cc4:	83 2f       	mov	r24, r19
 cc6:	86 78       	andi	r24, 0x86	; 134
 cc8:	09 f0       	breq	.+2      	; 0xccc <vfprintf+0x2dc>
 cca:	b3 94       	inc	r11
 ccc:	33 fd       	sbrc	r19, 3
 cce:	13 c0       	rjmp	.+38     	; 0xcf6 <vfprintf+0x306>
 cd0:	30 ff       	sbrs	r19, 0
 cd2:	06 c0       	rjmp	.+12     	; 0xce0 <vfprintf+0x2f0>
 cd4:	5a 2c       	mov	r5, r10
 cd6:	b3 14       	cp	r11, r3
 cd8:	18 f4       	brcc	.+6      	; 0xce0 <vfprintf+0x2f0>
 cda:	53 0c       	add	r5, r3
 cdc:	5b 18       	sub	r5, r11
 cde:	b3 2c       	mov	r11, r3
 ce0:	b3 14       	cp	r11, r3
 ce2:	68 f4       	brcc	.+26     	; 0xcfe <vfprintf+0x30e>
 ce4:	b7 01       	movw	r22, r14
 ce6:	80 e2       	ldi	r24, 0x20	; 32
 ce8:	90 e0       	ldi	r25, 0x00	; 0
 cea:	3c 87       	std	Y+12, r19	; 0x0c
 cec:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <fputc>
 cf0:	b3 94       	inc	r11
 cf2:	3c 85       	ldd	r19, Y+12	; 0x0c
 cf4:	f5 cf       	rjmp	.-22     	; 0xce0 <vfprintf+0x2f0>
 cf6:	b3 14       	cp	r11, r3
 cf8:	10 f4       	brcc	.+4      	; 0xcfe <vfprintf+0x30e>
 cfa:	3b 18       	sub	r3, r11
 cfc:	01 c0       	rjmp	.+2      	; 0xd00 <vfprintf+0x310>
 cfe:	31 2c       	mov	r3, r1
 d00:	34 ff       	sbrs	r19, 4
 d02:	12 c0       	rjmp	.+36     	; 0xd28 <vfprintf+0x338>
 d04:	b7 01       	movw	r22, r14
 d06:	80 e3       	ldi	r24, 0x30	; 48
 d08:	90 e0       	ldi	r25, 0x00	; 0
 d0a:	3c 87       	std	Y+12, r19	; 0x0c
 d0c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <fputc>
 d10:	3c 85       	ldd	r19, Y+12	; 0x0c
 d12:	32 ff       	sbrs	r19, 2
 d14:	17 c0       	rjmp	.+46     	; 0xd44 <vfprintf+0x354>
 d16:	31 fd       	sbrc	r19, 1
 d18:	03 c0       	rjmp	.+6      	; 0xd20 <vfprintf+0x330>
 d1a:	88 e7       	ldi	r24, 0x78	; 120
 d1c:	90 e0       	ldi	r25, 0x00	; 0
 d1e:	02 c0       	rjmp	.+4      	; 0xd24 <vfprintf+0x334>
 d20:	88 e5       	ldi	r24, 0x58	; 88
 d22:	90 e0       	ldi	r25, 0x00	; 0
 d24:	b7 01       	movw	r22, r14
 d26:	0c c0       	rjmp	.+24     	; 0xd40 <vfprintf+0x350>
 d28:	83 2f       	mov	r24, r19
 d2a:	86 78       	andi	r24, 0x86	; 134
 d2c:	59 f0       	breq	.+22     	; 0xd44 <vfprintf+0x354>
 d2e:	31 ff       	sbrs	r19, 1
 d30:	02 c0       	rjmp	.+4      	; 0xd36 <vfprintf+0x346>
 d32:	8b e2       	ldi	r24, 0x2B	; 43
 d34:	01 c0       	rjmp	.+2      	; 0xd38 <vfprintf+0x348>
 d36:	80 e2       	ldi	r24, 0x20	; 32
 d38:	37 fd       	sbrc	r19, 7
 d3a:	8d e2       	ldi	r24, 0x2D	; 45
 d3c:	b7 01       	movw	r22, r14
 d3e:	90 e0       	ldi	r25, 0x00	; 0
 d40:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <fputc>
 d44:	a5 14       	cp	r10, r5
 d46:	38 f4       	brcc	.+14     	; 0xd56 <vfprintf+0x366>
 d48:	b7 01       	movw	r22, r14
 d4a:	80 e3       	ldi	r24, 0x30	; 48
 d4c:	90 e0       	ldi	r25, 0x00	; 0
 d4e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <fputc>
 d52:	5a 94       	dec	r5
 d54:	f7 cf       	rjmp	.-18     	; 0xd44 <vfprintf+0x354>
 d56:	aa 94       	dec	r10
 d58:	f4 01       	movw	r30, r8
 d5a:	ea 0d       	add	r30, r10
 d5c:	f1 1d       	adc	r31, r1
 d5e:	80 81       	ld	r24, Z
 d60:	b7 01       	movw	r22, r14
 d62:	90 e0       	ldi	r25, 0x00	; 0
 d64:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <fputc>
 d68:	a1 10       	cpse	r10, r1
 d6a:	f5 cf       	rjmp	.-22     	; 0xd56 <vfprintf+0x366>
 d6c:	33 20       	and	r3, r3
 d6e:	09 f4       	brne	.+2      	; 0xd72 <vfprintf+0x382>
 d70:	51 ce       	rjmp	.-862    	; 0xa14 <vfprintf+0x24>
 d72:	b7 01       	movw	r22, r14
 d74:	80 e2       	ldi	r24, 0x20	; 32
 d76:	90 e0       	ldi	r25, 0x00	; 0
 d78:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <fputc>
 d7c:	3a 94       	dec	r3
 d7e:	f6 cf       	rjmp	.-20     	; 0xd6c <vfprintf+0x37c>
 d80:	f7 01       	movw	r30, r14
 d82:	86 81       	ldd	r24, Z+6	; 0x06
 d84:	97 81       	ldd	r25, Z+7	; 0x07
 d86:	02 c0       	rjmp	.+4      	; 0xd8c <vfprintf+0x39c>
 d88:	8f ef       	ldi	r24, 0xFF	; 255
 d8a:	9f ef       	ldi	r25, 0xFF	; 255
 d8c:	2c 96       	adiw	r28, 0x0c	; 12
 d8e:	e2 e1       	ldi	r30, 0x12	; 18
 d90:	0c 94 92 07 	jmp	0xf24	; 0xf24 <__epilogue_restores__>

00000d94 <strnlen_P>:
 d94:	fc 01       	movw	r30, r24
 d96:	05 90       	lpm	r0, Z+
 d98:	61 50       	subi	r22, 0x01	; 1
 d9a:	70 40       	sbci	r23, 0x00	; 0
 d9c:	01 10       	cpse	r0, r1
 d9e:	d8 f7       	brcc	.-10     	; 0xd96 <strnlen_P+0x2>
 da0:	80 95       	com	r24
 da2:	90 95       	com	r25
 da4:	8e 0f       	add	r24, r30
 da6:	9f 1f       	adc	r25, r31
 da8:	08 95       	ret

00000daa <strnlen>:
 daa:	fc 01       	movw	r30, r24
 dac:	61 50       	subi	r22, 0x01	; 1
 dae:	70 40       	sbci	r23, 0x00	; 0
 db0:	01 90       	ld	r0, Z+
 db2:	01 10       	cpse	r0, r1
 db4:	d8 f7       	brcc	.-10     	; 0xdac <strnlen+0x2>
 db6:	80 95       	com	r24
 db8:	90 95       	com	r25
 dba:	8e 0f       	add	r24, r30
 dbc:	9f 1f       	adc	r25, r31
 dbe:	08 95       	ret

00000dc0 <fputc>:
 dc0:	0f 93       	push	r16
 dc2:	1f 93       	push	r17
 dc4:	cf 93       	push	r28
 dc6:	df 93       	push	r29
 dc8:	fb 01       	movw	r30, r22
 dca:	23 81       	ldd	r18, Z+3	; 0x03
 dcc:	21 fd       	sbrc	r18, 1
 dce:	03 c0       	rjmp	.+6      	; 0xdd6 <fputc+0x16>
 dd0:	8f ef       	ldi	r24, 0xFF	; 255
 dd2:	9f ef       	ldi	r25, 0xFF	; 255
 dd4:	28 c0       	rjmp	.+80     	; 0xe26 <fputc+0x66>
 dd6:	22 ff       	sbrs	r18, 2
 dd8:	16 c0       	rjmp	.+44     	; 0xe06 <fputc+0x46>
 dda:	46 81       	ldd	r20, Z+6	; 0x06
 ddc:	57 81       	ldd	r21, Z+7	; 0x07
 dde:	24 81       	ldd	r18, Z+4	; 0x04
 de0:	35 81       	ldd	r19, Z+5	; 0x05
 de2:	42 17       	cp	r20, r18
 de4:	53 07       	cpc	r21, r19
 de6:	44 f4       	brge	.+16     	; 0xdf8 <fputc+0x38>
 de8:	a0 81       	ld	r26, Z
 dea:	b1 81       	ldd	r27, Z+1	; 0x01
 dec:	9d 01       	movw	r18, r26
 dee:	2f 5f       	subi	r18, 0xFF	; 255
 df0:	3f 4f       	sbci	r19, 0xFF	; 255
 df2:	31 83       	std	Z+1, r19	; 0x01
 df4:	20 83       	st	Z, r18
 df6:	8c 93       	st	X, r24
 df8:	26 81       	ldd	r18, Z+6	; 0x06
 dfa:	37 81       	ldd	r19, Z+7	; 0x07
 dfc:	2f 5f       	subi	r18, 0xFF	; 255
 dfe:	3f 4f       	sbci	r19, 0xFF	; 255
 e00:	37 83       	std	Z+7, r19	; 0x07
 e02:	26 83       	std	Z+6, r18	; 0x06
 e04:	10 c0       	rjmp	.+32     	; 0xe26 <fputc+0x66>
 e06:	eb 01       	movw	r28, r22
 e08:	09 2f       	mov	r16, r25
 e0a:	18 2f       	mov	r17, r24
 e0c:	00 84       	ldd	r0, Z+8	; 0x08
 e0e:	f1 85       	ldd	r31, Z+9	; 0x09
 e10:	e0 2d       	mov	r30, r0
 e12:	09 95       	icall
 e14:	89 2b       	or	r24, r25
 e16:	e1 f6       	brne	.-72     	; 0xdd0 <fputc+0x10>
 e18:	8e 81       	ldd	r24, Y+6	; 0x06
 e1a:	9f 81       	ldd	r25, Y+7	; 0x07
 e1c:	01 96       	adiw	r24, 0x01	; 1
 e1e:	9f 83       	std	Y+7, r25	; 0x07
 e20:	8e 83       	std	Y+6, r24	; 0x06
 e22:	81 2f       	mov	r24, r17
 e24:	90 2f       	mov	r25, r16
 e26:	df 91       	pop	r29
 e28:	cf 91       	pop	r28
 e2a:	1f 91       	pop	r17
 e2c:	0f 91       	pop	r16
 e2e:	08 95       	ret

00000e30 <__ultoa_invert>:
 e30:	fa 01       	movw	r30, r20
 e32:	aa 27       	eor	r26, r26
 e34:	28 30       	cpi	r18, 0x08	; 8
 e36:	51 f1       	breq	.+84     	; 0xe8c <__ultoa_invert+0x5c>
 e38:	20 31       	cpi	r18, 0x10	; 16
 e3a:	81 f1       	breq	.+96     	; 0xe9c <__ultoa_invert+0x6c>
 e3c:	e8 94       	clt
 e3e:	6f 93       	push	r22
 e40:	6e 7f       	andi	r22, 0xFE	; 254
 e42:	6e 5f       	subi	r22, 0xFE	; 254
 e44:	7f 4f       	sbci	r23, 0xFF	; 255
 e46:	8f 4f       	sbci	r24, 0xFF	; 255
 e48:	9f 4f       	sbci	r25, 0xFF	; 255
 e4a:	af 4f       	sbci	r26, 0xFF	; 255
 e4c:	b1 e0       	ldi	r27, 0x01	; 1
 e4e:	3e d0       	rcall	.+124    	; 0xecc <__ultoa_invert+0x9c>
 e50:	b4 e0       	ldi	r27, 0x04	; 4
 e52:	3c d0       	rcall	.+120    	; 0xecc <__ultoa_invert+0x9c>
 e54:	67 0f       	add	r22, r23
 e56:	78 1f       	adc	r23, r24
 e58:	89 1f       	adc	r24, r25
 e5a:	9a 1f       	adc	r25, r26
 e5c:	a1 1d       	adc	r26, r1
 e5e:	68 0f       	add	r22, r24
 e60:	79 1f       	adc	r23, r25
 e62:	8a 1f       	adc	r24, r26
 e64:	91 1d       	adc	r25, r1
 e66:	a1 1d       	adc	r26, r1
 e68:	6a 0f       	add	r22, r26
 e6a:	71 1d       	adc	r23, r1
 e6c:	81 1d       	adc	r24, r1
 e6e:	91 1d       	adc	r25, r1
 e70:	a1 1d       	adc	r26, r1
 e72:	20 d0       	rcall	.+64     	; 0xeb4 <__ultoa_invert+0x84>
 e74:	09 f4       	brne	.+2      	; 0xe78 <__ultoa_invert+0x48>
 e76:	68 94       	set
 e78:	3f 91       	pop	r19
 e7a:	2a e0       	ldi	r18, 0x0A	; 10
 e7c:	26 9f       	mul	r18, r22
 e7e:	11 24       	eor	r1, r1
 e80:	30 19       	sub	r19, r0
 e82:	30 5d       	subi	r19, 0xD0	; 208
 e84:	31 93       	st	Z+, r19
 e86:	de f6       	brtc	.-74     	; 0xe3e <__ultoa_invert+0xe>
 e88:	cf 01       	movw	r24, r30
 e8a:	08 95       	ret
 e8c:	46 2f       	mov	r20, r22
 e8e:	47 70       	andi	r20, 0x07	; 7
 e90:	40 5d       	subi	r20, 0xD0	; 208
 e92:	41 93       	st	Z+, r20
 e94:	b3 e0       	ldi	r27, 0x03	; 3
 e96:	0f d0       	rcall	.+30     	; 0xeb6 <__ultoa_invert+0x86>
 e98:	c9 f7       	brne	.-14     	; 0xe8c <__ultoa_invert+0x5c>
 e9a:	f6 cf       	rjmp	.-20     	; 0xe88 <__ultoa_invert+0x58>
 e9c:	46 2f       	mov	r20, r22
 e9e:	4f 70       	andi	r20, 0x0F	; 15
 ea0:	40 5d       	subi	r20, 0xD0	; 208
 ea2:	4a 33       	cpi	r20, 0x3A	; 58
 ea4:	18 f0       	brcs	.+6      	; 0xeac <__ultoa_invert+0x7c>
 ea6:	49 5d       	subi	r20, 0xD9	; 217
 ea8:	31 fd       	sbrc	r19, 1
 eaa:	40 52       	subi	r20, 0x20	; 32
 eac:	41 93       	st	Z+, r20
 eae:	02 d0       	rcall	.+4      	; 0xeb4 <__ultoa_invert+0x84>
 eb0:	a9 f7       	brne	.-22     	; 0xe9c <__ultoa_invert+0x6c>
 eb2:	ea cf       	rjmp	.-44     	; 0xe88 <__ultoa_invert+0x58>
 eb4:	b4 e0       	ldi	r27, 0x04	; 4
 eb6:	a6 95       	lsr	r26
 eb8:	97 95       	ror	r25
 eba:	87 95       	ror	r24
 ebc:	77 95       	ror	r23
 ebe:	67 95       	ror	r22
 ec0:	ba 95       	dec	r27
 ec2:	c9 f7       	brne	.-14     	; 0xeb6 <__ultoa_invert+0x86>
 ec4:	00 97       	sbiw	r24, 0x00	; 0
 ec6:	61 05       	cpc	r22, r1
 ec8:	71 05       	cpc	r23, r1
 eca:	08 95       	ret
 ecc:	9b 01       	movw	r18, r22
 ece:	ac 01       	movw	r20, r24
 ed0:	0a 2e       	mov	r0, r26
 ed2:	06 94       	lsr	r0
 ed4:	57 95       	ror	r21
 ed6:	47 95       	ror	r20
 ed8:	37 95       	ror	r19
 eda:	27 95       	ror	r18
 edc:	ba 95       	dec	r27
 ede:	c9 f7       	brne	.-14     	; 0xed2 <__ultoa_invert+0xa2>
 ee0:	62 0f       	add	r22, r18
 ee2:	73 1f       	adc	r23, r19
 ee4:	84 1f       	adc	r24, r20
 ee6:	95 1f       	adc	r25, r21
 ee8:	a0 1d       	adc	r26, r0
 eea:	08 95       	ret

00000eec <__prologue_saves__>:
 eec:	2f 92       	push	r2
 eee:	3f 92       	push	r3
 ef0:	4f 92       	push	r4
 ef2:	5f 92       	push	r5
 ef4:	6f 92       	push	r6
 ef6:	7f 92       	push	r7
 ef8:	8f 92       	push	r8
 efa:	9f 92       	push	r9
 efc:	af 92       	push	r10
 efe:	bf 92       	push	r11
 f00:	cf 92       	push	r12
 f02:	df 92       	push	r13
 f04:	ef 92       	push	r14
 f06:	ff 92       	push	r15
 f08:	0f 93       	push	r16
 f0a:	1f 93       	push	r17
 f0c:	cf 93       	push	r28
 f0e:	df 93       	push	r29
 f10:	cd b7       	in	r28, 0x3d	; 61
 f12:	de b7       	in	r29, 0x3e	; 62
 f14:	ca 1b       	sub	r28, r26
 f16:	db 0b       	sbc	r29, r27
 f18:	0f b6       	in	r0, 0x3f	; 63
 f1a:	f8 94       	cli
 f1c:	de bf       	out	0x3e, r29	; 62
 f1e:	0f be       	out	0x3f, r0	; 63
 f20:	cd bf       	out	0x3d, r28	; 61
 f22:	09 94       	ijmp

00000f24 <__epilogue_restores__>:
 f24:	2a 88       	ldd	r2, Y+18	; 0x12
 f26:	39 88       	ldd	r3, Y+17	; 0x11
 f28:	48 88       	ldd	r4, Y+16	; 0x10
 f2a:	5f 84       	ldd	r5, Y+15	; 0x0f
 f2c:	6e 84       	ldd	r6, Y+14	; 0x0e
 f2e:	7d 84       	ldd	r7, Y+13	; 0x0d
 f30:	8c 84       	ldd	r8, Y+12	; 0x0c
 f32:	9b 84       	ldd	r9, Y+11	; 0x0b
 f34:	aa 84       	ldd	r10, Y+10	; 0x0a
 f36:	b9 84       	ldd	r11, Y+9	; 0x09
 f38:	c8 84       	ldd	r12, Y+8	; 0x08
 f3a:	df 80       	ldd	r13, Y+7	; 0x07
 f3c:	ee 80       	ldd	r14, Y+6	; 0x06
 f3e:	fd 80       	ldd	r15, Y+5	; 0x05
 f40:	0c 81       	ldd	r16, Y+4	; 0x04
 f42:	1b 81       	ldd	r17, Y+3	; 0x03
 f44:	aa 81       	ldd	r26, Y+2	; 0x02
 f46:	b9 81       	ldd	r27, Y+1	; 0x01
 f48:	ce 0f       	add	r28, r30
 f4a:	d1 1d       	adc	r29, r1
 f4c:	0f b6       	in	r0, 0x3f	; 63
 f4e:	f8 94       	cli
 f50:	de bf       	out	0x3e, r29	; 62
 f52:	0f be       	out	0x3f, r0	; 63
 f54:	cd bf       	out	0x3d, r28	; 61
 f56:	ed 01       	movw	r28, r26
 f58:	08 95       	ret

00000f5a <_exit>:
 f5a:	f8 94       	cli

00000f5c <__stop_program>:
 f5c:	ff cf       	rjmp	.-2      	; 0xf5c <__stop_program>
