
Receiver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c6  00800100  00000f4a  00000fde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000150  008001c6  008001c6  000010a4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001100  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001140  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014ac  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000884  00000000  00000000  00002734  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d88  00000000  00000000  00002fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000340  00000000  00000000  00003d40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004be  00000000  00000000  00004080  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ab8  00000000  00000000  0000453e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00004ff6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__vector_1>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 03 02 	jmp	0x406	; 0x406 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 13 04 	jmp	0x826	; 0x826 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea e4       	ldi	r30, 0x4A	; 74
  7c:	ff e0       	ldi	r31, 0x0F	; 15
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 3c       	cpi	r26, 0xC6	; 198
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	23 e0       	ldi	r18, 0x03	; 3
  8c:	a6 ec       	ldi	r26, 0xC6	; 198
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 31       	cpi	r26, 0x16	; 22
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 95 01 	call	0x32a	; 0x32a <main>
  9e:	0c 94 a3 07 	jmp	0xf46	; 0xf46 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ESP_AT>:
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
	ESP_Response.ERROR = 0;
	ESP_Response.INPUT = 0;
  a6:	8d e1       	ldi	r24, 0x1D	; 29
  a8:	91 e0       	ldi	r25, 0x01	; 1
  aa:	0e 94 04 04 	call	0x808	; 0x808 <UART_SendString>
  ae:	08 95       	ret

000000b0 <WaitForResponse>:
}
void WaitForResponse(void)
{
	while(ESP_Response.OK == 0 &&
  b0:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
  b4:	80 fd       	sbrc	r24, 0
  b6:	08 c0       	rjmp	.+16     	; 0xc8 <WaitForResponse+0x18>
		  ESP_Response.ERROR == 0 &&
  b8:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
	ESP_Response.ERROR = 0;
	ESP_Response.INPUT = 0;
}
void WaitForResponse(void)
{
	while(ESP_Response.OK == 0 &&
  bc:	81 fd       	sbrc	r24, 1
  be:	04 c0       	rjmp	.+8      	; 0xc8 <WaitForResponse+0x18>
		  ESP_Response.ERROR == 0 &&
		  ESP_Response.INPUT == 0);
  c0:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
	ESP_Response.INPUT = 0;
}
void WaitForResponse(void)
{
	while(ESP_Response.OK == 0 &&
		  ESP_Response.ERROR == 0 &&
  c4:	82 ff       	sbrs	r24, 2
  c6:	f4 cf       	rjmp	.-24     	; 0xb0 <WaitForResponse>
  c8:	08 95       	ret

000000ca <ESP_Initialize>:
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
  ca:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
  ce:	8e 7f       	andi	r24, 0xFE	; 254
  d0:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ESP_Response>
	ESP_Response.ERROR = 0;
  d4:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
  d8:	8d 7f       	andi	r24, 0xFD	; 253
  da:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ESP_Response>
	ESP_Response.INPUT = 0;
  de:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
  e2:	8b 7f       	andi	r24, 0xFB	; 251
  e4:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ESP_Response>
/************************************************************************/
uint8_t ESP_Initialize(void)
{
	/*--- Checking communication between microcontroller and ESP ---*/
	ResetResponse();
	bufferIndex = 0;
  e8:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <bufferIndex>
	ESP_AT();
  ec:	0e 94 53 00 	call	0xa6	; 0xa6 <ESP_AT>
	WaitForResponse();
  f0:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
  f4:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
  f8:	8e 7f       	andi	r24, 0xFE	; 254
  fa:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ESP_Response>
	ESP_Response.ERROR = 0;
  fe:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
 102:	8d 7f       	andi	r24, 0xFD	; 253
 104:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ESP_Response>
	ESP_Response.INPUT = 0;
 108:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
 10c:	8b 7f       	andi	r24, 0xFB	; 251
 10e:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ESP_Response>

	/*--- ECHO ---*/
#if ESP_ECHO == 0
	UART_SendString("ATE0\r\n");
#else
	UART_SendString("ATE1\r\n");
 112:	8b e2       	ldi	r24, 0x2B	; 43
 114:	91 e0       	ldi	r25, 0x01	; 1
 116:	0e 94 04 04 	call	0x808	; 0x808 <UART_SendString>
#endif
	WaitForResponse();
 11a:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
 11e:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
 122:	8e 7f       	andi	r24, 0xFE	; 254
 124:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ESP_Response>
	ESP_Response.ERROR = 0;
 128:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
 12c:	8d 7f       	andi	r24, 0xFD	; 253
 12e:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ESP_Response>
	ESP_Response.INPUT = 0;
 132:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
 136:	8b 7f       	andi	r24, 0xFB	; 251
 138:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ESP_Response>
	WaitForResponse();
	ResetResponse();

	/*--- MODE ---*/
#if ESP_WIFIMODE == 1
	UART_SendString("AT+CWMODE=1\r\n"); //STATION MODE
 13c:	82 e3       	ldi	r24, 0x32	; 50
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	0e 94 04 04 	call	0x808	; 0x808 <UART_SendString>
#elif ESP_WIFIMODE == 2
	UART_SendString("AT+CWMODE=2\r\n"); //ACCESS POINT MODE
#elif ESP_WIFIMODE == 3
	UART_SendString("AT+CWMODE=3\r\n"); //STATON + ACCESS POINT MODE
#endif
	WaitForResponse();
 144:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
 148:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
 14c:	8e 7f       	andi	r24, 0xFE	; 254
 14e:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ESP_Response>
	ESP_Response.ERROR = 0;
 152:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
 156:	8d 7f       	andi	r24, 0xFD	; 253
 158:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ESP_Response>
	ESP_Response.INPUT = 0;
 15c:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
 160:	8b 7f       	andi	r24, 0xFB	; 251
 162:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ESP_Response>
	WaitForResponse();
	ResetResponse();

	/*--- CONNECTING TO WIFI ---*/
#if ESP_WIFIMODE == 1 || ESP_WIFIMODE  == 3
	ESP_Response.ERROR = 0;
 166:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
 16a:	8d 7f       	andi	r24, 0xFD	; 253
 16c:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ESP_Response>
	
	UART_SendString("AT+CWJAP=\"");
 170:	80 e4       	ldi	r24, 0x40	; 64
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	0e 94 04 04 	call	0x808	; 0x808 <UART_SendString>
	UART_SendString(ESP_APNAME);
 178:	8e e4       	ldi	r24, 0x4E	; 78
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	0e 94 04 04 	call	0x808	; 0x808 <UART_SendString>
	UART_SendString("\",\"");
 180:	8d e6       	ldi	r24, 0x6D	; 109
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	0e 94 04 04 	call	0x808	; 0x808 <UART_SendString>
	UART_SendString(ESP_APPASSWORD);
 188:	8e e4       	ldi	r24, 0x4E	; 78
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	0e 94 04 04 	call	0x808	; 0x808 <UART_SendString>
	UART_SendString("\"\r\n");
 190:	8b e4       	ldi	r24, 0x4B	; 75
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	0e 94 04 04 	call	0x808	; 0x808 <UART_SendString>
	WaitForResponse();
 198:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	if(ESP_Response.ERROR == 1)
 19c:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
 1a0:	81 ff       	sbrs	r24, 1
 1a2:	07 c0       	rjmp	.+14     	; 0x1b2 <ESP_Initialize+0xe8>
	{
		ESP_Response.ERROR = 0;
 1a4:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
 1a8:	8d 7f       	andi	r24, 0xFD	; 253
 1aa:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ESP_Response>
		return 2;
 1ae:	82 e0       	ldi	r24, 0x02	; 2
 1b0:	08 95       	ret
	}
	else
	{
		ESP_Response.OK = 0;
 1b2:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
 1b6:	8e 7f       	andi	r24, 0xFE	; 254
 1b8:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ESP_Response>
	WaitForResponse();
	ResetResponse();

#endif /* ESP_WIFIMODE == 2 || ESP_WIFIMODE == 3 */
#if ESP_CONNECTIONTYPE == 1 //UDP
	UART_SendString("AT+CIPMUX=0\r\n");
 1bc:	8f e4       	ldi	r24, 0x4F	; 79
 1be:	91 e0       	ldi	r25, 0x01	; 1
 1c0:	0e 94 04 04 	call	0x808	; 0x808 <UART_SendString>
	WaitForResponse();
 1c4:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
 1c8:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
 1cc:	8e 7f       	andi	r24, 0xFE	; 254
 1ce:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ESP_Response>
	ESP_Response.ERROR = 0;
 1d2:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
 1d6:	8d 7f       	andi	r24, 0xFD	; 253
 1d8:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ESP_Response>
	ESP_Response.INPUT = 0;
 1dc:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
 1e0:	8b 7f       	andi	r24, 0xFB	; 251
 1e2:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ESP_Response>
#endif /* ESP_WIFIMODE == 2 || ESP_WIFIMODE == 3 */
#if ESP_CONNECTIONTYPE == 1 //UDP
	UART_SendString("AT+CIPMUX=0\r\n");
	WaitForResponse();
	ResetResponse();
	UART_SendString("AT+CIPSTART=\"UDP\",\"");
 1e6:	8d e5       	ldi	r24, 0x5D	; 93
 1e8:	91 e0       	ldi	r25, 0x01	; 1
 1ea:	0e 94 04 04 	call	0x808	; 0x808 <UART_SendString>
	UART_SendString(ESP_IP);
 1ee:	81 e7       	ldi	r24, 0x71	; 113
 1f0:	91 e0       	ldi	r25, 0x01	; 1
 1f2:	0e 94 04 04 	call	0x808	; 0x808 <UART_SendString>
	UART_SendString("\",");
 1f6:	8f e7       	ldi	r24, 0x7F	; 127
 1f8:	91 e0       	ldi	r25, 0x01	; 1
 1fa:	0e 94 04 04 	call	0x808	; 0x808 <UART_SendString>
	UART_SendString(ESP_PORT);
 1fe:	82 e8       	ldi	r24, 0x82	; 130
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	0e 94 04 04 	call	0x808	; 0x808 <UART_SendString>
	UART_SendString("\r\n");
 206:	8c e4       	ldi	r24, 0x4C	; 76
 208:	91 e0       	ldi	r25, 0x01	; 1
 20a:	0e 94 04 04 	call	0x808	; 0x808 <UART_SendString>
	WaitForResponse();
 20e:	0e 94 58 00 	call	0xb0	; 0xb0 <WaitForResponse>
	if(ESP_Response.ERROR)
 212:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
 216:	81 ff       	sbrs	r24, 1
 218:	11 c0       	rjmp	.+34     	; 0x23c <ESP_Initialize+0x172>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
 21a:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
 21e:	8e 7f       	andi	r24, 0xFE	; 254
 220:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ESP_Response>
	ESP_Response.ERROR = 0;
 224:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
 228:	8d 7f       	andi	r24, 0xFD	; 253
 22a:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ESP_Response>
	ESP_Response.INPUT = 0;
 22e:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
 232:	8b 7f       	andi	r24, 0xFB	; 251
 234:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ESP_Response>
	UART_SendString("\r\n");
	WaitForResponse();
	if(ESP_Response.ERROR)
	{
		ResetResponse();
		return 1;
 238:	81 e0       	ldi	r24, 0x01	; 1
 23a:	08 95       	ret
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
 23c:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
 240:	8e 7f       	andi	r24, 0xFE	; 254
 242:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ESP_Response>
	ESP_Response.ERROR = 0;
 246:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
 24a:	8d 7f       	andi	r24, 0xFD	; 253
 24c:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ESP_Response>
	ESP_Response.INPUT = 0;
 250:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
 254:	8b 7f       	andi	r24, 0xFB	; 251
 256:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ESP_Response>
#else
	UART_SendString("AT+CIPDINFO=1\r\n");
	WaitForResponse();
	ResetResponse();
#endif
	return 0;
 25a:	80 e0       	ldi	r24, 0x00	; 0
}
 25c:	08 95       	ret

0000025e <ESP_Send>:
}
/************************************************************************/
/*                               SENDING                                */
/************************************************************************/
uint8_t ESP_Send(char* data, char* connectionID)
{
 25e:	ef 92       	push	r14
 260:	ff 92       	push	r15
 262:	0f 93       	push	r16
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
 26a:	00 d0       	rcall	.+0      	; 0x26c <ESP_Send+0xe>
 26c:	00 d0       	rcall	.+0      	; 0x26e <ESP_Send+0x10>
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
 272:	8c 01       	movw	r16, r24
#if ESP_CONNECTIONTYPE == 2
	if(ESP_Connections == 0) //If there are no connections...
		return 1; //Return 1 - error
#endif
	//Length of data
	uint16_t size = strlen(data);
 274:	fc 01       	movw	r30, r24
 276:	01 90       	ld	r0, Z+
 278:	00 20       	and	r0, r0
 27a:	e9 f7       	brne	.-6      	; 0x276 <ESP_Send+0x18>
 27c:	31 97       	sbiw	r30, 0x01	; 1
 27e:	e8 1b       	sub	r30, r24
 280:	f9 0b       	sbc	r31, r25
	char length[4];
	sprintf(length, "%d", size);
 282:	ff 93       	push	r31
 284:	ef 93       	push	r30
 286:	87 e8       	ldi	r24, 0x87	; 135
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	9f 93       	push	r25
 28c:	8f 93       	push	r24
 28e:	ce 01       	movw	r24, r28
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	7c 01       	movw	r14, r24
 294:	9f 93       	push	r25
 296:	8f 93       	push	r24
 298:	0e 94 cb 04 	call	0x996	; 0x996 <sprintf>

	UART_SendString("AT+CIPSEND=");
 29c:	8a e8       	ldi	r24, 0x8A	; 138
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	0e 94 04 04 	call	0x808	; 0x808 <UART_SendString>
#if ESP_CONNECTIONTYPE == 2
	UART_SendString(connectionID);
	UART_SendString(",");
#endif
	UART_SendString(length);
 2a4:	c7 01       	movw	r24, r14
 2a6:	0e 94 04 04 	call	0x808	; 0x808 <UART_SendString>
	UART_SendString("\r\n");
 2aa:	8c e4       	ldi	r24, 0x4C	; 76
 2ac:	91 e0       	ldi	r25, 0x01	; 1
 2ae:	0e 94 04 04 	call	0x808	; 0x808 <UART_SendString>
	while(!ESP_Response.INPUT && !ESP_Response.ERROR);
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	0f 90       	pop	r0
 2ba:	0f 90       	pop	r0
 2bc:	0f 90       	pop	r0
 2be:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <ESP_Response>
 2c2:	92 fd       	sbrc	r25, 2
 2c4:	04 c0       	rjmp	.+8      	; 0x2ce <ESP_Send+0x70>
 2c6:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <ESP_Response>
 2ca:	91 ff       	sbrs	r25, 1
 2cc:	f8 cf       	rjmp	.-16     	; 0x2be <ESP_Send+0x60>
	if(ESP_Response.INPUT == 1)
 2ce:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
 2d2:	82 ff       	sbrs	r24, 2
 2d4:	04 c0       	rjmp	.+8      	; 0x2de <ESP_Send+0x80>
	{
		UART_SendString(data);
 2d6:	c8 01       	movw	r24, r16
 2d8:	0e 94 04 04 	call	0x808	; 0x808 <UART_SendString>
 2dc:	0b c0       	rjmp	.+22     	; 0x2f4 <ESP_Send+0x96>
	}
	else if(ESP_Response.ERROR) 
 2de:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
 2e2:	81 ff       	sbrs	r24, 1
 2e4:	07 c0       	rjmp	.+14     	; 0x2f4 <ESP_Send+0x96>
	{
		ESP_Response.ERROR = 0;
 2e6:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
 2ea:	8d 7f       	andi	r24, 0xFD	; 253
 2ec:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ESP_Response>
		return 1;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	10 c0       	rjmp	.+32     	; 0x314 <ESP_Send+0xb6>
	_delay_ms(10);
	ESP_Response.OK = 0;
}
inline void ResetResponse(void)
{
	ESP_Response.OK = 0;
 2f4:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
 2f8:	8e 7f       	andi	r24, 0xFE	; 254
 2fa:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ESP_Response>
	ESP_Response.ERROR = 0;
 2fe:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
 302:	8d 7f       	andi	r24, 0xFD	; 253
 304:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ESP_Response>
	ESP_Response.INPUT = 0;
 308:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
 30c:	8b 7f       	andi	r24, 0xFB	; 251
 30e:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ESP_Response>
#if ESP_CONNECTIONTYPE == 2
	UART_SendString("AT+CIPCLOSE=0\r\n");
	WaitForResponse();
#endif
	ResetResponse();
	return 0;
 312:	80 e0       	ldi	r24, 0x00	; 0
}
 314:	0f 90       	pop	r0
 316:	0f 90       	pop	r0
 318:	0f 90       	pop	r0
 31a:	0f 90       	pop	r0
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	1f 91       	pop	r17
 322:	0f 91       	pop	r16
 324:	ff 90       	pop	r15
 326:	ef 90       	pop	r14
 328:	08 95       	ret

0000032a <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 32a:	2f ef       	ldi	r18, 0xFF	; 255
 32c:	8f ef       	ldi	r24, 0xFF	; 255
 32e:	9c e2       	ldi	r25, 0x2C	; 44
 330:	21 50       	subi	r18, 0x01	; 1
 332:	80 40       	sbci	r24, 0x00	; 0
 334:	90 40       	sbci	r25, 0x00	; 0
 336:	e1 f7       	brne	.-8      	; 0x330 <main+0x6>
 338:	00 c0       	rjmp	.+0      	; 0x33a <main+0x10>
 33a:	00 00       	nop
uint8_t connCounter; //This will be used to sent connection test message (conntest
int main(void)
{
	_delay_ms(1000); //Waiting until ESP is ready
	// --- LED --- //
	DDRB = (1<<LED0);
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	84 b9       	out	0x04, r24	; 4

	// --- TIMER --- //
	TCCR1B = (1<<CS12) | (1<<CS10); // clk/1024 prescaler
 340:	95 e0       	ldi	r25, 0x05	; 5
 342:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 = (1<<TOIE1); //Overflow interrupt enable
 346:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

	// --- RF12 --- //
	RF_Initialize();
 34a:	0e 94 1a 02 	call	0x434	; 0x434 <RF_Initialize>
	RF_SetRange(RANGE_433MHZ);
 34e:	80 e1       	ldi	r24, 0x10	; 16
 350:	0e 94 75 02 	call	0x4ea	; 0x4ea <RF_SetRange>
	RF_SetFrequency(RFFREQ433(432.74));
 354:	88 ee       	ldi	r24, 0xE8	; 232
 356:	93 e0       	ldi	r25, 0x03	; 3
 358:	0e 94 92 02 	call	0x524	; 0x524 <RF_SetFrequency>
	RF_SetBaudRate(9600);
 35c:	80 e8       	ldi	r24, 0x80	; 128
 35e:	95 e2       	ldi	r25, 0x25	; 37
 360:	0e 94 a2 02 	call	0x544	; 0x544 <RF_SetBaudRate>
	RF_SetBandwith(RxBW200, LNA_6, RSSI_79);
 364:	44 e0       	ldi	r20, 0x04	; 4
 366:	61 e0       	ldi	r22, 0x01	; 1
 368:	84 e0       	ldi	r24, 0x04	; 4
 36a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <RF_SetBandwith>
	RF_SetPower(PWRdB_0, TxBW120);
 36e:	67 e0       	ldi	r22, 0x07	; 7
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	0e 94 cd 02 	call	0x59a	; 0x59a <RF_SetPower>
	RF_DisableWakeUpTimer();
 376:	0e 94 c8 02 	call	0x590	; 0x590 <RF_DisableWakeUpTimer>
	RF_Transmit(0x0000);
 37a:	80 e0       	ldi	r24, 0x00	; 0
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	0e 94 43 02 	call	0x486	; 0x486 <RF_Transmit>
	RF_Transmit(0xCC77);
 382:	87 e7       	ldi	r24, 0x77	; 119
 384:	9c ec       	ldi	r25, 0xCC	; 204
 386:	0e 94 43 02 	call	0x486	; 0x486 <RF_Transmit>
	uint8_t ret = 0;

	sei();
 38a:	78 94       	sei

	// --- UART --- //
	UART_Initlialise(UBRR);
 38c:	87 e0       	ldi	r24, 0x07	; 7
 38e:	90 e0       	ldi	r25, 0x00	; 0
 390:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <UART_Initlialise>
	ESP_Initialize();
 394:	0e 94 65 00 	call	0xca	; 0xca <ESP_Initialize>

	// --- SLEEP AND POWER MANAGEMENT --- //
	PRR = (1<<PRTWI) | (1<<PRTIM2) | (1<<PRADC);
 398:	81 ec       	ldi	r24, 0xC1	; 193
 39a:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>

	ESP_Send(conntestMsg,0);
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	70 e0       	ldi	r23, 0x00	; 0
 3a2:	80 e0       	ldi	r24, 0x00	; 0
 3a4:	91 e0       	ldi	r25, 0x01	; 1
 3a6:	0e 94 2f 01 	call	0x25e	; 0x25e <ESP_Send>
	while (1)
	{
		if(connCounter >= 13) //Approximately a minute
 3aa:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <connCounter>
 3ae:	8d 30       	cpi	r24, 0x0D	; 13
 3b0:	40 f0       	brcs	.+16     	; 0x3c2 <main+0x98>
		{
			ESP_Send(conntestMsg,0);
 3b2:	60 e0       	ldi	r22, 0x00	; 0
 3b4:	70 e0       	ldi	r23, 0x00	; 0
 3b6:	80 e0       	ldi	r24, 0x00	; 0
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	0e 94 2f 01 	call	0x25e	; 0x25e <ESP_Send>
			connCounter = 0;
 3be:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <connCounter>
		}

	// --- RF12 RECEIVING DATA --- //
#if RF_UseIRQ == 1
	if(!(RF_status.status & 0x07))
 3c2:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <RF_status>
 3c6:	87 70       	andi	r24, 0x07	; 7
 3c8:	11 f4       	brne	.+4      	; 0x3ce <main+0xa4>
	{
		RF_RxStart();
 3ca:	0e 94 60 03 	call	0x6c0	; 0x6c0 <RF_RxStart>
	}
	if(RF_status.New)
 3ce:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <RF_status>
 3d2:	82 ff       	sbrs	r24, 2
 3d4:	ea cf       	rjmp	.-44     	; 0x3aa <main+0x80>
	{
		ret = RF_RxFinish(data);
 3d6:	8a ec       	ldi	r24, 0xCA	; 202
 3d8:	91 e0       	ldi	r25, 0x01	; 1
 3da:	0e 94 87 03 	call	0x70e	; 0x70e <RF_RxFinish>

		if(data > 0 && ret < 254)
 3de:	8e 3f       	cpi	r24, 0xFE	; 254
 3e0:	48 f4       	brcc	.+18     	; 0x3f4 <main+0xca>
		{
			ESP_Send(data,0);
 3e2:	60 e0       	ldi	r22, 0x00	; 0
 3e4:	70 e0       	ldi	r23, 0x00	; 0
 3e6:	8a ec       	ldi	r24, 0xCA	; 202
 3e8:	91 e0       	ldi	r25, 0x01	; 1
 3ea:	0e 94 2f 01 	call	0x25e	; 0x25e <ESP_Send>
			data[16] = 0;
 3ee:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <data+0x10>
 3f2:	db cf       	rjmp	.-74     	; 0x3aa <main+0x80>
		}
		else if(!ret)
 3f4:	81 11       	cpse	r24, r1
 3f6:	d9 cf       	rjmp	.-78     	; 0x3aa <main+0x80>
		{
			ESP_Send(crcErrorMsg, 0);
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	70 e0       	ldi	r23, 0x00	; 0
 3fc:	89 e0       	ldi	r24, 0x09	; 9
 3fe:	91 e0       	ldi	r25, 0x01	; 1
 400:	0e 94 2f 01 	call	0x25e	; 0x25e <ESP_Send>
 404:	d2 cf       	rjmp	.-92     	; 0x3aa <main+0x80>

00000406 <__vector_13>:
#endif
	}
}
// --- "ALIVE" LED INTERRUPT --- //
ISR(TIMER1_OVF_vect) //4.5s on 14MHz clock
{
 406:	1f 92       	push	r1
 408:	0f 92       	push	r0
 40a:	0f b6       	in	r0, 0x3f	; 63
 40c:	0f 92       	push	r0
 40e:	11 24       	eor	r1, r1
 410:	8f 93       	push	r24
 412:	9f 93       	push	r25
	PORTB ^= (1<<LED0);
 414:	95 b1       	in	r25, 0x05	; 5
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	89 27       	eor	r24, r25
 41a:	85 b9       	out	0x05, r24	; 5
	connCounter++;	
 41c:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <connCounter>
 420:	8f 5f       	subi	r24, 0xFF	; 255
 422:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <connCounter>
 426:	9f 91       	pop	r25
 428:	8f 91       	pop	r24
 42a:	0f 90       	pop	r0
 42c:	0f be       	out	0x3f, r0	; 63
 42e:	0f 90       	pop	r0
 430:	1f 90       	pop	r1
 432:	18 95       	reti

00000434 <RF_Initialize>:
//-------------------------INITIALIZATION-------------------------------//
void RF_Initialize(void)
{
	//	INTIALZATION OF PINS
	
	RF_DDR |= (1<<SDI) | (1<<SCK) | (1<<CS);
 434:	84 b1       	in	r24, 0x04	; 4
 436:	8c 62       	ori	r24, 0x2C	; 44
 438:	84 b9       	out	0x04, r24	; 4
	RF_DDR &= ~(1<<SDO);
 43a:	24 98       	cbi	0x04, 4	; 4
	
	RF_PORT |= (1<<CS);
 43c:	2a 9a       	sbi	0x05, 2	; 5
	//SPCR = (1<<SPE) | (1<<MSTR); //SCK - Fosc/128

#if RF_UseIRQ == 1
	RF_PORT |= (1<<SDO);
 43e:	2c 9a       	sbi	0x05, 4	; 5
 440:	2f ef       	ldi	r18, 0xFF	; 255
 442:	8f e7       	ldi	r24, 0x7F	; 127
 444:	94 e0       	ldi	r25, 0x04	; 4
 446:	21 50       	subi	r18, 0x01	; 1
 448:	80 40       	sbci	r24, 0x00	; 0
 44a:	90 40       	sbci	r25, 0x00	; 0
 44c:	e1 f7       	brne	.-8      	; 0x446 <RF_Initialize+0x12>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <RF_Initialize+0x1c>
 450:	00 00       	nop
#endif

	_delay_ms(100); //WAITING FOR MODULE TO RESET

#if RF_UseIRQ == 1
	RF_status.Rx = 0;
 452:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <RF_status>
 456:	8e 7f       	andi	r24, 0xFE	; 254
 458:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <RF_status>
	RF_status.Tx = 0;
 45c:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <RF_status>
 460:	8d 7f       	andi	r24, 0xFD	; 253
 462:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <RF_status>
	RF_status.New = 0;
 466:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <RF_status>
 46a:	8b 7f       	andi	r24, 0xFB	; 251
 46c:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <RF_status>

	RF_IRQDDR &= ~(1<<IRQ);
 470:	52 98       	cbi	0x0a, 2	; 10
	//LOW STATE ON INT0 WILL GENERATE AN INTERRUPT
	EICRA &= ~(1<<ISC01);
 472:	e9 e6       	ldi	r30, 0x69	; 105
 474:	f0 e0       	ldi	r31, 0x00	; 0
 476:	80 81       	ld	r24, Z
 478:	8d 7f       	andi	r24, 0xFD	; 253
 47a:	80 83       	st	Z, r24
	EICRA &= ~(1<<ISC00);
 47c:	80 81       	ld	r24, Z
 47e:	8e 7f       	andi	r24, 0xFE	; 254
 480:	80 83       	st	Z, r24

	EIMSK |= (1<<INT0);
 482:	e8 9a       	sbi	0x1d, 0	; 29
 484:	08 95       	ret

00000486 <RF_Transmit>:
#endif
}

//----------------------------TRANSMITION-------------------------------//
uint16_t RF_Transmit(uint16_t data)
{
 486:	ac 01       	movw	r20, r24
	uint16_t ret_val = 0;
	uint8_t i;

	RF_PORT &= ~(1<<CS);
 488:	2a 98       	cbi	0x05, 2	; 5
 48a:	90 e1       	ldi	r25, 0x10	; 16
}

//----------------------------TRANSMITION-------------------------------//
uint16_t RF_Transmit(uint16_t data)
{
	uint16_t ret_val = 0;
 48c:	20 e0       	ldi	r18, 0x00	; 0
 48e:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t i;

	RF_PORT &= ~(1<<CS);
	for (i=0; i<16; i++)
	{
		if (data & 0x8000) RF_PORT |= (1<<SDI);
 490:	55 23       	and	r21, r21
 492:	14 f4       	brge	.+4      	; 0x498 <RF_Transmit+0x12>
 494:	2b 9a       	sbi	0x05, 3	; 5
 496:	01 c0       	rjmp	.+2      	; 0x49a <RF_Transmit+0x14>
		else RF_PORT &= ~(1<<SDI);
 498:	2b 98       	cbi	0x05, 3	; 5

		ret_val <<= 1;
 49a:	22 0f       	add	r18, r18
 49c:	33 1f       	adc	r19, r19
		if (RF_PIN&(1<<SDO)) ret_val |= 1;
 49e:	1c 99       	sbic	0x03, 4	; 3
 4a0:	21 60       	ori	r18, 0x01	; 1
		RF_PORT |= (1<<SCK);
 4a2:	2d 9a       	sbi	0x05, 5	; 5
		data <<= 1;
 4a4:	44 0f       	add	r20, r20
 4a6:	55 1f       	adc	r21, r21
		asm("nop");
 4a8:	00 00       	nop
		asm("nop");
 4aa:	00 00       	nop
		RF_PORT &= ~(1<<SCK);
 4ac:	2d 98       	cbi	0x05, 5	; 5
 4ae:	91 50       	subi	r25, 0x01	; 1
{
	uint16_t ret_val = 0;
	uint8_t i;

	RF_PORT &= ~(1<<CS);
	for (i=0; i<16; i++)
 4b0:	79 f7       	brne	.-34     	; 0x490 <RF_Transmit+0xa>
		data <<= 1;
		asm("nop");
		asm("nop");
		RF_PORT &= ~(1<<SCK);
	}
	RF_PORT |= (1<<CS);
 4b2:	2a 9a       	sbi	0x05, 2	; 5

	RF_PORT |= (1<<CS);

	return response;
	*/
}
 4b4:	c9 01       	movw	r24, r18
 4b6:	08 95       	ret

000004b8 <UpdateChecksum>:
//--------------------CALCULATING CHECKSUM (CRC16)--------------------------//
uint16_t UpdateChecksum(uint16_t checksum, uint8_t data)
{
	uint16_t tmp = (data<<8);
 4b8:	70 e0       	ldi	r23, 0x00	; 0
 4ba:	76 2f       	mov	r23, r22
 4bc:	66 27       	eor	r22, r22
 4be:	28 e0       	ldi	r18, 0x08	; 8
 4c0:	30 e0       	ldi	r19, 0x00	; 0
	for(int i = 0; i < 8; i++)
	{
		if((checksum ^ tmp) & 0x8000)
 4c2:	ab 01       	movw	r20, r22
 4c4:	48 27       	eor	r20, r24
 4c6:	59 27       	eor	r21, r25
 4c8:	55 23       	and	r21, r21
 4ca:	3c f4       	brge	.+14     	; 0x4da <UpdateChecksum+0x22>
			checksum = (checksum<<1) ^ 0x1021;
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	41 e2       	ldi	r20, 0x21	; 33
 4d2:	84 27       	eor	r24, r20
 4d4:	40 e1       	ldi	r20, 0x10	; 16
 4d6:	94 27       	eor	r25, r20
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <UpdateChecksum+0x26>
		else
			checksum = (checksum<<1);
 4da:	88 0f       	add	r24, r24
 4dc:	99 1f       	adc	r25, r25
		tmp = tmp << 1;
 4de:	66 0f       	add	r22, r22
 4e0:	77 1f       	adc	r23, r23
 4e2:	21 50       	subi	r18, 0x01	; 1
 4e4:	31 09       	sbc	r19, r1
}
//--------------------CALCULATING CHECKSUM (CRC16)--------------------------//
uint16_t UpdateChecksum(uint16_t checksum, uint8_t data)
{
	uint16_t tmp = (data<<8);
	for(int i = 0; i < 8; i++)
 4e6:	69 f7       	brne	.-38     	; 0x4c2 <UpdateChecksum+0xa>
		else
			checksum = (checksum<<1);
		tmp = tmp << 1;
	}
	return checksum;
}
 4e8:	08 95       	ret

000004ea <RF_SetRange>:
//--------------------RANGE BAUDRATE AND FREQUENCY----------------------//
void RF_SetRange(enum RANGE range)
{
	RF_Transmit(0x80C7 | range); //ENABLE FIFO, SET RANGE
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	87 6c       	ori	r24, 0xC7	; 199
 4ee:	90 68       	ori	r25, 0x80	; 128
 4f0:	0e 94 43 02 	call	0x486	; 0x486 <RF_Transmit>
 4f4:	08 95       	ret

000004f6 <RF_SetBandwith>:
}
void RF_SetBandwith(uint8_t bandwidth, uint8_t gain, uint8_t drssi)
{
	RF_Transmit(0x9000 | ((bandwidth & 7) << 5) | ((gain & 3) << 3) | (drssi & 7));
 4f6:	47 70       	andi	r20, 0x07	; 7
 4f8:	50 e0       	ldi	r21, 0x00	; 0
 4fa:	50 69       	ori	r21, 0x90	; 144
 4fc:	63 70       	andi	r22, 0x03	; 3
 4fe:	70 e0       	ldi	r23, 0x00	; 0
 500:	66 0f       	add	r22, r22
 502:	77 1f       	adc	r23, r23
 504:	66 0f       	add	r22, r22
 506:	77 1f       	adc	r23, r23
 508:	66 0f       	add	r22, r22
 50a:	77 1f       	adc	r23, r23
 50c:	46 2b       	or	r20, r22
 50e:	57 2b       	or	r21, r23
 510:	20 e2       	ldi	r18, 0x20	; 32
 512:	82 9f       	mul	r24, r18
 514:	c0 01       	movw	r24, r0
 516:	11 24       	eor	r1, r1
 518:	99 27       	eor	r25, r25
 51a:	84 2b       	or	r24, r20
 51c:	95 2b       	or	r25, r21
 51e:	0e 94 43 02 	call	0x486	; 0x486 <RF_Transmit>
 522:	08 95       	ret

00000524 <RF_SetFrequency>:
}
void RF_SetFrequency(uint16_t frequency)
{
	if(frequency < 96)
 524:	80 36       	cpi	r24, 0x60	; 96
 526:	91 05       	cpc	r25, r1
 528:	38 f0       	brcs	.+14     	; 0x538 <RF_SetFrequency+0x14>
 52a:	80 34       	cpi	r24, 0x40	; 64
 52c:	2f e0       	ldi	r18, 0x0F	; 15
 52e:	92 07       	cpc	r25, r18
 530:	28 f0       	brcs	.+10     	; 0x53c <RF_SetFrequency+0x18>
 532:	8f e3       	ldi	r24, 0x3F	; 63
 534:	9f e0       	ldi	r25, 0x0F	; 15
 536:	02 c0       	rjmp	.+4      	; 0x53c <RF_SetFrequency+0x18>
		frequency = 96;
 538:	80 e6       	ldi	r24, 0x60	; 96
 53a:	90 e0       	ldi	r25, 0x00	; 0
	else if (frequency > 3903)
		frequency = 3903;
	RF_Transmit(0xA000 | frequency);
 53c:	90 6a       	ori	r25, 0xA0	; 160
 53e:	0e 94 43 02 	call	0x486	; 0x486 <RF_Transmit>
 542:	08 95       	ret

00000544 <RF_SetBaudRate>:
}
void RF_SetBaudRate(uint16_t baud)
{
	if(baud<663)
 544:	87 39       	cpi	r24, 0x97	; 151
 546:	22 e0       	ldi	r18, 0x02	; 2
 548:	92 07       	cpc	r25, r18
 54a:	08 f1       	brcs	.+66     	; 0x58e <RF_SetBaudRate+0x4a>
 54c:	9c 01       	movw	r18, r24
		return;
	if(baud<5400)
 54e:	28 31       	cpi	r18, 0x18	; 24
 550:	85 e1       	ldi	r24, 0x15	; 21
 552:	38 07       	cpc	r19, r24
 554:	78 f4       	brcc	.+30     	; 0x574 <RF_SetBaudRate+0x30>
		RF_Transmit(0xC680 | ((43104/baud)-1));
 556:	40 e0       	ldi	r20, 0x00	; 0
 558:	50 e0       	ldi	r21, 0x00	; 0
 55a:	60 e6       	ldi	r22, 0x60	; 96
 55c:	78 ea       	ldi	r23, 0xA8	; 168
 55e:	80 e0       	ldi	r24, 0x00	; 0
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	0e 94 ac 04 	call	0x958	; 0x958 <__divmodsi4>
 566:	c9 01       	movw	r24, r18
 568:	01 97       	sbiw	r24, 0x01	; 1
 56a:	80 68       	ori	r24, 0x80	; 128
 56c:	96 6c       	ori	r25, 0xC6	; 198
 56e:	0e 94 43 02 	call	0x486	; 0x486 <RF_Transmit>
 572:	08 95       	ret
	else
		RF_Transmit(0xC600 | ((344828UL/baud)-1));		
 574:	40 e0       	ldi	r20, 0x00	; 0
 576:	50 e0       	ldi	r21, 0x00	; 0
 578:	6c ef       	ldi	r22, 0xFC	; 252
 57a:	72 e4       	ldi	r23, 0x42	; 66
 57c:	85 e0       	ldi	r24, 0x05	; 5
 57e:	90 e0       	ldi	r25, 0x00	; 0
 580:	0e 94 8a 04 	call	0x914	; 0x914 <__udivmodsi4>
 584:	c9 01       	movw	r24, r18
 586:	01 97       	sbiw	r24, 0x01	; 1
 588:	96 6c       	ori	r25, 0xC6	; 198
 58a:	0e 94 43 02 	call	0x486	; 0x486 <RF_Transmit>
 58e:	08 95       	ret

00000590 <RF_DisableWakeUpTimer>:
}
//----------------------WAKE UP TIMER DISABLING-------------------------//
void RF_DisableWakeUpTimer(void)
{
	RF_Transmit(0xE000);
 590:	80 e0       	ldi	r24, 0x00	; 0
 592:	90 ee       	ldi	r25, 0xE0	; 224
 594:	0e 94 43 02 	call	0x486	; 0x486 <RF_Transmit>
 598:	08 95       	ret

0000059a <RF_SetPower>:
}
//---------------------------POWER SETTING------------------------------//
void RF_SetPower(uint8_t power, uint8_t mod)
{
	RF_Transmit(0x9800 | (power & 7) | ((mod & 15)<<4));
 59a:	87 70       	andi	r24, 0x07	; 7
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	98 69       	ori	r25, 0x98	; 152
 5a0:	20 e1       	ldi	r18, 0x10	; 16
 5a2:	62 9f       	mul	r22, r18
 5a4:	b0 01       	movw	r22, r0
 5a6:	11 24       	eor	r1, r1
 5a8:	77 27       	eor	r23, r23
 5aa:	86 2b       	or	r24, r22
 5ac:	97 2b       	or	r25, r23
 5ae:	0e 94 43 02 	call	0x486	; 0x486 <RF_Transmit>
 5b2:	08 95       	ret

000005b4 <__vector_1>:
uint8_t RF_Data[(RF_DataLength + 10)]; // +10 FOR THE REST OF THE FRAME

//----------------------------------------------------------------------//
//-------------------------------ISR------------------------------------//
ISR(INT0_vect)
{	
 5b4:	1f 92       	push	r1
 5b6:	0f 92       	push	r0
 5b8:	0f b6       	in	r0, 0x3f	; 63
 5ba:	0f 92       	push	r0
 5bc:	11 24       	eor	r1, r1
 5be:	2f 93       	push	r18
 5c0:	3f 93       	push	r19
 5c2:	4f 93       	push	r20
 5c4:	5f 93       	push	r21
 5c6:	6f 93       	push	r22
 5c8:	7f 93       	push	r23
 5ca:	8f 93       	push	r24
 5cc:	9f 93       	push	r25
 5ce:	af 93       	push	r26
 5d0:	bf 93       	push	r27
 5d2:	cf 93       	push	r28
 5d4:	ef 93       	push	r30
 5d6:	ff 93       	push	r31
	if(RF_status.Rx)
 5d8:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <RF_status>
 5dc:	80 ff       	sbrs	r24, 0
 5de:	3d c0       	rjmp	.+122    	; 0x65a <__vector_1+0xa6>
	{
		if(RF_Index < RF_DataLength)
 5e0:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <__data_end>
 5e4:	84 36       	cpi	r24, 0x64	; 100
 5e6:	d8 f4       	brcc	.+54     	; 0x61e <__vector_1+0x6a>
		{
			RF_Data[RF_Index++] = RF_Transmit(0xB000) & 0x00FF;
 5e8:	c0 91 c6 01 	lds	r28, 0x01C6	; 0x8001c6 <__data_end>
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	8c 0f       	add	r24, r28
 5f0:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <__data_end>
 5f4:	80 e0       	ldi	r24, 0x00	; 0
 5f6:	90 eb       	ldi	r25, 0xB0	; 176
 5f8:	0e 94 43 02 	call	0x486	; 0x486 <RF_Transmit>
 5fc:	ec 2f       	mov	r30, r28
 5fe:	f0 e0       	ldi	r31, 0x00	; 0
 600:	ec 5b       	subi	r30, 0xBC	; 188
 602:	fd 4f       	sbci	r31, 0xFD	; 253
 604:	80 83       	st	Z, r24
			RF_Transmit(0x8208);
			RF_status.Rx = 0;
			RF_status.New = 1; //FRAME NOT RIGHT
			return;
		}
		if(RF_Index >= (RF_Data[0] + 3))
 606:	20 91 c6 01 	lds	r18, 0x01C6	; 0x8001c6 <__data_end>
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	80 91 44 02 	lds	r24, 0x0244	; 0x800244 <RF_Data>
 610:	90 e0       	ldi	r25, 0x00	; 0
 612:	03 96       	adiw	r24, 0x03	; 3
 614:	28 17       	cp	r18, r24
 616:	39 07       	cpc	r19, r25
 618:	0c f4       	brge	.+2      	; 0x61c <__vector_1+0x68>
 61a:	40 c0       	rjmp	.+128    	; 0x69c <__vector_1+0xe8>
 61c:	0f c0       	rjmp	.+30     	; 0x63c <__vector_1+0x88>
		{
			RF_Data[RF_Index++] = RF_Transmit(0xB000) & 0x00FF;
		}
		else
		{
			RF_Transmit(0x8208);
 61e:	88 e0       	ldi	r24, 0x08	; 8
 620:	92 e8       	ldi	r25, 0x82	; 130
 622:	0e 94 43 02 	call	0x486	; 0x486 <RF_Transmit>
			RF_status.Rx = 0;
 626:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <RF_status>
 62a:	8e 7f       	andi	r24, 0xFE	; 254
 62c:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <RF_status>
			RF_status.New = 1; //FRAME NOT RIGHT
 630:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <RF_status>
 634:	84 60       	ori	r24, 0x04	; 4
 636:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <RF_status>
			return;
 63a:	30 c0       	rjmp	.+96     	; 0x69c <__vector_1+0xe8>
		}
		if(RF_Index >= (RF_Data[0] + 3))
		{
			RF_Transmit(0x8208);
 63c:	88 e0       	ldi	r24, 0x08	; 8
 63e:	92 e8       	ldi	r25, 0x82	; 130
 640:	0e 94 43 02 	call	0x486	; 0x486 <RF_Transmit>
			RF_status.Rx = 0;
 644:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <RF_status>
 648:	8e 7f       	andi	r24, 0xFE	; 254
 64a:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <RF_status>
			RF_status.New = 1; //FRAME IS RIGHT
 64e:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <RF_status>
 652:	84 60       	ori	r24, 0x04	; 4
 654:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <RF_status>
 658:	21 c0       	rjmp	.+66     	; 0x69c <__vector_1+0xe8>
		}
	}
	else if(RF_status.Tx)
 65a:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <RF_status>
 65e:	81 ff       	sbrs	r24, 1
 660:	1d c0       	rjmp	.+58     	; 0x69c <__vector_1+0xe8>
	{
		RF_Transmit(0xB800 | RF_Data[RF_Index]);
 662:	e0 91 c6 01 	lds	r30, 0x01C6	; 0x8001c6 <__data_end>
 666:	f0 e0       	ldi	r31, 0x00	; 0
 668:	ec 5b       	subi	r30, 0xBC	; 188
 66a:	fd 4f       	sbci	r31, 0xFD	; 253
 66c:	80 81       	ld	r24, Z
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	98 6b       	ori	r25, 0xB8	; 184
 672:	0e 94 43 02 	call	0x486	; 0x486 <RF_Transmit>
		if(!RF_Index)
 676:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <__data_end>
 67a:	81 11       	cpse	r24, r1
 67c:	0a c0       	rjmp	.+20     	; 0x692 <__vector_1+0xde>
		{
			RF_status.Tx = 0;
 67e:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <RF_status>
 682:	8d 7f       	andi	r24, 0xFD	; 253
 684:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <RF_status>
			RF_Transmit(0x8208); //TX OFF
 688:	88 e0       	ldi	r24, 0x08	; 8
 68a:	92 e8       	ldi	r25, 0x82	; 130
 68c:	0e 94 43 02 	call	0x486	; 0x486 <RF_Transmit>
 690:	05 c0       	rjmp	.+10     	; 0x69c <__vector_1+0xe8>
		}
		else
		{	
			RF_Index--;
 692:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <__data_end>
 696:	81 50       	subi	r24, 0x01	; 1
 698:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <__data_end>
		}
	}
}
 69c:	ff 91       	pop	r31
 69e:	ef 91       	pop	r30
 6a0:	cf 91       	pop	r28
 6a2:	bf 91       	pop	r27
 6a4:	af 91       	pop	r26
 6a6:	9f 91       	pop	r25
 6a8:	8f 91       	pop	r24
 6aa:	7f 91       	pop	r23
 6ac:	6f 91       	pop	r22
 6ae:	5f 91       	pop	r21
 6b0:	4f 91       	pop	r20
 6b2:	3f 91       	pop	r19
 6b4:	2f 91       	pop	r18
 6b6:	0f 90       	pop	r0
 6b8:	0f be       	out	0x3f, r0	; 63
 6ba:	0f 90       	pop	r0
 6bc:	1f 90       	pop	r1
 6be:	18 95       	reti

000006c0 <RF_RxStart>:
//-----------------------------DATA RECEIVE-----------------------------//
uint8_t RF_RxStart(void)
{
	if(RF_status.New)
 6c0:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <RF_status>
 6c4:	82 fd       	sbrc	r24, 2
 6c6:	1d c0       	rjmp	.+58     	; 0x702 <RF_RxStart+0x42>
		return 1;		//BUFFER NOT EMPTY YET
	if(RF_status.Tx)
 6c8:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <RF_status>
 6cc:	81 fd       	sbrc	r24, 1
 6ce:	1b c0       	rjmp	.+54     	; 0x706 <RF_RxStart+0x46>
		return 2;		//TRANSMITION IN PROGRESS
	if(RF_status.Rx)
 6d0:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <RF_status>
 6d4:	80 fd       	sbrc	r24, 0
 6d6:	19 c0       	rjmp	.+50     	; 0x70a <RF_RxStart+0x4a>
		return 3;		//RECEIVING IN PROGRESS

	RF_Transmit(0x82C8); //RX ON
 6d8:	88 ec       	ldi	r24, 0xC8	; 200
 6da:	92 e8       	ldi	r25, 0x82	; 130
 6dc:	0e 94 43 02 	call	0x486	; 0x486 <RF_Transmit>

	//FIFO RESET
	RF_Transmit(0xCA81);
 6e0:	81 e8       	ldi	r24, 0x81	; 129
 6e2:	9a ec       	ldi	r25, 0xCA	; 202
 6e4:	0e 94 43 02 	call	0x486	; 0x486 <RF_Transmit>
	RF_Transmit(0xCA83);
 6e8:	83 e8       	ldi	r24, 0x83	; 131
 6ea:	9a ec       	ldi	r25, 0xCA	; 202
 6ec:	0e 94 43 02 	call	0x486	; 0x486 <RF_Transmit>

	RF_Index = 0;
 6f0:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <__data_end>
	RF_status.Rx = 1;
 6f4:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <RF_status>
 6f8:	81 60       	ori	r24, 0x01	; 1
 6fa:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <RF_status>

	return 0;			//EVERYTING OK
 6fe:	80 e0       	ldi	r24, 0x00	; 0
 700:	08 95       	ret
}
//-----------------------------DATA RECEIVE-----------------------------//
uint8_t RF_RxStart(void)
{
	if(RF_status.New)
		return 1;		//BUFFER NOT EMPTY YET
 702:	81 e0       	ldi	r24, 0x01	; 1
 704:	08 95       	ret
	if(RF_status.Tx)
		return 2;		//TRANSMITION IN PROGRESS
 706:	82 e0       	ldi	r24, 0x02	; 2
 708:	08 95       	ret
	if(RF_status.Rx)
		return 3;		//RECEIVING IN PROGRESS
 70a:	83 e0       	ldi	r24, 0x03	; 3

	RF_Index = 0;
	RF_status.Rx = 1;

	return 0;			//EVERYTING OK
}
 70c:	08 95       	ret

0000070e <RF_RxFinish>:
 *	OR (ERRORS)
 *	255 - receiving in progress
 *	254 - previous frame was not read
*/
uint8_t RF_RxFinish(char* data)
{
 70e:	cf 92       	push	r12
 710:	df 92       	push	r13
 712:	ef 92       	push	r14
 714:	ff 92       	push	r15
 716:	0f 93       	push	r16
 718:	1f 93       	push	r17
 71a:	cf 93       	push	r28
 71c:	df 93       	push	r29
 71e:	ec 01       	movw	r28, r24
	uint16_t crc;
	uint16_t crc_checksum = 0;
	uint8_t size = RF_Data[0];
 720:	10 91 44 02 	lds	r17, 0x0244	; 0x800244 <RF_Data>

	if(RF_status.Rx)
 724:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <RF_status>
 728:	90 fd       	sbrc	r25, 0
 72a:	4d c0       	rjmp	.+154    	; 0x7c6 <RF_RxFinish+0xb8>
		return 255;
	if(!RF_status.New)
 72c:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <RF_status>
 730:	82 ff       	sbrs	r24, 2
 732:	4b c0       	rjmp	.+150    	; 0x7ca <RF_RxFinish+0xbc>
		return 254;

	if(size > RF_DataLength)
 734:	15 36       	cpi	r17, 0x65	; 101
 736:	58 f4       	brcc	.+22     	; 0x74e <RF_RxFinish+0x40>
		data[0] = 0;
		RF_status.New = 0;
		return 0; //FRAME SIZE NOT RIGHT
	}
	uint8_t i;
	for(i = 0; i < (size + 1); i++)
 738:	e1 2e       	mov	r14, r17
 73a:	f1 2c       	mov	r15, r1
 73c:	c7 01       	movw	r24, r14
 73e:	01 96       	adiw	r24, 0x01	; 1
 740:	6c 01       	movw	r12, r24
 742:	20 e0       	ldi	r18, 0x00	; 0
 744:	30 e0       	ldi	r19, 0x00	; 0
 746:	00 e0       	ldi	r16, 0x00	; 0
 748:	80 e0       	ldi	r24, 0x00	; 0
 74a:	90 e0       	ldi	r25, 0x00	; 0
 74c:	08 c0       	rjmp	.+16     	; 0x75e <RF_RxFinish+0x50>
	if(!RF_status.New)
		return 254;

	if(size > RF_DataLength)
	{
		data[0] = 0;
 74e:	18 82       	st	Y, r1
		RF_status.New = 0;
 750:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <RF_status>
 754:	8b 7f       	andi	r24, 0xFB	; 251
 756:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <RF_status>
		return 0; //FRAME SIZE NOT RIGHT
 75a:	80 e0       	ldi	r24, 0x00	; 0
 75c:	39 c0       	rjmp	.+114    	; 0x7d0 <RF_RxFinish+0xc2>
	}
	uint8_t i;
	for(i = 0; i < (size + 1); i++)
	{
		crc_checksum = UpdateChecksum(crc_checksum, RF_Data[i]);
 75e:	f9 01       	movw	r30, r18
 760:	ec 5b       	subi	r30, 0xBC	; 188
 762:	fd 4f       	sbci	r31, 0xFD	; 253
 764:	60 81       	ld	r22, Z
 766:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <UpdateChecksum>
		data[0] = 0;
		RF_status.New = 0;
		return 0; //FRAME SIZE NOT RIGHT
	}
	uint8_t i;
	for(i = 0; i < (size + 1); i++)
 76a:	0f 5f       	subi	r16, 0xFF	; 255
 76c:	20 2f       	mov	r18, r16
 76e:	30 e0       	ldi	r19, 0x00	; 0
 770:	2c 15       	cp	r18, r12
 772:	3d 05       	cpc	r19, r13
 774:	a4 f3       	brlt	.-24     	; 0x75e <RF_RxFinish+0x50>
	{
		crc_checksum = UpdateChecksum(crc_checksum, RF_Data[i]);
	}

	crc = RF_Data[i++];
 776:	f9 01       	movw	r30, r18
 778:	ec 5b       	subi	r30, 0xBC	; 188
 77a:	fd 4f       	sbci	r31, 0xFD	; 253
 77c:	20 81       	ld	r18, Z
 77e:	0f 5f       	subi	r16, 0xFF	; 255
	crc |= RF_Data[i] << 8;
 780:	e0 2f       	mov	r30, r16
 782:	f0 e0       	ldi	r31, 0x00	; 0
 784:	ec 5b       	subi	r30, 0xBC	; 188
 786:	fd 4f       	sbci	r31, 0xFD	; 253
 788:	40 81       	ld	r20, Z
 78a:	30 e0       	ldi	r19, 0x00	; 0
 78c:	34 2b       	or	r19, r20
	RF_status.New = 0;
 78e:	40 91 43 02 	lds	r20, 0x0243	; 0x800243 <RF_status>
 792:	4b 7f       	andi	r20, 0xFB	; 251
 794:	40 93 43 02 	sts	0x0243, r20	; 0x800243 <RF_status>
	
	if(crc != crc_checksum)
 798:	28 17       	cp	r18, r24
 79a:	39 07       	cpc	r19, r25
 79c:	c1 f4       	brne	.+48     	; 0x7ce <RF_RxFinish+0xc0>
		return 0; //DATA NOT RIGHT - DIFFERENT CHECKSUMS
	else
	{
		for(int i = 0; i < size; i++)
 79e:	1e 14       	cp	r1, r14
 7a0:	1f 04       	cpc	r1, r15
 7a2:	64 f4       	brge	.+24     	; 0x7bc <RF_RxFinish+0xae>
 7a4:	e5 e4       	ldi	r30, 0x45	; 69
 7a6:	f2 e0       	ldi	r31, 0x02	; 2
 7a8:	de 01       	movw	r26, r28
 7aa:	21 2f       	mov	r18, r17
 7ac:	30 e0       	ldi	r19, 0x00	; 0
 7ae:	2b 5b       	subi	r18, 0xBB	; 187
 7b0:	3d 4f       	sbci	r19, 0xFD	; 253
		{
			data[i] = RF_Data[i+1];
 7b2:	91 91       	ld	r25, Z+
 7b4:	9d 93       	st	X+, r25
	
	if(crc != crc_checksum)
		return 0; //DATA NOT RIGHT - DIFFERENT CHECKSUMS
	else
	{
		for(int i = 0; i < size; i++)
 7b6:	e2 17       	cp	r30, r18
 7b8:	f3 07       	cpc	r31, r19
 7ba:	d9 f7       	brne	.-10     	; 0x7b2 <RF_RxFinish+0xa4>
		{
			data[i] = RF_Data[i+1];
		}
		data[size] = 0; //ENDING FRAME WITH 0
 7bc:	c1 0f       	add	r28, r17
 7be:	d1 1d       	adc	r29, r1
 7c0:	18 82       	st	Y, r1
		return size; //SIZE OF RECEIVED FRAME IN BYTES
 7c2:	81 2f       	mov	r24, r17
 7c4:	05 c0       	rjmp	.+10     	; 0x7d0 <RF_RxFinish+0xc2>
	uint16_t crc;
	uint16_t crc_checksum = 0;
	uint8_t size = RF_Data[0];

	if(RF_status.Rx)
		return 255;
 7c6:	8f ef       	ldi	r24, 0xFF	; 255
 7c8:	03 c0       	rjmp	.+6      	; 0x7d0 <RF_RxFinish+0xc2>
	if(!RF_status.New)
		return 254;
 7ca:	8e ef       	ldi	r24, 0xFE	; 254
 7cc:	01 c0       	rjmp	.+2      	; 0x7d0 <RF_RxFinish+0xc2>
	crc = RF_Data[i++];
	crc |= RF_Data[i] << 8;
	RF_status.New = 0;
	
	if(crc != crc_checksum)
		return 0; //DATA NOT RIGHT - DIFFERENT CHECKSUMS
 7ce:	80 e0       	ldi	r24, 0x00	; 0
			data[i] = RF_Data[i+1];
		}
		data[size] = 0; //ENDING FRAME WITH 0
		return size; //SIZE OF RECEIVED FRAME IN BYTES
	}
}
 7d0:	df 91       	pop	r29
 7d2:	cf 91       	pop	r28
 7d4:	1f 91       	pop	r17
 7d6:	0f 91       	pop	r16
 7d8:	ff 90       	pop	r15
 7da:	ef 90       	pop	r14
 7dc:	df 90       	pop	r13
 7de:	cf 90       	pop	r12
 7e0:	08 95       	ret

000007e2 <UART_Initlialise>:
char UART_ReceiveChar(void)
{
	while(!(UCSR0A & (1<<RXC0))); //EMPTY LOOP - WAITING UNTILL DATA IS RECEIVED

	return UDR0;
}
 7e2:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 7e6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 7ea:	88 e9       	ldi	r24, 0x98	; 152
 7ec:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
 7f0:	86 e0       	ldi	r24, 0x06	; 6
 7f2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 7f6:	08 95       	ret

000007f8 <UART_SendChar>:
 7f8:	e0 ec       	ldi	r30, 0xC0	; 192
 7fa:	f0 e0       	ldi	r31, 0x00	; 0
 7fc:	90 81       	ld	r25, Z
 7fe:	95 ff       	sbrs	r25, 5
 800:	fd cf       	rjmp	.-6      	; 0x7fc <UART_SendChar+0x4>
 802:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 806:	08 95       	ret

00000808 <UART_SendString>:
 808:	cf 93       	push	r28
 80a:	df 93       	push	r29
 80c:	ec 01       	movw	r28, r24
 80e:	88 81       	ld	r24, Y
 810:	88 23       	and	r24, r24
 812:	31 f0       	breq	.+12     	; 0x820 <UART_SendString+0x18>
 814:	21 96       	adiw	r28, 0x01	; 1
 816:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <UART_SendChar>
 81a:	89 91       	ld	r24, Y+
 81c:	81 11       	cpse	r24, r1
 81e:	fb cf       	rjmp	.-10     	; 0x816 <UART_SendString+0xe>
 820:	df 91       	pop	r29
 822:	cf 91       	pop	r28
 824:	08 95       	ret

00000826 <__vector_18>:
ISR(USART_RX_vect)
{
 826:	1f 92       	push	r1
 828:	0f 92       	push	r0
 82a:	0f b6       	in	r0, 0x3f	; 63
 82c:	0f 92       	push	r0
 82e:	11 24       	eor	r1, r1
 830:	8f 93       	push	r24
 832:	ef 93       	push	r30
 834:	ff 93       	push	r31
	uint8_t receivedByte = UDR0;
 836:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	buffer[bufferIndex] = receivedByte;
 83a:	e0 91 c7 01 	lds	r30, 0x01C7	; 0x8001c7 <bufferIndex>
 83e:	f0 e0       	ldi	r31, 0x00	; 0
 840:	ee 54       	subi	r30, 0x4E	; 78
 842:	fd 4f       	sbci	r31, 0xFD	; 253
 844:	80 83       	st	Z, r24
	if(receivedByte == '\n')
 846:	8a 30       	cpi	r24, 0x0A	; 10
 848:	09 f0       	breq	.+2      	; 0x84c <__vector_18+0x26>
 84a:	49 c0       	rjmp	.+146    	; 0x8de <__vector_18+0xb8>
	{
		if(buffer[0] == 'O' && buffer[1] == 'K')
 84c:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <buffer>
 850:	8f 34       	cpi	r24, 0x4F	; 79
 852:	51 f4       	brne	.+20     	; 0x868 <__vector_18+0x42>
 854:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <buffer+0x1>
 858:	8b 34       	cpi	r24, 0x4B	; 75
 85a:	31 f4       	brne	.+12     	; 0x868 <__vector_18+0x42>
		{
			ESP_Response.OK = 1;
 85c:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
 860:	81 60       	ori	r24, 0x01	; 1
 862:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ESP_Response>
 866:	38 c0       	rjmp	.+112    	; 0x8d8 <__vector_18+0xb2>
		}
		else if(buffer[0] == 'E' && buffer[1] == 'R' && buffer[4] == 'R')
 868:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <buffer>
 86c:	85 34       	cpi	r24, 0x45	; 69
 86e:	71 f4       	brne	.+28     	; 0x88c <__vector_18+0x66>
 870:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <buffer+0x1>
 874:	82 35       	cpi	r24, 0x52	; 82
 876:	51 f4       	brne	.+20     	; 0x88c <__vector_18+0x66>
 878:	80 91 b6 02 	lds	r24, 0x02B6	; 0x8002b6 <buffer+0x4>
 87c:	82 35       	cpi	r24, 0x52	; 82
 87e:	31 f4       	brne	.+12     	; 0x88c <__vector_18+0x66>
		{
			ESP_Response.ERROR = 1;
 880:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
 884:	82 60       	ori	r24, 0x02	; 2
 886:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ESP_Response>
 88a:	26 c0       	rjmp	.+76     	; 0x8d8 <__vector_18+0xb2>
		}
		else if(buffer[1] == ',' && buffer[3] == 'O')
 88c:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <buffer+0x1>
 890:	8c 32       	cpi	r24, 0x2C	; 44
 892:	51 f4       	brne	.+20     	; 0x8a8 <__vector_18+0x82>
 894:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <buffer+0x3>
 898:	8f 34       	cpi	r24, 0x4F	; 79
 89a:	31 f4       	brne	.+12     	; 0x8a8 <__vector_18+0x82>
		{
			ESP_Connections++;
 89c:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <ESP_Connections>
 8a0:	8f 5f       	subi	r24, 0xFF	; 255
 8a2:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <ESP_Connections>
 8a6:	18 c0       	rjmp	.+48     	; 0x8d8 <__vector_18+0xb2>
		}
		else if(buffer[1] == ',' && buffer[3] == 'L')
 8a8:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <buffer+0x1>
 8ac:	8c 32       	cpi	r24, 0x2C	; 44
 8ae:	51 f4       	brne	.+20     	; 0x8c4 <__vector_18+0x9e>
 8b0:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <buffer+0x3>
 8b4:	8c 34       	cpi	r24, 0x4C	; 76
 8b6:	31 f4       	brne	.+12     	; 0x8c4 <__vector_18+0x9e>
		{
			ESP_Connections--;
 8b8:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <ESP_Connections>
 8bc:	81 50       	subi	r24, 0x01	; 1
 8be:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <ESP_Connections>
 8c2:	0a c0       	rjmp	.+20     	; 0x8d8 <__vector_18+0xb2>
		}
		else if(buffer[0] == 'S' && buffer[5] == 'O')
 8c4:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <buffer>
 8c8:	83 35       	cpi	r24, 0x53	; 83
 8ca:	31 f4       	brne	.+12     	; 0x8d8 <__vector_18+0xb2>
 8cc:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <buffer+0x5>
 8d0:	8f 34       	cpi	r24, 0x4F	; 79
 8d2:	11 f4       	brne	.+4      	; 0x8d8 <__vector_18+0xb2>
			ESP_Response.OK;
 8d4:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
		bufferIndex = 0;
 8d8:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <bufferIndex>
 8dc:	13 c0       	rjmp	.+38     	; 0x904 <__stack+0x5>
	}
	else if(receivedByte == ' ')
 8de:	80 32       	cpi	r24, 0x20	; 32
 8e0:	61 f4       	brne	.+24     	; 0x8fa <__vector_18+0xd4>
	{
		if(buffer[0] == '>')
 8e2:	80 91 b2 02 	lds	r24, 0x02B2	; 0x8002b2 <buffer>
 8e6:	8e 33       	cpi	r24, 0x3E	; 62
 8e8:	69 f4       	brne	.+26     	; 0x904 <__stack+0x5>
		{
			ESP_Response.INPUT = 1;
 8ea:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <ESP_Response>
 8ee:	84 60       	ori	r24, 0x04	; 4
 8f0:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <ESP_Response>
			bufferIndex = 0;
 8f4:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <bufferIndex>
 8f8:	05 c0       	rjmp	.+10     	; 0x904 <__stack+0x5>
		}	
	}
	else
	{
		bufferIndex++;
 8fa:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <bufferIndex>
 8fe:	8f 5f       	subi	r24, 0xFF	; 255
 900:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <bufferIndex>
	}
 904:	ff 91       	pop	r31
 906:	ef 91       	pop	r30
 908:	8f 91       	pop	r24
 90a:	0f 90       	pop	r0
 90c:	0f be       	out	0x3f, r0	; 63
 90e:	0f 90       	pop	r0
 910:	1f 90       	pop	r1
 912:	18 95       	reti

00000914 <__udivmodsi4>:
 914:	a1 e2       	ldi	r26, 0x21	; 33
 916:	1a 2e       	mov	r1, r26
 918:	aa 1b       	sub	r26, r26
 91a:	bb 1b       	sub	r27, r27
 91c:	fd 01       	movw	r30, r26
 91e:	0d c0       	rjmp	.+26     	; 0x93a <__udivmodsi4_ep>

00000920 <__udivmodsi4_loop>:
 920:	aa 1f       	adc	r26, r26
 922:	bb 1f       	adc	r27, r27
 924:	ee 1f       	adc	r30, r30
 926:	ff 1f       	adc	r31, r31
 928:	a2 17       	cp	r26, r18
 92a:	b3 07       	cpc	r27, r19
 92c:	e4 07       	cpc	r30, r20
 92e:	f5 07       	cpc	r31, r21
 930:	20 f0       	brcs	.+8      	; 0x93a <__udivmodsi4_ep>
 932:	a2 1b       	sub	r26, r18
 934:	b3 0b       	sbc	r27, r19
 936:	e4 0b       	sbc	r30, r20
 938:	f5 0b       	sbc	r31, r21

0000093a <__udivmodsi4_ep>:
 93a:	66 1f       	adc	r22, r22
 93c:	77 1f       	adc	r23, r23
 93e:	88 1f       	adc	r24, r24
 940:	99 1f       	adc	r25, r25
 942:	1a 94       	dec	r1
 944:	69 f7       	brne	.-38     	; 0x920 <__udivmodsi4_loop>
 946:	60 95       	com	r22
 948:	70 95       	com	r23
 94a:	80 95       	com	r24
 94c:	90 95       	com	r25
 94e:	9b 01       	movw	r18, r22
 950:	ac 01       	movw	r20, r24
 952:	bd 01       	movw	r22, r26
 954:	cf 01       	movw	r24, r30
 956:	08 95       	ret

00000958 <__divmodsi4>:
 958:	05 2e       	mov	r0, r21
 95a:	97 fb       	bst	r25, 7
 95c:	1e f4       	brtc	.+6      	; 0x964 <__divmodsi4+0xc>
 95e:	00 94       	com	r0
 960:	0e 94 c3 04 	call	0x986	; 0x986 <__negsi2>
 964:	57 fd       	sbrc	r21, 7
 966:	07 d0       	rcall	.+14     	; 0x976 <__divmodsi4_neg2>
 968:	0e 94 8a 04 	call	0x914	; 0x914 <__udivmodsi4>
 96c:	07 fc       	sbrc	r0, 7
 96e:	03 d0       	rcall	.+6      	; 0x976 <__divmodsi4_neg2>
 970:	4e f4       	brtc	.+18     	; 0x984 <__divmodsi4_exit>
 972:	0c 94 c3 04 	jmp	0x986	; 0x986 <__negsi2>

00000976 <__divmodsi4_neg2>:
 976:	50 95       	com	r21
 978:	40 95       	com	r20
 97a:	30 95       	com	r19
 97c:	21 95       	neg	r18
 97e:	3f 4f       	sbci	r19, 0xFF	; 255
 980:	4f 4f       	sbci	r20, 0xFF	; 255
 982:	5f 4f       	sbci	r21, 0xFF	; 255

00000984 <__divmodsi4_exit>:
 984:	08 95       	ret

00000986 <__negsi2>:
 986:	90 95       	com	r25
 988:	80 95       	com	r24
 98a:	70 95       	com	r23
 98c:	61 95       	neg	r22
 98e:	7f 4f       	sbci	r23, 0xFF	; 255
 990:	8f 4f       	sbci	r24, 0xFF	; 255
 992:	9f 4f       	sbci	r25, 0xFF	; 255
 994:	08 95       	ret

00000996 <sprintf>:
 996:	ae e0       	ldi	r26, 0x0E	; 14
 998:	b0 e0       	ldi	r27, 0x00	; 0
 99a:	e1 ed       	ldi	r30, 0xD1	; 209
 99c:	f4 e0       	ldi	r31, 0x04	; 4
 99e:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <__prologue_saves__+0x1c>
 9a2:	0d 89       	ldd	r16, Y+21	; 0x15
 9a4:	1e 89       	ldd	r17, Y+22	; 0x16
 9a6:	86 e0       	ldi	r24, 0x06	; 6
 9a8:	8c 83       	std	Y+4, r24	; 0x04
 9aa:	1a 83       	std	Y+2, r17	; 0x02
 9ac:	09 83       	std	Y+1, r16	; 0x01
 9ae:	8f ef       	ldi	r24, 0xFF	; 255
 9b0:	9f e7       	ldi	r25, 0x7F	; 127
 9b2:	9e 83       	std	Y+6, r25	; 0x06
 9b4:	8d 83       	std	Y+5, r24	; 0x05
 9b6:	ae 01       	movw	r20, r28
 9b8:	47 5e       	subi	r20, 0xE7	; 231
 9ba:	5f 4f       	sbci	r21, 0xFF	; 255
 9bc:	6f 89       	ldd	r22, Y+23	; 0x17
 9be:	78 8d       	ldd	r23, Y+24	; 0x18
 9c0:	ce 01       	movw	r24, r28
 9c2:	01 96       	adiw	r24, 0x01	; 1
 9c4:	0e 94 ee 04 	call	0x9dc	; 0x9dc <vfprintf>
 9c8:	2f 81       	ldd	r18, Y+7	; 0x07
 9ca:	38 85       	ldd	r19, Y+8	; 0x08
 9cc:	f8 01       	movw	r30, r16
 9ce:	e2 0f       	add	r30, r18
 9d0:	f3 1f       	adc	r31, r19
 9d2:	10 82       	st	Z, r1
 9d4:	2e 96       	adiw	r28, 0x0e	; 14
 9d6:	e4 e0       	ldi	r30, 0x04	; 4
 9d8:	0c 94 96 07 	jmp	0xf2c	; 0xf2c <__epilogue_restores__+0x1c>

000009dc <vfprintf>:
 9dc:	ac e0       	ldi	r26, 0x0C	; 12
 9de:	b0 e0       	ldi	r27, 0x00	; 0
 9e0:	e4 ef       	ldi	r30, 0xF4	; 244
 9e2:	f4 e0       	ldi	r31, 0x04	; 4
 9e4:	0c 94 6c 07 	jmp	0xed8	; 0xed8 <__prologue_saves__>
 9e8:	7c 01       	movw	r14, r24
 9ea:	6b 01       	movw	r12, r22
 9ec:	8a 01       	movw	r16, r20
 9ee:	fc 01       	movw	r30, r24
 9f0:	17 82       	std	Z+7, r1	; 0x07
 9f2:	16 82       	std	Z+6, r1	; 0x06
 9f4:	83 81       	ldd	r24, Z+3	; 0x03
 9f6:	81 ff       	sbrs	r24, 1
 9f8:	bd c1       	rjmp	.+890    	; 0xd74 <vfprintf+0x398>
 9fa:	ce 01       	movw	r24, r28
 9fc:	01 96       	adiw	r24, 0x01	; 1
 9fe:	4c 01       	movw	r8, r24
 a00:	f7 01       	movw	r30, r14
 a02:	93 81       	ldd	r25, Z+3	; 0x03
 a04:	f6 01       	movw	r30, r12
 a06:	93 fd       	sbrc	r25, 3
 a08:	85 91       	lpm	r24, Z+
 a0a:	93 ff       	sbrs	r25, 3
 a0c:	81 91       	ld	r24, Z+
 a0e:	6f 01       	movw	r12, r30
 a10:	88 23       	and	r24, r24
 a12:	09 f4       	brne	.+2      	; 0xa16 <vfprintf+0x3a>
 a14:	ab c1       	rjmp	.+854    	; 0xd6c <vfprintf+0x390>
 a16:	85 32       	cpi	r24, 0x25	; 37
 a18:	39 f4       	brne	.+14     	; 0xa28 <vfprintf+0x4c>
 a1a:	93 fd       	sbrc	r25, 3
 a1c:	85 91       	lpm	r24, Z+
 a1e:	93 ff       	sbrs	r25, 3
 a20:	81 91       	ld	r24, Z+
 a22:	6f 01       	movw	r12, r30
 a24:	85 32       	cpi	r24, 0x25	; 37
 a26:	29 f4       	brne	.+10     	; 0xa32 <vfprintf+0x56>
 a28:	b7 01       	movw	r22, r14
 a2a:	90 e0       	ldi	r25, 0x00	; 0
 a2c:	0e 94 d6 06 	call	0xdac	; 0xdac <fputc>
 a30:	e7 cf       	rjmp	.-50     	; 0xa00 <vfprintf+0x24>
 a32:	51 2c       	mov	r5, r1
 a34:	31 2c       	mov	r3, r1
 a36:	20 e0       	ldi	r18, 0x00	; 0
 a38:	20 32       	cpi	r18, 0x20	; 32
 a3a:	a0 f4       	brcc	.+40     	; 0xa64 <vfprintf+0x88>
 a3c:	8b 32       	cpi	r24, 0x2B	; 43
 a3e:	69 f0       	breq	.+26     	; 0xa5a <vfprintf+0x7e>
 a40:	30 f4       	brcc	.+12     	; 0xa4e <vfprintf+0x72>
 a42:	80 32       	cpi	r24, 0x20	; 32
 a44:	59 f0       	breq	.+22     	; 0xa5c <vfprintf+0x80>
 a46:	83 32       	cpi	r24, 0x23	; 35
 a48:	69 f4       	brne	.+26     	; 0xa64 <vfprintf+0x88>
 a4a:	20 61       	ori	r18, 0x10	; 16
 a4c:	2c c0       	rjmp	.+88     	; 0xaa6 <vfprintf+0xca>
 a4e:	8d 32       	cpi	r24, 0x2D	; 45
 a50:	39 f0       	breq	.+14     	; 0xa60 <vfprintf+0x84>
 a52:	80 33       	cpi	r24, 0x30	; 48
 a54:	39 f4       	brne	.+14     	; 0xa64 <vfprintf+0x88>
 a56:	21 60       	ori	r18, 0x01	; 1
 a58:	26 c0       	rjmp	.+76     	; 0xaa6 <vfprintf+0xca>
 a5a:	22 60       	ori	r18, 0x02	; 2
 a5c:	24 60       	ori	r18, 0x04	; 4
 a5e:	23 c0       	rjmp	.+70     	; 0xaa6 <vfprintf+0xca>
 a60:	28 60       	ori	r18, 0x08	; 8
 a62:	21 c0       	rjmp	.+66     	; 0xaa6 <vfprintf+0xca>
 a64:	27 fd       	sbrc	r18, 7
 a66:	27 c0       	rjmp	.+78     	; 0xab6 <vfprintf+0xda>
 a68:	30 ed       	ldi	r19, 0xD0	; 208
 a6a:	38 0f       	add	r19, r24
 a6c:	3a 30       	cpi	r19, 0x0A	; 10
 a6e:	78 f4       	brcc	.+30     	; 0xa8e <vfprintf+0xb2>
 a70:	26 ff       	sbrs	r18, 6
 a72:	06 c0       	rjmp	.+12     	; 0xa80 <vfprintf+0xa4>
 a74:	fa e0       	ldi	r31, 0x0A	; 10
 a76:	5f 9e       	mul	r5, r31
 a78:	30 0d       	add	r19, r0
 a7a:	11 24       	eor	r1, r1
 a7c:	53 2e       	mov	r5, r19
 a7e:	13 c0       	rjmp	.+38     	; 0xaa6 <vfprintf+0xca>
 a80:	8a e0       	ldi	r24, 0x0A	; 10
 a82:	38 9e       	mul	r3, r24
 a84:	30 0d       	add	r19, r0
 a86:	11 24       	eor	r1, r1
 a88:	33 2e       	mov	r3, r19
 a8a:	20 62       	ori	r18, 0x20	; 32
 a8c:	0c c0       	rjmp	.+24     	; 0xaa6 <vfprintf+0xca>
 a8e:	8e 32       	cpi	r24, 0x2E	; 46
 a90:	21 f4       	brne	.+8      	; 0xa9a <vfprintf+0xbe>
 a92:	26 fd       	sbrc	r18, 6
 a94:	6b c1       	rjmp	.+726    	; 0xd6c <vfprintf+0x390>
 a96:	20 64       	ori	r18, 0x40	; 64
 a98:	06 c0       	rjmp	.+12     	; 0xaa6 <vfprintf+0xca>
 a9a:	8c 36       	cpi	r24, 0x6C	; 108
 a9c:	11 f4       	brne	.+4      	; 0xaa2 <vfprintf+0xc6>
 a9e:	20 68       	ori	r18, 0x80	; 128
 aa0:	02 c0       	rjmp	.+4      	; 0xaa6 <vfprintf+0xca>
 aa2:	88 36       	cpi	r24, 0x68	; 104
 aa4:	41 f4       	brne	.+16     	; 0xab6 <vfprintf+0xda>
 aa6:	f6 01       	movw	r30, r12
 aa8:	93 fd       	sbrc	r25, 3
 aaa:	85 91       	lpm	r24, Z+
 aac:	93 ff       	sbrs	r25, 3
 aae:	81 91       	ld	r24, Z+
 ab0:	6f 01       	movw	r12, r30
 ab2:	81 11       	cpse	r24, r1
 ab4:	c1 cf       	rjmp	.-126    	; 0xa38 <vfprintf+0x5c>
 ab6:	98 2f       	mov	r25, r24
 ab8:	9f 7d       	andi	r25, 0xDF	; 223
 aba:	95 54       	subi	r25, 0x45	; 69
 abc:	93 30       	cpi	r25, 0x03	; 3
 abe:	28 f4       	brcc	.+10     	; 0xaca <vfprintf+0xee>
 ac0:	0c 5f       	subi	r16, 0xFC	; 252
 ac2:	1f 4f       	sbci	r17, 0xFF	; 255
 ac4:	ff e3       	ldi	r31, 0x3F	; 63
 ac6:	f9 83       	std	Y+1, r31	; 0x01
 ac8:	0d c0       	rjmp	.+26     	; 0xae4 <vfprintf+0x108>
 aca:	83 36       	cpi	r24, 0x63	; 99
 acc:	31 f0       	breq	.+12     	; 0xada <vfprintf+0xfe>
 ace:	83 37       	cpi	r24, 0x73	; 115
 ad0:	71 f0       	breq	.+28     	; 0xaee <vfprintf+0x112>
 ad2:	83 35       	cpi	r24, 0x53	; 83
 ad4:	09 f0       	breq	.+2      	; 0xad8 <vfprintf+0xfc>
 ad6:	5b c0       	rjmp	.+182    	; 0xb8e <vfprintf+0x1b2>
 ad8:	22 c0       	rjmp	.+68     	; 0xb1e <vfprintf+0x142>
 ada:	f8 01       	movw	r30, r16
 adc:	80 81       	ld	r24, Z
 ade:	89 83       	std	Y+1, r24	; 0x01
 ae0:	0e 5f       	subi	r16, 0xFE	; 254
 ae2:	1f 4f       	sbci	r17, 0xFF	; 255
 ae4:	44 24       	eor	r4, r4
 ae6:	43 94       	inc	r4
 ae8:	51 2c       	mov	r5, r1
 aea:	54 01       	movw	r10, r8
 aec:	15 c0       	rjmp	.+42     	; 0xb18 <vfprintf+0x13c>
 aee:	38 01       	movw	r6, r16
 af0:	f2 e0       	ldi	r31, 0x02	; 2
 af2:	6f 0e       	add	r6, r31
 af4:	71 1c       	adc	r7, r1
 af6:	f8 01       	movw	r30, r16
 af8:	a0 80       	ld	r10, Z
 afa:	b1 80       	ldd	r11, Z+1	; 0x01
 afc:	26 ff       	sbrs	r18, 6
 afe:	03 c0       	rjmp	.+6      	; 0xb06 <vfprintf+0x12a>
 b00:	65 2d       	mov	r22, r5
 b02:	70 e0       	ldi	r23, 0x00	; 0
 b04:	02 c0       	rjmp	.+4      	; 0xb0a <vfprintf+0x12e>
 b06:	6f ef       	ldi	r22, 0xFF	; 255
 b08:	7f ef       	ldi	r23, 0xFF	; 255
 b0a:	c5 01       	movw	r24, r10
 b0c:	2c 87       	std	Y+12, r18	; 0x0c
 b0e:	0e 94 cb 06 	call	0xd96	; 0xd96 <strnlen>
 b12:	2c 01       	movw	r4, r24
 b14:	83 01       	movw	r16, r6
 b16:	2c 85       	ldd	r18, Y+12	; 0x0c
 b18:	2f 77       	andi	r18, 0x7F	; 127
 b1a:	22 2e       	mov	r2, r18
 b1c:	17 c0       	rjmp	.+46     	; 0xb4c <vfprintf+0x170>
 b1e:	38 01       	movw	r6, r16
 b20:	f2 e0       	ldi	r31, 0x02	; 2
 b22:	6f 0e       	add	r6, r31
 b24:	71 1c       	adc	r7, r1
 b26:	f8 01       	movw	r30, r16
 b28:	a0 80       	ld	r10, Z
 b2a:	b1 80       	ldd	r11, Z+1	; 0x01
 b2c:	26 ff       	sbrs	r18, 6
 b2e:	03 c0       	rjmp	.+6      	; 0xb36 <vfprintf+0x15a>
 b30:	65 2d       	mov	r22, r5
 b32:	70 e0       	ldi	r23, 0x00	; 0
 b34:	02 c0       	rjmp	.+4      	; 0xb3a <vfprintf+0x15e>
 b36:	6f ef       	ldi	r22, 0xFF	; 255
 b38:	7f ef       	ldi	r23, 0xFF	; 255
 b3a:	c5 01       	movw	r24, r10
 b3c:	2c 87       	std	Y+12, r18	; 0x0c
 b3e:	0e 94 c0 06 	call	0xd80	; 0xd80 <strnlen_P>
 b42:	2c 01       	movw	r4, r24
 b44:	2c 85       	ldd	r18, Y+12	; 0x0c
 b46:	20 68       	ori	r18, 0x80	; 128
 b48:	22 2e       	mov	r2, r18
 b4a:	83 01       	movw	r16, r6
 b4c:	23 fc       	sbrc	r2, 3
 b4e:	1b c0       	rjmp	.+54     	; 0xb86 <vfprintf+0x1aa>
 b50:	83 2d       	mov	r24, r3
 b52:	90 e0       	ldi	r25, 0x00	; 0
 b54:	48 16       	cp	r4, r24
 b56:	59 06       	cpc	r5, r25
 b58:	b0 f4       	brcc	.+44     	; 0xb86 <vfprintf+0x1aa>
 b5a:	b7 01       	movw	r22, r14
 b5c:	80 e2       	ldi	r24, 0x20	; 32
 b5e:	90 e0       	ldi	r25, 0x00	; 0
 b60:	0e 94 d6 06 	call	0xdac	; 0xdac <fputc>
 b64:	3a 94       	dec	r3
 b66:	f4 cf       	rjmp	.-24     	; 0xb50 <vfprintf+0x174>
 b68:	f5 01       	movw	r30, r10
 b6a:	27 fc       	sbrc	r2, 7
 b6c:	85 91       	lpm	r24, Z+
 b6e:	27 fe       	sbrs	r2, 7
 b70:	81 91       	ld	r24, Z+
 b72:	5f 01       	movw	r10, r30
 b74:	b7 01       	movw	r22, r14
 b76:	90 e0       	ldi	r25, 0x00	; 0
 b78:	0e 94 d6 06 	call	0xdac	; 0xdac <fputc>
 b7c:	31 10       	cpse	r3, r1
 b7e:	3a 94       	dec	r3
 b80:	f1 e0       	ldi	r31, 0x01	; 1
 b82:	4f 1a       	sub	r4, r31
 b84:	51 08       	sbc	r5, r1
 b86:	41 14       	cp	r4, r1
 b88:	51 04       	cpc	r5, r1
 b8a:	71 f7       	brne	.-36     	; 0xb68 <vfprintf+0x18c>
 b8c:	e5 c0       	rjmp	.+458    	; 0xd58 <vfprintf+0x37c>
 b8e:	84 36       	cpi	r24, 0x64	; 100
 b90:	11 f0       	breq	.+4      	; 0xb96 <vfprintf+0x1ba>
 b92:	89 36       	cpi	r24, 0x69	; 105
 b94:	39 f5       	brne	.+78     	; 0xbe4 <vfprintf+0x208>
 b96:	f8 01       	movw	r30, r16
 b98:	27 ff       	sbrs	r18, 7
 b9a:	07 c0       	rjmp	.+14     	; 0xbaa <vfprintf+0x1ce>
 b9c:	60 81       	ld	r22, Z
 b9e:	71 81       	ldd	r23, Z+1	; 0x01
 ba0:	82 81       	ldd	r24, Z+2	; 0x02
 ba2:	93 81       	ldd	r25, Z+3	; 0x03
 ba4:	0c 5f       	subi	r16, 0xFC	; 252
 ba6:	1f 4f       	sbci	r17, 0xFF	; 255
 ba8:	08 c0       	rjmp	.+16     	; 0xbba <vfprintf+0x1de>
 baa:	60 81       	ld	r22, Z
 bac:	71 81       	ldd	r23, Z+1	; 0x01
 bae:	07 2e       	mov	r0, r23
 bb0:	00 0c       	add	r0, r0
 bb2:	88 0b       	sbc	r24, r24
 bb4:	99 0b       	sbc	r25, r25
 bb6:	0e 5f       	subi	r16, 0xFE	; 254
 bb8:	1f 4f       	sbci	r17, 0xFF	; 255
 bba:	2f 76       	andi	r18, 0x6F	; 111
 bbc:	72 2e       	mov	r7, r18
 bbe:	97 ff       	sbrs	r25, 7
 bc0:	09 c0       	rjmp	.+18     	; 0xbd4 <vfprintf+0x1f8>
 bc2:	90 95       	com	r25
 bc4:	80 95       	com	r24
 bc6:	70 95       	com	r23
 bc8:	61 95       	neg	r22
 bca:	7f 4f       	sbci	r23, 0xFF	; 255
 bcc:	8f 4f       	sbci	r24, 0xFF	; 255
 bce:	9f 4f       	sbci	r25, 0xFF	; 255
 bd0:	20 68       	ori	r18, 0x80	; 128
 bd2:	72 2e       	mov	r7, r18
 bd4:	2a e0       	ldi	r18, 0x0A	; 10
 bd6:	30 e0       	ldi	r19, 0x00	; 0
 bd8:	a4 01       	movw	r20, r8
 bda:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__ultoa_invert>
 bde:	a8 2e       	mov	r10, r24
 be0:	a8 18       	sub	r10, r8
 be2:	44 c0       	rjmp	.+136    	; 0xc6c <vfprintf+0x290>
 be4:	85 37       	cpi	r24, 0x75	; 117
 be6:	29 f4       	brne	.+10     	; 0xbf2 <vfprintf+0x216>
 be8:	2f 7e       	andi	r18, 0xEF	; 239
 bea:	b2 2e       	mov	r11, r18
 bec:	2a e0       	ldi	r18, 0x0A	; 10
 bee:	30 e0       	ldi	r19, 0x00	; 0
 bf0:	25 c0       	rjmp	.+74     	; 0xc3c <vfprintf+0x260>
 bf2:	f2 2f       	mov	r31, r18
 bf4:	f9 7f       	andi	r31, 0xF9	; 249
 bf6:	bf 2e       	mov	r11, r31
 bf8:	8f 36       	cpi	r24, 0x6F	; 111
 bfa:	c1 f0       	breq	.+48     	; 0xc2c <vfprintf+0x250>
 bfc:	18 f4       	brcc	.+6      	; 0xc04 <vfprintf+0x228>
 bfe:	88 35       	cpi	r24, 0x58	; 88
 c00:	79 f0       	breq	.+30     	; 0xc20 <vfprintf+0x244>
 c02:	b4 c0       	rjmp	.+360    	; 0xd6c <vfprintf+0x390>
 c04:	80 37       	cpi	r24, 0x70	; 112
 c06:	19 f0       	breq	.+6      	; 0xc0e <vfprintf+0x232>
 c08:	88 37       	cpi	r24, 0x78	; 120
 c0a:	21 f0       	breq	.+8      	; 0xc14 <vfprintf+0x238>
 c0c:	af c0       	rjmp	.+350    	; 0xd6c <vfprintf+0x390>
 c0e:	2f 2f       	mov	r18, r31
 c10:	20 61       	ori	r18, 0x10	; 16
 c12:	b2 2e       	mov	r11, r18
 c14:	b4 fe       	sbrs	r11, 4
 c16:	0d c0       	rjmp	.+26     	; 0xc32 <vfprintf+0x256>
 c18:	8b 2d       	mov	r24, r11
 c1a:	84 60       	ori	r24, 0x04	; 4
 c1c:	b8 2e       	mov	r11, r24
 c1e:	09 c0       	rjmp	.+18     	; 0xc32 <vfprintf+0x256>
 c20:	24 ff       	sbrs	r18, 4
 c22:	0a c0       	rjmp	.+20     	; 0xc38 <vfprintf+0x25c>
 c24:	9f 2f       	mov	r25, r31
 c26:	96 60       	ori	r25, 0x06	; 6
 c28:	b9 2e       	mov	r11, r25
 c2a:	06 c0       	rjmp	.+12     	; 0xc38 <vfprintf+0x25c>
 c2c:	28 e0       	ldi	r18, 0x08	; 8
 c2e:	30 e0       	ldi	r19, 0x00	; 0
 c30:	05 c0       	rjmp	.+10     	; 0xc3c <vfprintf+0x260>
 c32:	20 e1       	ldi	r18, 0x10	; 16
 c34:	30 e0       	ldi	r19, 0x00	; 0
 c36:	02 c0       	rjmp	.+4      	; 0xc3c <vfprintf+0x260>
 c38:	20 e1       	ldi	r18, 0x10	; 16
 c3a:	32 e0       	ldi	r19, 0x02	; 2
 c3c:	f8 01       	movw	r30, r16
 c3e:	b7 fe       	sbrs	r11, 7
 c40:	07 c0       	rjmp	.+14     	; 0xc50 <vfprintf+0x274>
 c42:	60 81       	ld	r22, Z
 c44:	71 81       	ldd	r23, Z+1	; 0x01
 c46:	82 81       	ldd	r24, Z+2	; 0x02
 c48:	93 81       	ldd	r25, Z+3	; 0x03
 c4a:	0c 5f       	subi	r16, 0xFC	; 252
 c4c:	1f 4f       	sbci	r17, 0xFF	; 255
 c4e:	06 c0       	rjmp	.+12     	; 0xc5c <vfprintf+0x280>
 c50:	60 81       	ld	r22, Z
 c52:	71 81       	ldd	r23, Z+1	; 0x01
 c54:	80 e0       	ldi	r24, 0x00	; 0
 c56:	90 e0       	ldi	r25, 0x00	; 0
 c58:	0e 5f       	subi	r16, 0xFE	; 254
 c5a:	1f 4f       	sbci	r17, 0xFF	; 255
 c5c:	a4 01       	movw	r20, r8
 c5e:	0e 94 0e 07 	call	0xe1c	; 0xe1c <__ultoa_invert>
 c62:	a8 2e       	mov	r10, r24
 c64:	a8 18       	sub	r10, r8
 c66:	fb 2d       	mov	r31, r11
 c68:	ff 77       	andi	r31, 0x7F	; 127
 c6a:	7f 2e       	mov	r7, r31
 c6c:	76 fe       	sbrs	r7, 6
 c6e:	0b c0       	rjmp	.+22     	; 0xc86 <vfprintf+0x2aa>
 c70:	37 2d       	mov	r19, r7
 c72:	3e 7f       	andi	r19, 0xFE	; 254
 c74:	a5 14       	cp	r10, r5
 c76:	50 f4       	brcc	.+20     	; 0xc8c <vfprintf+0x2b0>
 c78:	74 fe       	sbrs	r7, 4
 c7a:	0a c0       	rjmp	.+20     	; 0xc90 <vfprintf+0x2b4>
 c7c:	72 fc       	sbrc	r7, 2
 c7e:	08 c0       	rjmp	.+16     	; 0xc90 <vfprintf+0x2b4>
 c80:	37 2d       	mov	r19, r7
 c82:	3e 7e       	andi	r19, 0xEE	; 238
 c84:	05 c0       	rjmp	.+10     	; 0xc90 <vfprintf+0x2b4>
 c86:	ba 2c       	mov	r11, r10
 c88:	37 2d       	mov	r19, r7
 c8a:	03 c0       	rjmp	.+6      	; 0xc92 <vfprintf+0x2b6>
 c8c:	ba 2c       	mov	r11, r10
 c8e:	01 c0       	rjmp	.+2      	; 0xc92 <vfprintf+0x2b6>
 c90:	b5 2c       	mov	r11, r5
 c92:	34 ff       	sbrs	r19, 4
 c94:	0d c0       	rjmp	.+26     	; 0xcb0 <vfprintf+0x2d4>
 c96:	fe 01       	movw	r30, r28
 c98:	ea 0d       	add	r30, r10
 c9a:	f1 1d       	adc	r31, r1
 c9c:	80 81       	ld	r24, Z
 c9e:	80 33       	cpi	r24, 0x30	; 48
 ca0:	11 f4       	brne	.+4      	; 0xca6 <vfprintf+0x2ca>
 ca2:	39 7e       	andi	r19, 0xE9	; 233
 ca4:	09 c0       	rjmp	.+18     	; 0xcb8 <vfprintf+0x2dc>
 ca6:	32 ff       	sbrs	r19, 2
 ca8:	06 c0       	rjmp	.+12     	; 0xcb6 <vfprintf+0x2da>
 caa:	b3 94       	inc	r11
 cac:	b3 94       	inc	r11
 cae:	04 c0       	rjmp	.+8      	; 0xcb8 <vfprintf+0x2dc>
 cb0:	83 2f       	mov	r24, r19
 cb2:	86 78       	andi	r24, 0x86	; 134
 cb4:	09 f0       	breq	.+2      	; 0xcb8 <vfprintf+0x2dc>
 cb6:	b3 94       	inc	r11
 cb8:	33 fd       	sbrc	r19, 3
 cba:	13 c0       	rjmp	.+38     	; 0xce2 <vfprintf+0x306>
 cbc:	30 ff       	sbrs	r19, 0
 cbe:	06 c0       	rjmp	.+12     	; 0xccc <vfprintf+0x2f0>
 cc0:	5a 2c       	mov	r5, r10
 cc2:	b3 14       	cp	r11, r3
 cc4:	18 f4       	brcc	.+6      	; 0xccc <vfprintf+0x2f0>
 cc6:	53 0c       	add	r5, r3
 cc8:	5b 18       	sub	r5, r11
 cca:	b3 2c       	mov	r11, r3
 ccc:	b3 14       	cp	r11, r3
 cce:	68 f4       	brcc	.+26     	; 0xcea <vfprintf+0x30e>
 cd0:	b7 01       	movw	r22, r14
 cd2:	80 e2       	ldi	r24, 0x20	; 32
 cd4:	90 e0       	ldi	r25, 0x00	; 0
 cd6:	3c 87       	std	Y+12, r19	; 0x0c
 cd8:	0e 94 d6 06 	call	0xdac	; 0xdac <fputc>
 cdc:	b3 94       	inc	r11
 cde:	3c 85       	ldd	r19, Y+12	; 0x0c
 ce0:	f5 cf       	rjmp	.-22     	; 0xccc <vfprintf+0x2f0>
 ce2:	b3 14       	cp	r11, r3
 ce4:	10 f4       	brcc	.+4      	; 0xcea <vfprintf+0x30e>
 ce6:	3b 18       	sub	r3, r11
 ce8:	01 c0       	rjmp	.+2      	; 0xcec <vfprintf+0x310>
 cea:	31 2c       	mov	r3, r1
 cec:	34 ff       	sbrs	r19, 4
 cee:	12 c0       	rjmp	.+36     	; 0xd14 <vfprintf+0x338>
 cf0:	b7 01       	movw	r22, r14
 cf2:	80 e3       	ldi	r24, 0x30	; 48
 cf4:	90 e0       	ldi	r25, 0x00	; 0
 cf6:	3c 87       	std	Y+12, r19	; 0x0c
 cf8:	0e 94 d6 06 	call	0xdac	; 0xdac <fputc>
 cfc:	3c 85       	ldd	r19, Y+12	; 0x0c
 cfe:	32 ff       	sbrs	r19, 2
 d00:	17 c0       	rjmp	.+46     	; 0xd30 <vfprintf+0x354>
 d02:	31 fd       	sbrc	r19, 1
 d04:	03 c0       	rjmp	.+6      	; 0xd0c <vfprintf+0x330>
 d06:	88 e7       	ldi	r24, 0x78	; 120
 d08:	90 e0       	ldi	r25, 0x00	; 0
 d0a:	02 c0       	rjmp	.+4      	; 0xd10 <vfprintf+0x334>
 d0c:	88 e5       	ldi	r24, 0x58	; 88
 d0e:	90 e0       	ldi	r25, 0x00	; 0
 d10:	b7 01       	movw	r22, r14
 d12:	0c c0       	rjmp	.+24     	; 0xd2c <vfprintf+0x350>
 d14:	83 2f       	mov	r24, r19
 d16:	86 78       	andi	r24, 0x86	; 134
 d18:	59 f0       	breq	.+22     	; 0xd30 <vfprintf+0x354>
 d1a:	31 ff       	sbrs	r19, 1
 d1c:	02 c0       	rjmp	.+4      	; 0xd22 <vfprintf+0x346>
 d1e:	8b e2       	ldi	r24, 0x2B	; 43
 d20:	01 c0       	rjmp	.+2      	; 0xd24 <vfprintf+0x348>
 d22:	80 e2       	ldi	r24, 0x20	; 32
 d24:	37 fd       	sbrc	r19, 7
 d26:	8d e2       	ldi	r24, 0x2D	; 45
 d28:	b7 01       	movw	r22, r14
 d2a:	90 e0       	ldi	r25, 0x00	; 0
 d2c:	0e 94 d6 06 	call	0xdac	; 0xdac <fputc>
 d30:	a5 14       	cp	r10, r5
 d32:	38 f4       	brcc	.+14     	; 0xd42 <vfprintf+0x366>
 d34:	b7 01       	movw	r22, r14
 d36:	80 e3       	ldi	r24, 0x30	; 48
 d38:	90 e0       	ldi	r25, 0x00	; 0
 d3a:	0e 94 d6 06 	call	0xdac	; 0xdac <fputc>
 d3e:	5a 94       	dec	r5
 d40:	f7 cf       	rjmp	.-18     	; 0xd30 <vfprintf+0x354>
 d42:	aa 94       	dec	r10
 d44:	f4 01       	movw	r30, r8
 d46:	ea 0d       	add	r30, r10
 d48:	f1 1d       	adc	r31, r1
 d4a:	80 81       	ld	r24, Z
 d4c:	b7 01       	movw	r22, r14
 d4e:	90 e0       	ldi	r25, 0x00	; 0
 d50:	0e 94 d6 06 	call	0xdac	; 0xdac <fputc>
 d54:	a1 10       	cpse	r10, r1
 d56:	f5 cf       	rjmp	.-22     	; 0xd42 <vfprintf+0x366>
 d58:	33 20       	and	r3, r3
 d5a:	09 f4       	brne	.+2      	; 0xd5e <vfprintf+0x382>
 d5c:	51 ce       	rjmp	.-862    	; 0xa00 <vfprintf+0x24>
 d5e:	b7 01       	movw	r22, r14
 d60:	80 e2       	ldi	r24, 0x20	; 32
 d62:	90 e0       	ldi	r25, 0x00	; 0
 d64:	0e 94 d6 06 	call	0xdac	; 0xdac <fputc>
 d68:	3a 94       	dec	r3
 d6a:	f6 cf       	rjmp	.-20     	; 0xd58 <vfprintf+0x37c>
 d6c:	f7 01       	movw	r30, r14
 d6e:	86 81       	ldd	r24, Z+6	; 0x06
 d70:	97 81       	ldd	r25, Z+7	; 0x07
 d72:	02 c0       	rjmp	.+4      	; 0xd78 <vfprintf+0x39c>
 d74:	8f ef       	ldi	r24, 0xFF	; 255
 d76:	9f ef       	ldi	r25, 0xFF	; 255
 d78:	2c 96       	adiw	r28, 0x0c	; 12
 d7a:	e2 e1       	ldi	r30, 0x12	; 18
 d7c:	0c 94 88 07 	jmp	0xf10	; 0xf10 <__epilogue_restores__>

00000d80 <strnlen_P>:
 d80:	fc 01       	movw	r30, r24
 d82:	05 90       	lpm	r0, Z+
 d84:	61 50       	subi	r22, 0x01	; 1
 d86:	70 40       	sbci	r23, 0x00	; 0
 d88:	01 10       	cpse	r0, r1
 d8a:	d8 f7       	brcc	.-10     	; 0xd82 <strnlen_P+0x2>
 d8c:	80 95       	com	r24
 d8e:	90 95       	com	r25
 d90:	8e 0f       	add	r24, r30
 d92:	9f 1f       	adc	r25, r31
 d94:	08 95       	ret

00000d96 <strnlen>:
 d96:	fc 01       	movw	r30, r24
 d98:	61 50       	subi	r22, 0x01	; 1
 d9a:	70 40       	sbci	r23, 0x00	; 0
 d9c:	01 90       	ld	r0, Z+
 d9e:	01 10       	cpse	r0, r1
 da0:	d8 f7       	brcc	.-10     	; 0xd98 <strnlen+0x2>
 da2:	80 95       	com	r24
 da4:	90 95       	com	r25
 da6:	8e 0f       	add	r24, r30
 da8:	9f 1f       	adc	r25, r31
 daa:	08 95       	ret

00000dac <fputc>:
 dac:	0f 93       	push	r16
 dae:	1f 93       	push	r17
 db0:	cf 93       	push	r28
 db2:	df 93       	push	r29
 db4:	fb 01       	movw	r30, r22
 db6:	23 81       	ldd	r18, Z+3	; 0x03
 db8:	21 fd       	sbrc	r18, 1
 dba:	03 c0       	rjmp	.+6      	; 0xdc2 <fputc+0x16>
 dbc:	8f ef       	ldi	r24, 0xFF	; 255
 dbe:	9f ef       	ldi	r25, 0xFF	; 255
 dc0:	28 c0       	rjmp	.+80     	; 0xe12 <fputc+0x66>
 dc2:	22 ff       	sbrs	r18, 2
 dc4:	16 c0       	rjmp	.+44     	; 0xdf2 <fputc+0x46>
 dc6:	46 81       	ldd	r20, Z+6	; 0x06
 dc8:	57 81       	ldd	r21, Z+7	; 0x07
 dca:	24 81       	ldd	r18, Z+4	; 0x04
 dcc:	35 81       	ldd	r19, Z+5	; 0x05
 dce:	42 17       	cp	r20, r18
 dd0:	53 07       	cpc	r21, r19
 dd2:	44 f4       	brge	.+16     	; 0xde4 <fputc+0x38>
 dd4:	a0 81       	ld	r26, Z
 dd6:	b1 81       	ldd	r27, Z+1	; 0x01
 dd8:	9d 01       	movw	r18, r26
 dda:	2f 5f       	subi	r18, 0xFF	; 255
 ddc:	3f 4f       	sbci	r19, 0xFF	; 255
 dde:	31 83       	std	Z+1, r19	; 0x01
 de0:	20 83       	st	Z, r18
 de2:	8c 93       	st	X, r24
 de4:	26 81       	ldd	r18, Z+6	; 0x06
 de6:	37 81       	ldd	r19, Z+7	; 0x07
 de8:	2f 5f       	subi	r18, 0xFF	; 255
 dea:	3f 4f       	sbci	r19, 0xFF	; 255
 dec:	37 83       	std	Z+7, r19	; 0x07
 dee:	26 83       	std	Z+6, r18	; 0x06
 df0:	10 c0       	rjmp	.+32     	; 0xe12 <fputc+0x66>
 df2:	eb 01       	movw	r28, r22
 df4:	09 2f       	mov	r16, r25
 df6:	18 2f       	mov	r17, r24
 df8:	00 84       	ldd	r0, Z+8	; 0x08
 dfa:	f1 85       	ldd	r31, Z+9	; 0x09
 dfc:	e0 2d       	mov	r30, r0
 dfe:	09 95       	icall
 e00:	89 2b       	or	r24, r25
 e02:	e1 f6       	brne	.-72     	; 0xdbc <fputc+0x10>
 e04:	8e 81       	ldd	r24, Y+6	; 0x06
 e06:	9f 81       	ldd	r25, Y+7	; 0x07
 e08:	01 96       	adiw	r24, 0x01	; 1
 e0a:	9f 83       	std	Y+7, r25	; 0x07
 e0c:	8e 83       	std	Y+6, r24	; 0x06
 e0e:	81 2f       	mov	r24, r17
 e10:	90 2f       	mov	r25, r16
 e12:	df 91       	pop	r29
 e14:	cf 91       	pop	r28
 e16:	1f 91       	pop	r17
 e18:	0f 91       	pop	r16
 e1a:	08 95       	ret

00000e1c <__ultoa_invert>:
 e1c:	fa 01       	movw	r30, r20
 e1e:	aa 27       	eor	r26, r26
 e20:	28 30       	cpi	r18, 0x08	; 8
 e22:	51 f1       	breq	.+84     	; 0xe78 <__ultoa_invert+0x5c>
 e24:	20 31       	cpi	r18, 0x10	; 16
 e26:	81 f1       	breq	.+96     	; 0xe88 <__ultoa_invert+0x6c>
 e28:	e8 94       	clt
 e2a:	6f 93       	push	r22
 e2c:	6e 7f       	andi	r22, 0xFE	; 254
 e2e:	6e 5f       	subi	r22, 0xFE	; 254
 e30:	7f 4f       	sbci	r23, 0xFF	; 255
 e32:	8f 4f       	sbci	r24, 0xFF	; 255
 e34:	9f 4f       	sbci	r25, 0xFF	; 255
 e36:	af 4f       	sbci	r26, 0xFF	; 255
 e38:	b1 e0       	ldi	r27, 0x01	; 1
 e3a:	3e d0       	rcall	.+124    	; 0xeb8 <__ultoa_invert+0x9c>
 e3c:	b4 e0       	ldi	r27, 0x04	; 4
 e3e:	3c d0       	rcall	.+120    	; 0xeb8 <__ultoa_invert+0x9c>
 e40:	67 0f       	add	r22, r23
 e42:	78 1f       	adc	r23, r24
 e44:	89 1f       	adc	r24, r25
 e46:	9a 1f       	adc	r25, r26
 e48:	a1 1d       	adc	r26, r1
 e4a:	68 0f       	add	r22, r24
 e4c:	79 1f       	adc	r23, r25
 e4e:	8a 1f       	adc	r24, r26
 e50:	91 1d       	adc	r25, r1
 e52:	a1 1d       	adc	r26, r1
 e54:	6a 0f       	add	r22, r26
 e56:	71 1d       	adc	r23, r1
 e58:	81 1d       	adc	r24, r1
 e5a:	91 1d       	adc	r25, r1
 e5c:	a1 1d       	adc	r26, r1
 e5e:	20 d0       	rcall	.+64     	; 0xea0 <__ultoa_invert+0x84>
 e60:	09 f4       	brne	.+2      	; 0xe64 <__ultoa_invert+0x48>
 e62:	68 94       	set
 e64:	3f 91       	pop	r19
 e66:	2a e0       	ldi	r18, 0x0A	; 10
 e68:	26 9f       	mul	r18, r22
 e6a:	11 24       	eor	r1, r1
 e6c:	30 19       	sub	r19, r0
 e6e:	30 5d       	subi	r19, 0xD0	; 208
 e70:	31 93       	st	Z+, r19
 e72:	de f6       	brtc	.-74     	; 0xe2a <__ultoa_invert+0xe>
 e74:	cf 01       	movw	r24, r30
 e76:	08 95       	ret
 e78:	46 2f       	mov	r20, r22
 e7a:	47 70       	andi	r20, 0x07	; 7
 e7c:	40 5d       	subi	r20, 0xD0	; 208
 e7e:	41 93       	st	Z+, r20
 e80:	b3 e0       	ldi	r27, 0x03	; 3
 e82:	0f d0       	rcall	.+30     	; 0xea2 <__ultoa_invert+0x86>
 e84:	c9 f7       	brne	.-14     	; 0xe78 <__ultoa_invert+0x5c>
 e86:	f6 cf       	rjmp	.-20     	; 0xe74 <__ultoa_invert+0x58>
 e88:	46 2f       	mov	r20, r22
 e8a:	4f 70       	andi	r20, 0x0F	; 15
 e8c:	40 5d       	subi	r20, 0xD0	; 208
 e8e:	4a 33       	cpi	r20, 0x3A	; 58
 e90:	18 f0       	brcs	.+6      	; 0xe98 <__ultoa_invert+0x7c>
 e92:	49 5d       	subi	r20, 0xD9	; 217
 e94:	31 fd       	sbrc	r19, 1
 e96:	40 52       	subi	r20, 0x20	; 32
 e98:	41 93       	st	Z+, r20
 e9a:	02 d0       	rcall	.+4      	; 0xea0 <__ultoa_invert+0x84>
 e9c:	a9 f7       	brne	.-22     	; 0xe88 <__ultoa_invert+0x6c>
 e9e:	ea cf       	rjmp	.-44     	; 0xe74 <__ultoa_invert+0x58>
 ea0:	b4 e0       	ldi	r27, 0x04	; 4
 ea2:	a6 95       	lsr	r26
 ea4:	97 95       	ror	r25
 ea6:	87 95       	ror	r24
 ea8:	77 95       	ror	r23
 eaa:	67 95       	ror	r22
 eac:	ba 95       	dec	r27
 eae:	c9 f7       	brne	.-14     	; 0xea2 <__ultoa_invert+0x86>
 eb0:	00 97       	sbiw	r24, 0x00	; 0
 eb2:	61 05       	cpc	r22, r1
 eb4:	71 05       	cpc	r23, r1
 eb6:	08 95       	ret
 eb8:	9b 01       	movw	r18, r22
 eba:	ac 01       	movw	r20, r24
 ebc:	0a 2e       	mov	r0, r26
 ebe:	06 94       	lsr	r0
 ec0:	57 95       	ror	r21
 ec2:	47 95       	ror	r20
 ec4:	37 95       	ror	r19
 ec6:	27 95       	ror	r18
 ec8:	ba 95       	dec	r27
 eca:	c9 f7       	brne	.-14     	; 0xebe <__ultoa_invert+0xa2>
 ecc:	62 0f       	add	r22, r18
 ece:	73 1f       	adc	r23, r19
 ed0:	84 1f       	adc	r24, r20
 ed2:	95 1f       	adc	r25, r21
 ed4:	a0 1d       	adc	r26, r0
 ed6:	08 95       	ret

00000ed8 <__prologue_saves__>:
 ed8:	2f 92       	push	r2
 eda:	3f 92       	push	r3
 edc:	4f 92       	push	r4
 ede:	5f 92       	push	r5
 ee0:	6f 92       	push	r6
 ee2:	7f 92       	push	r7
 ee4:	8f 92       	push	r8
 ee6:	9f 92       	push	r9
 ee8:	af 92       	push	r10
 eea:	bf 92       	push	r11
 eec:	cf 92       	push	r12
 eee:	df 92       	push	r13
 ef0:	ef 92       	push	r14
 ef2:	ff 92       	push	r15
 ef4:	0f 93       	push	r16
 ef6:	1f 93       	push	r17
 ef8:	cf 93       	push	r28
 efa:	df 93       	push	r29
 efc:	cd b7       	in	r28, 0x3d	; 61
 efe:	de b7       	in	r29, 0x3e	; 62
 f00:	ca 1b       	sub	r28, r26
 f02:	db 0b       	sbc	r29, r27
 f04:	0f b6       	in	r0, 0x3f	; 63
 f06:	f8 94       	cli
 f08:	de bf       	out	0x3e, r29	; 62
 f0a:	0f be       	out	0x3f, r0	; 63
 f0c:	cd bf       	out	0x3d, r28	; 61
 f0e:	09 94       	ijmp

00000f10 <__epilogue_restores__>:
 f10:	2a 88       	ldd	r2, Y+18	; 0x12
 f12:	39 88       	ldd	r3, Y+17	; 0x11
 f14:	48 88       	ldd	r4, Y+16	; 0x10
 f16:	5f 84       	ldd	r5, Y+15	; 0x0f
 f18:	6e 84       	ldd	r6, Y+14	; 0x0e
 f1a:	7d 84       	ldd	r7, Y+13	; 0x0d
 f1c:	8c 84       	ldd	r8, Y+12	; 0x0c
 f1e:	9b 84       	ldd	r9, Y+11	; 0x0b
 f20:	aa 84       	ldd	r10, Y+10	; 0x0a
 f22:	b9 84       	ldd	r11, Y+9	; 0x09
 f24:	c8 84       	ldd	r12, Y+8	; 0x08
 f26:	df 80       	ldd	r13, Y+7	; 0x07
 f28:	ee 80       	ldd	r14, Y+6	; 0x06
 f2a:	fd 80       	ldd	r15, Y+5	; 0x05
 f2c:	0c 81       	ldd	r16, Y+4	; 0x04
 f2e:	1b 81       	ldd	r17, Y+3	; 0x03
 f30:	aa 81       	ldd	r26, Y+2	; 0x02
 f32:	b9 81       	ldd	r27, Y+1	; 0x01
 f34:	ce 0f       	add	r28, r30
 f36:	d1 1d       	adc	r29, r1
 f38:	0f b6       	in	r0, 0x3f	; 63
 f3a:	f8 94       	cli
 f3c:	de bf       	out	0x3e, r29	; 62
 f3e:	0f be       	out	0x3f, r0	; 63
 f40:	cd bf       	out	0x3d, r28	; 61
 f42:	ed 01       	movw	r28, r26
 f44:	08 95       	ret

00000f46 <_exit>:
 f46:	f8 94       	cli

00000f48 <__stop_program>:
 f48:	ff cf       	rjmp	.-2      	; 0xf48 <__stop_program>
