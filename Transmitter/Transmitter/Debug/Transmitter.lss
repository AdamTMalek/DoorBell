
Transmitter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  00000618  000006ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000618  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000072  00800110  00800110  000006bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c4b  00000000  00000000  00000834  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000567  00000000  00000000  0000147f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000092c  00000000  00000000  000019e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  00002314  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000417  00000000  00000000  000025e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a73  00000000  00000000  000029f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  0000346a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 98 01 	jmp	0x330	; 0x330 <__vector_1>
   8:	0c 94 c5 00 	jmp	0x18a	; 0x18a <__vector_2>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 a2 00 	jmp	0x144	; 0x144 <__vector_13>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 b4 00 	jmp	0x168	; 0x168 <__vector_16>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e1       	ldi	r30, 0x18	; 24
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a2 38       	cpi	r26, 0x82	; 130
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 0a 03 	jmp	0x614	; 0x614 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	81 ee       	ldi	r24, 0xE1	; 225
  aa:	94 e0       	ldi	r25, 0x04	; 4
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	80 40       	sbci	r24, 0x00	; 0
  b0:	90 40       	sbci	r25, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x6>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x10>
  b6:	00 00       	nop
int main(void)
{
	_delay_ms(100);

	// --- LED --- //
	DDRB = (1<<LED0);
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	84 b9       	out	0x04, r24	; 4
	PORTB = (1<<LED0);
  bc:	85 b9       	out	0x05, r24	; 5

	// --- BUTTON --- //
	DDRD &= ~(1<<BTN0);
  be:	53 98       	cbi	0x0a, 3	; 10
	PIND |= (1<<BTN0);
  c0:	4b 9a       	sbi	0x09, 3	; 9

	EIMSK |= (1<<INT1); //Interrupt enable on INT1
  c2:	e9 9a       	sbi	0x1d, 1	; 29

	TIMSK0 |= (1<<TOIE1); //TIMER0 overflow interrupt enable
  c4:	ee e6       	ldi	r30, 0x6E	; 110
  c6:	f0 e0       	ldi	r31, 0x00	; 0
  c8:	90 81       	ld	r25, Z
  ca:	91 60       	ori	r25, 0x01	; 1
  cc:	90 83       	st	Z, r25

	// --- TIMER --- //
	TCCR1B = (1<<CS12); // clk/256
  ce:	94 e0       	ldi	r25, 0x04	; 4
  d0:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	TIMSK1 = (1<<TOIE1); //Overflow interrupt enable
  d4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>

	// --- RF --- //
	RF_Initialize();
  d8:	0e 94 db 00 	call	0x1b6	; 0x1b6 <RF_Initialize>
	sei(); //Global interrupt enable
  dc:	78 94       	sei
	RF_SetRange(RANGE_433MHZ);
  de:	80 e1       	ldi	r24, 0x10	; 16
  e0:	0e 94 33 01 	call	0x266	; 0x266 <RF_SetRange>
	RF_SetFrequency(RFFREQ433(432.74));
  e4:	88 ee       	ldi	r24, 0xE8	; 232
  e6:	93 e0       	ldi	r25, 0x03	; 3
  e8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <RF_SetFrequency>
	RF_SetBaudRate(9600);
  ec:	80 e8       	ldi	r24, 0x80	; 128
  ee:	95 e2       	ldi	r25, 0x25	; 37
  f0:	0e 94 60 01 	call	0x2c0	; 0x2c0 <RF_SetBaudRate>
	RF_SetBandwith(RxBW200, LNA_6, RSSI_79);
  f4:	44 e0       	ldi	r20, 0x04	; 4
  f6:	61 e0       	ldi	r22, 0x01	; 1
  f8:	84 e0       	ldi	r24, 0x04	; 4
  fa:	0e 94 39 01 	call	0x272	; 0x272 <RF_SetBandwith>
	RF_SetPower(PWRdB_0, TxBW120);
  fe:	67 e0       	ldi	r22, 0x07	; 7
 100:	80 e0       	ldi	r24, 0x00	; 0
 102:	0e 94 8b 01 	call	0x316	; 0x316 <RF_SetPower>
	RF_DisableWakeUpTimer();
 106:	0e 94 86 01 	call	0x30c	; 0x30c <RF_DisableWakeUpTimer>
	RF_Transmit(0x0000);
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	0e 94 01 01 	call	0x202	; 0x202 <RF_Transmit>
	RF_Transmit(0xCC77);
 112:	87 e7       	ldi	r24, 0x77	; 119
 114:	9c ec       	ldi	r25, 0xCC	; 204
 116:	0e 94 01 01 	call	0x202	; 0x202 <RF_Transmit>

	// --- UART --- //
	UART_Initlialise(UBRR);
 11a:	87 e0       	ldi	r24, 0x07	; 7
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	0e 94 be 02 	call	0x57c	; 0x57c <UART_Initlialise>

    while (1) 
    {
		if(btnCounter)
 122:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <btnCounter>
 126:	88 23       	and	r24, r24
 128:	e1 f3       	breq	.-8      	; 0x122 <main+0x7c>
		{
			TCCR0B &= ~((1<<CS00) | (1<<CS02));
 12a:	85 b5       	in	r24, 0x25	; 37
 12c:	8a 7f       	andi	r24, 0xFA	; 250
 12e:	85 bd       	out	0x25, r24	; 37
			btnCounter = 0;
 130:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <btnCounter>
			btnTimer = 0;
 134:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <btnTimer>
			RF_TxStart("Button pressed!", 0);
 138:	60 e0       	ldi	r22, 0x00	; 0
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	91 e0       	ldi	r25, 0x01	; 1
 13e:	0e 94 1e 02 	call	0x43c	; 0x43c <RF_TxStart>
 142:	ef cf       	rjmp	.-34     	; 0x122 <main+0x7c>

00000144 <__vector_13>:
		}
    }
}
ISR(TIMER1_OVF_vect)
{
 144:	1f 92       	push	r1
 146:	0f 92       	push	r0
 148:	0f b6       	in	r0, 0x3f	; 63
 14a:	0f 92       	push	r0
 14c:	11 24       	eor	r1, r1
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
	PORTB ^= (1<<LED0);
 152:	95 b1       	in	r25, 0x05	; 5
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	89 27       	eor	r24, r25
 158:	85 b9       	out	0x05, r24	; 5
}
 15a:	9f 91       	pop	r25
 15c:	8f 91       	pop	r24
 15e:	0f 90       	pop	r0
 160:	0f be       	out	0x3f, r0	; 63
 162:	0f 90       	pop	r0
 164:	1f 90       	pop	r1
 166:	18 95       	reti

00000168 <__vector_16>:
ISR(TIMER0_OVF_vect)
{
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	0f b6       	in	r0, 0x3f	; 63
 16e:	0f 92       	push	r0
 170:	11 24       	eor	r1, r1
 172:	8f 93       	push	r24
	btnCounter++;
 174:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <btnCounter>
 178:	8f 5f       	subi	r24, 0xFF	; 255
 17a:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <btnCounter>
}
 17e:	8f 91       	pop	r24
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <__vector_2>:
ISR(INT1_vect)
{
 18a:	1f 92       	push	r1
 18c:	0f 92       	push	r0
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	8f 93       	push	r24
	if(!btnTimer)
 196:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <btnTimer>
 19a:	81 11       	cpse	r24, r1
 19c:	06 c0       	rjmp	.+12     	; 0x1aa <__vector_2+0x20>
	{
		btnTimer = 1;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <btnTimer>
		TCCR0B |= (1<<CS02) | (1<<CS00);
 1a4:	85 b5       	in	r24, 0x25	; 37
 1a6:	85 60       	ori	r24, 0x05	; 5
 1a8:	85 bd       	out	0x25, r24	; 37
	}
 1aa:	8f 91       	pop	r24
 1ac:	0f 90       	pop	r0
 1ae:	0f be       	out	0x3f, r0	; 63
 1b0:	0f 90       	pop	r0
 1b2:	1f 90       	pop	r1
 1b4:	18 95       	reti

000001b6 <RF_Initialize>:
			data[i] = RF_Data[i+1];
		}
		data[size] = 0; //ENDING FRAME WITH 0
		return size; //SIZE OF RECEIVED FRAME IN BYTES
	}
}
 1b6:	84 b1       	in	r24, 0x04	; 4
 1b8:	8c 62       	ori	r24, 0x2C	; 44
 1ba:	84 b9       	out	0x04, r24	; 4
 1bc:	24 98       	cbi	0x04, 4	; 4
 1be:	2a 9a       	sbi	0x05, 2	; 5
 1c0:	2c 9a       	sbi	0x05, 4	; 5
 1c2:	87 ea       	ldi	r24, 0xA7	; 167
 1c4:	91 e6       	ldi	r25, 0x61	; 97
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <RF_Initialize+0x10>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <RF_Initialize+0x16>
 1cc:	00 00       	nop
 1ce:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <RF_status>
 1d2:	8e 7f       	andi	r24, 0xFE	; 254
 1d4:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <RF_status>
 1d8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <RF_status>
 1dc:	8d 7f       	andi	r24, 0xFD	; 253
 1de:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <RF_status>
 1e2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <RF_status>
 1e6:	8b 7f       	andi	r24, 0xFB	; 251
 1e8:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <RF_status>
 1ec:	52 98       	cbi	0x0a, 2	; 10
 1ee:	e9 e6       	ldi	r30, 0x69	; 105
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	8d 7f       	andi	r24, 0xFD	; 253
 1f6:	80 83       	st	Z, r24
 1f8:	80 81       	ld	r24, Z
 1fa:	8e 7f       	andi	r24, 0xFE	; 254
 1fc:	80 83       	st	Z, r24
 1fe:	e8 9a       	sbi	0x1d, 0	; 29
 200:	08 95       	ret

00000202 <RF_Transmit>:
 202:	ac 01       	movw	r20, r24
 204:	2a 98       	cbi	0x05, 2	; 5
 206:	90 e1       	ldi	r25, 0x10	; 16
 208:	20 e0       	ldi	r18, 0x00	; 0
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	55 23       	and	r21, r21
 20e:	14 f4       	brge	.+4      	; 0x214 <RF_Transmit+0x12>
 210:	2b 9a       	sbi	0x05, 3	; 5
 212:	01 c0       	rjmp	.+2      	; 0x216 <RF_Transmit+0x14>
 214:	2b 98       	cbi	0x05, 3	; 5
 216:	22 0f       	add	r18, r18
 218:	33 1f       	adc	r19, r19
 21a:	1c 99       	sbic	0x03, 4	; 3
 21c:	21 60       	ori	r18, 0x01	; 1
 21e:	2d 9a       	sbi	0x05, 5	; 5
 220:	44 0f       	add	r20, r20
 222:	55 1f       	adc	r21, r21
 224:	00 00       	nop
 226:	00 00       	nop
 228:	2d 98       	cbi	0x05, 5	; 5
 22a:	91 50       	subi	r25, 0x01	; 1
 22c:	79 f7       	brne	.-34     	; 0x20c <RF_Transmit+0xa>
 22e:	2a 9a       	sbi	0x05, 2	; 5
 230:	c9 01       	movw	r24, r18
 232:	08 95       	ret

00000234 <UpdateChecksum>:
 234:	70 e0       	ldi	r23, 0x00	; 0
 236:	76 2f       	mov	r23, r22
 238:	66 27       	eor	r22, r22
 23a:	28 e0       	ldi	r18, 0x08	; 8
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	ab 01       	movw	r20, r22
 240:	48 27       	eor	r20, r24
 242:	59 27       	eor	r21, r25
 244:	55 23       	and	r21, r21
 246:	3c f4       	brge	.+14     	; 0x256 <UpdateChecksum+0x22>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	41 e2       	ldi	r20, 0x21	; 33
 24e:	84 27       	eor	r24, r20
 250:	40 e1       	ldi	r20, 0x10	; 16
 252:	94 27       	eor	r25, r20
 254:	02 c0       	rjmp	.+4      	; 0x25a <UpdateChecksum+0x26>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	66 0f       	add	r22, r22
 25c:	77 1f       	adc	r23, r23
 25e:	21 50       	subi	r18, 0x01	; 1
 260:	31 09       	sbc	r19, r1
 262:	69 f7       	brne	.-38     	; 0x23e <UpdateChecksum+0xa>
 264:	08 95       	ret

00000266 <RF_SetRange>:
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	87 6c       	ori	r24, 0xC7	; 199
 26a:	90 68       	ori	r25, 0x80	; 128
 26c:	0e 94 01 01 	call	0x202	; 0x202 <RF_Transmit>
 270:	08 95       	ret

00000272 <RF_SetBandwith>:
 272:	47 70       	andi	r20, 0x07	; 7
 274:	50 e0       	ldi	r21, 0x00	; 0
 276:	50 69       	ori	r21, 0x90	; 144
 278:	63 70       	andi	r22, 0x03	; 3
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	66 0f       	add	r22, r22
 27e:	77 1f       	adc	r23, r23
 280:	66 0f       	add	r22, r22
 282:	77 1f       	adc	r23, r23
 284:	66 0f       	add	r22, r22
 286:	77 1f       	adc	r23, r23
 288:	46 2b       	or	r20, r22
 28a:	57 2b       	or	r21, r23
 28c:	20 e2       	ldi	r18, 0x20	; 32
 28e:	82 9f       	mul	r24, r18
 290:	c0 01       	movw	r24, r0
 292:	11 24       	eor	r1, r1
 294:	99 27       	eor	r25, r25
 296:	84 2b       	or	r24, r20
 298:	95 2b       	or	r25, r21
 29a:	0e 94 01 01 	call	0x202	; 0x202 <RF_Transmit>
 29e:	08 95       	ret

000002a0 <RF_SetFrequency>:
 2a0:	80 36       	cpi	r24, 0x60	; 96
 2a2:	91 05       	cpc	r25, r1
 2a4:	38 f0       	brcs	.+14     	; 0x2b4 <RF_SetFrequency+0x14>
 2a6:	80 34       	cpi	r24, 0x40	; 64
 2a8:	2f e0       	ldi	r18, 0x0F	; 15
 2aa:	92 07       	cpc	r25, r18
 2ac:	28 f0       	brcs	.+10     	; 0x2b8 <RF_SetFrequency+0x18>
 2ae:	8f e3       	ldi	r24, 0x3F	; 63
 2b0:	9f e0       	ldi	r25, 0x0F	; 15
 2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <RF_SetFrequency+0x18>
 2b4:	80 e6       	ldi	r24, 0x60	; 96
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	90 6a       	ori	r25, 0xA0	; 160
 2ba:	0e 94 01 01 	call	0x202	; 0x202 <RF_Transmit>
 2be:	08 95       	ret

000002c0 <RF_SetBaudRate>:
 2c0:	87 39       	cpi	r24, 0x97	; 151
 2c2:	22 e0       	ldi	r18, 0x02	; 2
 2c4:	92 07       	cpc	r25, r18
 2c6:	08 f1       	brcs	.+66     	; 0x30a <RF_SetBaudRate+0x4a>
 2c8:	9c 01       	movw	r18, r24
 2ca:	28 31       	cpi	r18, 0x18	; 24
 2cc:	85 e1       	ldi	r24, 0x15	; 21
 2ce:	38 07       	cpc	r19, r24
 2d0:	78 f4       	brcc	.+30     	; 0x2f0 <RF_SetBaudRate+0x30>
 2d2:	40 e0       	ldi	r20, 0x00	; 0
 2d4:	50 e0       	ldi	r21, 0x00	; 0
 2d6:	60 e6       	ldi	r22, 0x60	; 96
 2d8:	78 ea       	ldi	r23, 0xA8	; 168
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <__divmodsi4>
 2e2:	c9 01       	movw	r24, r18
 2e4:	01 97       	sbiw	r24, 0x01	; 1
 2e6:	80 68       	ori	r24, 0x80	; 128
 2e8:	96 6c       	ori	r25, 0xC6	; 198
 2ea:	0e 94 01 01 	call	0x202	; 0x202 <RF_Transmit>
 2ee:	08 95       	ret
 2f0:	40 e0       	ldi	r20, 0x00	; 0
 2f2:	50 e0       	ldi	r21, 0x00	; 0
 2f4:	6c ef       	ldi	r22, 0xFC	; 252
 2f6:	72 e4       	ldi	r23, 0x42	; 66
 2f8:	85 e0       	ldi	r24, 0x05	; 5
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 c9 02 	call	0x592	; 0x592 <__udivmodsi4>
 300:	c9 01       	movw	r24, r18
 302:	01 97       	sbiw	r24, 0x01	; 1
 304:	96 6c       	ori	r25, 0xC6	; 198
 306:	0e 94 01 01 	call	0x202	; 0x202 <RF_Transmit>
 30a:	08 95       	ret

0000030c <RF_DisableWakeUpTimer>:
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	90 ee       	ldi	r25, 0xE0	; 224
 310:	0e 94 01 01 	call	0x202	; 0x202 <RF_Transmit>
 314:	08 95       	ret

00000316 <RF_SetPower>:
 316:	87 70       	andi	r24, 0x07	; 7
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	98 69       	ori	r25, 0x98	; 152
 31c:	20 e1       	ldi	r18, 0x10	; 16
 31e:	62 9f       	mul	r22, r18
 320:	b0 01       	movw	r22, r0
 322:	11 24       	eor	r1, r1
 324:	77 27       	eor	r23, r23
 326:	86 2b       	or	r24, r22
 328:	97 2b       	or	r25, r23
 32a:	0e 94 01 01 	call	0x202	; 0x202 <RF_Transmit>
 32e:	08 95       	ret

00000330 <__vector_1>:
 330:	1f 92       	push	r1
 332:	0f 92       	push	r0
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	0f 92       	push	r0
 338:	11 24       	eor	r1, r1
 33a:	2f 93       	push	r18
 33c:	3f 93       	push	r19
 33e:	4f 93       	push	r20
 340:	5f 93       	push	r21
 342:	6f 93       	push	r22
 344:	7f 93       	push	r23
 346:	8f 93       	push	r24
 348:	9f 93       	push	r25
 34a:	af 93       	push	r26
 34c:	bf 93       	push	r27
 34e:	cf 93       	push	r28
 350:	ef 93       	push	r30
 352:	ff 93       	push	r31
 354:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <RF_status>
 358:	80 ff       	sbrs	r24, 0
 35a:	3d c0       	rjmp	.+122    	; 0x3d6 <__vector_1+0xa6>
 35c:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 360:	84 36       	cpi	r24, 0x64	; 100
 362:	d8 f4       	brcc	.+54     	; 0x39a <__vector_1+0x6a>
 364:	c0 91 10 01 	lds	r28, 0x0110	; 0x800110 <__data_end>
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	8c 0f       	add	r24, r28
 36c:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	0e 94 01 01 	call	0x202	; 0x202 <RF_Transmit>
 378:	ec 2f       	mov	r30, r28
 37a:	f0 e0       	ldi	r31, 0x00	; 0
 37c:	ec 5e       	subi	r30, 0xEC	; 236
 37e:	fe 4f       	sbci	r31, 0xFE	; 254
 380:	80 83       	st	Z, r24
 382:	20 91 10 01 	lds	r18, 0x0110	; 0x800110 <__data_end>
 386:	30 e0       	ldi	r19, 0x00	; 0
 388:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <RF_Data>
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	03 96       	adiw	r24, 0x03	; 3
 390:	28 17       	cp	r18, r24
 392:	39 07       	cpc	r19, r25
 394:	0c f4       	brge	.+2      	; 0x398 <__vector_1+0x68>
 396:	40 c0       	rjmp	.+128    	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
 398:	0f c0       	rjmp	.+30     	; 0x3b8 <__vector_1+0x88>
 39a:	88 e0       	ldi	r24, 0x08	; 8
 39c:	92 e8       	ldi	r25, 0x82	; 130
 39e:	0e 94 01 01 	call	0x202	; 0x202 <RF_Transmit>
 3a2:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <RF_status>
 3a6:	8e 7f       	andi	r24, 0xFE	; 254
 3a8:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <RF_status>
 3ac:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <RF_status>
 3b0:	84 60       	ori	r24, 0x04	; 4
 3b2:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <RF_status>
 3b6:	30 c0       	rjmp	.+96     	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
 3b8:	88 e0       	ldi	r24, 0x08	; 8
 3ba:	92 e8       	ldi	r25, 0x82	; 130
 3bc:	0e 94 01 01 	call	0x202	; 0x202 <RF_Transmit>
 3c0:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <RF_status>
 3c4:	8e 7f       	andi	r24, 0xFE	; 254
 3c6:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <RF_status>
 3ca:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <RF_status>
 3ce:	84 60       	ori	r24, 0x04	; 4
 3d0:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <RF_status>
 3d4:	21 c0       	rjmp	.+66     	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
 3d6:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <RF_status>
 3da:	81 ff       	sbrs	r24, 1
 3dc:	1d c0       	rjmp	.+58     	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
 3de:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <__data_end>
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	ec 5e       	subi	r30, 0xEC	; 236
 3e6:	fe 4f       	sbci	r31, 0xFE	; 254
 3e8:	80 81       	ld	r24, Z
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	98 6b       	ori	r25, 0xB8	; 184
 3ee:	0e 94 01 01 	call	0x202	; 0x202 <RF_Transmit>
 3f2:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 3f6:	81 11       	cpse	r24, r1
 3f8:	0a c0       	rjmp	.+20     	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
 3fa:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <RF_status>
 3fe:	8d 7f       	andi	r24, 0xFD	; 253
 400:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <RF_status>
 404:	88 e0       	ldi	r24, 0x08	; 8
 406:	92 e8       	ldi	r25, 0x82	; 130
 408:	0e 94 01 01 	call	0x202	; 0x202 <RF_Transmit>
 40c:	05 c0       	rjmp	.+10     	; 0x418 <__FUSE_REGION_LENGTH__+0x18>
 40e:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <__data_end>
 412:	81 50       	subi	r24, 0x01	; 1
 414:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
 418:	ff 91       	pop	r31
 41a:	ef 91       	pop	r30
 41c:	cf 91       	pop	r28
 41e:	bf 91       	pop	r27
 420:	af 91       	pop	r26
 422:	9f 91       	pop	r25
 424:	8f 91       	pop	r24
 426:	7f 91       	pop	r23
 428:	6f 91       	pop	r22
 42a:	5f 91       	pop	r21
 42c:	4f 91       	pop	r20
 42e:	3f 91       	pop	r19
 430:	2f 91       	pop	r18
 432:	0f 90       	pop	r0
 434:	0f be       	out	0x3f, r0	; 63
 436:	0f 90       	pop	r0
 438:	1f 90       	pop	r1
 43a:	18 95       	reti

0000043c <RF_TxStart>:
 *	1 - receiving data frame in progress
 *	3 - data frame is to big to transmit
*/

uint8_t RF_TxStart(char *data, uint8_t size)
{
 43c:	bf 92       	push	r11
 43e:	cf 92       	push	r12
 440:	df 92       	push	r13
 442:	ef 92       	push	r14
 444:	ff 92       	push	r15
 446:	0f 93       	push	r16
 448:	1f 93       	push	r17
 44a:	cf 93       	push	r28
 44c:	df 93       	push	r29
 44e:	6c 01       	movw	r12, r24
 450:	06 2f       	mov	r16, r22
	if(!size)
 452:	61 11       	cpse	r22, r1
 454:	07 c0       	rjmp	.+14     	; 0x464 <RF_TxStart+0x28>
		size = strlen(data);
 456:	fc 01       	movw	r30, r24
 458:	01 90       	ld	r0, Z+
 45a:	00 20       	and	r0, r0
 45c:	e9 f7       	brne	.-6      	; 0x458 <RF_TxStart+0x1c>
 45e:	31 97       	sbiw	r30, 0x01	; 1
 460:	0e 2f       	mov	r16, r30
 462:	08 1b       	sub	r16, r24

	if(RF_status.Tx)
 464:	90 91 13 01 	lds	r25, 0x0113	; 0x800113 <RF_status>
 468:	91 fd       	sbrc	r25, 1
 46a:	79 c0       	rjmp	.+242    	; 0x55e <RF_TxStart+0x122>
		return 1;
	if(RF_status.Rx)
 46c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <RF_status>
 470:	80 fd       	sbrc	r24, 0
 472:	77 c0       	rjmp	.+238    	; 0x562 <RF_TxStart+0x126>
		return 2;
	if(size > RF_DataLength)
 474:	05 36       	cpi	r16, 0x65	; 101
 476:	08 f0       	brcs	.+2      	; 0x47a <RF_TxStart+0x3e>
 478:	76 c0       	rjmp	.+236    	; 0x566 <RF_TxStart+0x12a>
		return 3;

	RF_status.Tx = 1;
 47a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <RF_status>
 47e:	82 60       	ori	r24, 0x02	; 2
 480:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <RF_status>
	//	Increasing frame size by 10 for:
	//	Preamble of 3 bytes, 2 synchrobytes and one byte for the size of the frame
	//	CRC16 Checksum and last preamble bytes
	RF_Index = size + 9;
 484:	89 e0       	ldi	r24, 0x09	; 9
 486:	80 0f       	add	r24, r16
 488:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <__data_end>
	uint8_t index = RF_Index;
 48c:	b0 90 10 01 	lds	r11, 0x0110	; 0x800110 <__data_end>
	RF_Data[index--] = 0xAA;
 490:	eb 2d       	mov	r30, r11
 492:	f0 e0       	ldi	r31, 0x00	; 0
 494:	ec 5e       	subi	r30, 0xEC	; 236
 496:	fe 4f       	sbci	r31, 0xFE	; 254
 498:	8a ea       	ldi	r24, 0xAA	; 170
 49a:	80 83       	st	Z, r24
 49c:	ef ef       	ldi	r30, 0xFF	; 255
 49e:	eb 0d       	add	r30, r11
	RF_Data[index--] = 0xAA;
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	ec 5e       	subi	r30, 0xEC	; 236
 4a4:	fe 4f       	sbci	r31, 0xFE	; 254
 4a6:	80 83       	st	Z, r24
 4a8:	ee ef       	ldi	r30, 0xFE	; 254
 4aa:	eb 0d       	add	r30, r11
	RF_Data[index--] = 0xAA;
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	ec 5e       	subi	r30, 0xEC	; 236
 4b0:	fe 4f       	sbci	r31, 0xFE	; 254
 4b2:	80 83       	st	Z, r24
 4b4:	ed ef       	ldi	r30, 0xFD	; 253
 4b6:	eb 0d       	add	r30, r11
	RF_Data[index--] = 0x2D;
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	ec 5e       	subi	r30, 0xEC	; 236
 4bc:	fe 4f       	sbci	r31, 0xFE	; 254
 4be:	8d e2       	ldi	r24, 0x2D	; 45
 4c0:	80 83       	st	Z, r24
 4c2:	ec ef       	ldi	r30, 0xFC	; 252
 4c4:	eb 0d       	add	r30, r11
	RF_Data[index--] = 0xD4;
 4c6:	f0 e0       	ldi	r31, 0x00	; 0
 4c8:	ec 5e       	subi	r30, 0xEC	; 236
 4ca:	fe 4f       	sbci	r31, 0xFE	; 254
 4cc:	84 ed       	ldi	r24, 0xD4	; 212
 4ce:	80 83       	st	Z, r24
	RF_Data[index--] = size;
 4d0:	ca ef       	ldi	r28, 0xFA	; 250
 4d2:	cb 0d       	add	r28, r11
	uint8_t index = RF_Index;
	RF_Data[index--] = 0xAA;
	RF_Data[index--] = 0xAA;
	RF_Data[index--] = 0xAA;
	RF_Data[index--] = 0x2D;
	RF_Data[index--] = 0xD4;
 4d4:	eb ef       	ldi	r30, 0xFB	; 251
 4d6:	eb 0d       	add	r30, r11
	RF_Data[index--] = size;
 4d8:	f0 e0       	ldi	r31, 0x00	; 0
 4da:	ec 5e       	subi	r30, 0xEC	; 236
 4dc:	fe 4f       	sbci	r31, 0xFE	; 254
 4de:	00 83       	st	Z, r16
	uint16_t checksum = UpdateChecksum(0, size);
 4e0:	60 2f       	mov	r22, r16
 4e2:	80 e0       	ldi	r24, 0x00	; 0
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	0e 94 1a 01 	call	0x234	; 0x234 <UpdateChecksum>
	for(int i = 0; i < size; i++)
 4ea:	00 23       	and	r16, r16
 4ec:	d1 f0       	breq	.+52     	; 0x522 <RF_TxStart+0xe6>
 4ee:	76 01       	movw	r14, r12
 4f0:	10 e0       	ldi	r17, 0x00	; 0
 4f2:	c0 0e       	add	r12, r16
 4f4:	d1 1e       	adc	r13, r17
	{
		RF_Data[index--] = data[i];
 4f6:	df ef       	ldi	r29, 0xFF	; 255
 4f8:	dc 0f       	add	r29, r28
 4fa:	d7 01       	movw	r26, r14
 4fc:	f7 01       	movw	r30, r14
 4fe:	21 91       	ld	r18, Z+
 500:	7f 01       	movw	r14, r30
 502:	ec 2f       	mov	r30, r28
 504:	f0 e0       	ldi	r31, 0x00	; 0
 506:	ec 5e       	subi	r30, 0xEC	; 236
 508:	fe 4f       	sbci	r31, 0xFE	; 254
 50a:	20 83       	st	Z, r18
		checksum = UpdateChecksum(checksum,data[i]);
 50c:	6c 91       	ld	r22, X
 50e:	0e 94 1a 01 	call	0x234	; 0x234 <UpdateChecksum>
	RF_Data[index--] = 0xD4;
	RF_Data[index--] = size;
	uint16_t checksum = UpdateChecksum(0, size);
	for(int i = 0; i < size; i++)
	{
		RF_Data[index--] = data[i];
 512:	cd 2f       	mov	r28, r29
	RF_Data[index--] = 0xAA;
	RF_Data[index--] = 0x2D;
	RF_Data[index--] = 0xD4;
	RF_Data[index--] = size;
	uint16_t checksum = UpdateChecksum(0, size);
	for(int i = 0; i < size; i++)
 514:	ec 14       	cp	r14, r12
 516:	fd 04       	cpc	r15, r13
 518:	71 f7       	brne	.-36     	; 0x4f6 <RF_TxStart+0xba>
 51a:	eb 2d       	mov	r30, r11
 51c:	e0 1b       	sub	r30, r16
 51e:	ca ef       	ldi	r28, 0xFA	; 250
 520:	ce 0f       	add	r28, r30
	{
		RF_Data[index--] = data[i];
		checksum = UpdateChecksum(checksum,data[i]);
	}
	RF_Data[index--] = (checksum & 0x00FF);
 522:	ec 2f       	mov	r30, r28
 524:	f0 e0       	ldi	r31, 0x00	; 0
 526:	ec 5e       	subi	r30, 0xEC	; 236
 528:	fe 4f       	sbci	r31, 0xFE	; 254
 52a:	80 83       	st	Z, r24
 52c:	ef ef       	ldi	r30, 0xFF	; 255
 52e:	ec 0f       	add	r30, r28
	RF_Data[index--] = (checksum >> 8);
 530:	f0 e0       	ldi	r31, 0x00	; 0
 532:	ec 5e       	subi	r30, 0xEC	; 236
 534:	fe 4f       	sbci	r31, 0xFE	; 254
 536:	90 83       	st	Z, r25
 538:	ee ef       	ldi	r30, 0xFE	; 254
 53a:	ec 0f       	add	r30, r28
	RF_Data[index--] = 0xAA;
 53c:	f0 e0       	ldi	r31, 0x00	; 0
 53e:	ec 5e       	subi	r30, 0xEC	; 236
 540:	fe 4f       	sbci	r31, 0xFE	; 254
 542:	8a ea       	ldi	r24, 0xAA	; 170
 544:	80 83       	st	Z, r24
 546:	ed ef       	ldi	r30, 0xFD	; 253
 548:	ec 0f       	add	r30, r28
	RF_Data[index--] = 0xAA;
 54a:	f0 e0       	ldi	r31, 0x00	; 0
 54c:	ec 5e       	subi	r30, 0xEC	; 236
 54e:	fe 4f       	sbci	r31, 0xFE	; 254
 550:	80 83       	st	Z, r24

	RF_Transmit(0x8238); //TX ON
 552:	88 e3       	ldi	r24, 0x38	; 56
 554:	92 e8       	ldi	r25, 0x82	; 130
 556:	0e 94 01 01 	call	0x202	; 0x202 <RF_Transmit>
	{
		_delay_ms(1);
	}
#endif

	return 0;
 55a:	80 e0       	ldi	r24, 0x00	; 0
 55c:	05 c0       	rjmp	.+10     	; 0x568 <RF_TxStart+0x12c>
{
	if(!size)
		size = strlen(data);

	if(RF_status.Tx)
		return 1;
 55e:	81 e0       	ldi	r24, 0x01	; 1
 560:	03 c0       	rjmp	.+6      	; 0x568 <RF_TxStart+0x12c>
	if(RF_status.Rx)
		return 2;
 562:	82 e0       	ldi	r24, 0x02	; 2
 564:	01 c0       	rjmp	.+2      	; 0x568 <RF_TxStart+0x12c>
	if(size > RF_DataLength)
		return 3;
 566:	83 e0       	ldi	r24, 0x03	; 3
		_delay_ms(1);
	}
#endif

	return 0;
}
 568:	df 91       	pop	r29
 56a:	cf 91       	pop	r28
 56c:	1f 91       	pop	r17
 56e:	0f 91       	pop	r16
 570:	ff 90       	pop	r15
 572:	ef 90       	pop	r14
 574:	df 90       	pop	r13
 576:	cf 90       	pop	r12
 578:	bf 90       	pop	r11
 57a:	08 95       	ret

0000057c <UART_Initlialise>:
#include <stdlib.h>

void UART_Initlialise(unsigned int ubrr)
{
	//SETTING BAUD RATE
	UBRR0H = (unsigned char) (ubrr>>8);
 57c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (unsigned char) ubrr;
 580:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	//ENABLING RECEIVER (RX) AND TRANSMITER (TX)
	UCSR0B = (1<<RXEN0) | (1<<TXEN0);
 584:	88 e1       	ldi	r24, 0x18	; 24
 586:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

	//SETTING FRAME FORMAT: 8-bit frame, 1 stop bit
	UCSR0C = (0<<USBS0) | (3<<UCSZ00);
 58a:	86 e0       	ldi	r24, 0x06	; 6
 58c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 590:	08 95       	ret

00000592 <__udivmodsi4>:
 592:	a1 e2       	ldi	r26, 0x21	; 33
 594:	1a 2e       	mov	r1, r26
 596:	aa 1b       	sub	r26, r26
 598:	bb 1b       	sub	r27, r27
 59a:	fd 01       	movw	r30, r26
 59c:	0d c0       	rjmp	.+26     	; 0x5b8 <__udivmodsi4_ep>

0000059e <__udivmodsi4_loop>:
 59e:	aa 1f       	adc	r26, r26
 5a0:	bb 1f       	adc	r27, r27
 5a2:	ee 1f       	adc	r30, r30
 5a4:	ff 1f       	adc	r31, r31
 5a6:	a2 17       	cp	r26, r18
 5a8:	b3 07       	cpc	r27, r19
 5aa:	e4 07       	cpc	r30, r20
 5ac:	f5 07       	cpc	r31, r21
 5ae:	20 f0       	brcs	.+8      	; 0x5b8 <__udivmodsi4_ep>
 5b0:	a2 1b       	sub	r26, r18
 5b2:	b3 0b       	sbc	r27, r19
 5b4:	e4 0b       	sbc	r30, r20
 5b6:	f5 0b       	sbc	r31, r21

000005b8 <__udivmodsi4_ep>:
 5b8:	66 1f       	adc	r22, r22
 5ba:	77 1f       	adc	r23, r23
 5bc:	88 1f       	adc	r24, r24
 5be:	99 1f       	adc	r25, r25
 5c0:	1a 94       	dec	r1
 5c2:	69 f7       	brne	.-38     	; 0x59e <__udivmodsi4_loop>
 5c4:	60 95       	com	r22
 5c6:	70 95       	com	r23
 5c8:	80 95       	com	r24
 5ca:	90 95       	com	r25
 5cc:	9b 01       	movw	r18, r22
 5ce:	ac 01       	movw	r20, r24
 5d0:	bd 01       	movw	r22, r26
 5d2:	cf 01       	movw	r24, r30
 5d4:	08 95       	ret

000005d6 <__divmodsi4>:
 5d6:	05 2e       	mov	r0, r21
 5d8:	97 fb       	bst	r25, 7
 5da:	1e f4       	brtc	.+6      	; 0x5e2 <__divmodsi4+0xc>
 5dc:	00 94       	com	r0
 5de:	0e 94 02 03 	call	0x604	; 0x604 <__negsi2>
 5e2:	57 fd       	sbrc	r21, 7
 5e4:	07 d0       	rcall	.+14     	; 0x5f4 <__divmodsi4_neg2>
 5e6:	0e 94 c9 02 	call	0x592	; 0x592 <__udivmodsi4>
 5ea:	07 fc       	sbrc	r0, 7
 5ec:	03 d0       	rcall	.+6      	; 0x5f4 <__divmodsi4_neg2>
 5ee:	4e f4       	brtc	.+18     	; 0x602 <__divmodsi4_exit>
 5f0:	0c 94 02 03 	jmp	0x604	; 0x604 <__negsi2>

000005f4 <__divmodsi4_neg2>:
 5f4:	50 95       	com	r21
 5f6:	40 95       	com	r20
 5f8:	30 95       	com	r19
 5fa:	21 95       	neg	r18
 5fc:	3f 4f       	sbci	r19, 0xFF	; 255
 5fe:	4f 4f       	sbci	r20, 0xFF	; 255
 600:	5f 4f       	sbci	r21, 0xFF	; 255

00000602 <__divmodsi4_exit>:
 602:	08 95       	ret

00000604 <__negsi2>:
 604:	90 95       	com	r25
 606:	80 95       	com	r24
 608:	70 95       	com	r23
 60a:	61 95       	neg	r22
 60c:	7f 4f       	sbci	r23, 0xFF	; 255
 60e:	8f 4f       	sbci	r24, 0xFF	; 255
 610:	9f 4f       	sbci	r25, 0xFF	; 255
 612:	08 95       	ret

00000614 <_exit>:
 614:	f8 94       	cli

00000616 <__stop_program>:
 616:	ff cf       	rjmp	.-2      	; 0x616 <__stop_program>
